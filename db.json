{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/me/index.html","path":"me/index.html","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/GNU-Linux-Logo-Penguin-SVG.webp","path":"images/GNU-Linux-Logo-Penguin-SVG.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils - 副本.js","path":"js/utils - 副本.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Collecting-commonly-used-websites.md","hash":"ef4b9d21e1e65c86664d3f8a0b9825372acda229","modified":1710506283917},{"_id":"source/_posts/Cpp新知.md","hash":"03ada74a25fcaa199c3bab04993da06356cb9744","modified":1710506307103},{"_id":"source/_posts/Customized-Website-Article-Link.md","hash":"96949d52311b6133d8389613995603c0bf84aadd","modified":1710506314756},{"_id":"source/_posts/DataStructure.md","hash":"fbae241c255f3b3ad072c00e51dbd003a33ae891","modified":1710506323622},{"_id":"source/_posts/Deploy-your-website.md","hash":"7331512f2aa665d76295646099d947b4776b54de","modified":1710506330526},{"_id":"source/_posts/Gdb学习笔记.md","hash":"620d200da01d58f02598e4ff7011a089ba729d32","modified":1710506342249},{"_id":"source/_posts/NotesOfHdlbits.md","hash":"972b8c848f5907b0a52f5ceaa3711c4fe2308d00","modified":1710506391479},{"_id":"source/_posts/Hello-Hexo-NexT.md","hash":"8c8de2f4160881752d571bf48da2792987bda7d7","modified":1710506357399},{"_id":"source/_posts/centos学习笔记.md","hash":"900321a34358a00bfe4c8f465fcb26578e5bb53c","modified":1710506275696},{"_id":"source/_posts/Git学习笔记.md","hash":"f0f0d777622beb4c95880b7fdf587851cf01eab0","modified":1710506350622},{"_id":"source/_posts/python调试工具pdb.md","hash":"b1eb7f36f71977159b8b9ff5f4fd1a847807390a","modified":1711208471427},{"_id":"source/_posts/windows相关.md","hash":"23db614febc4636404f699b3917bbd94a7421d1f","modified":1709687893715},{"_id":"source/_posts/Instruction-Of-Typora.md","hash":"9efc8f3353439cc864b01dc9c9d67978e74c8f86","modified":1710506363594},{"_id":"source/_posts/shell笔记.md","hash":"652f0a7427c255c2f96116b75bcdccee3d961a25","modified":1710506402862},{"_id":"source/_posts/notes-of-acwing.md","hash":"301b3f0075d8835ec2bbb1d1d7b000d97283acb2","modified":1710506376250},{"_id":"source/external-link/index.md","hash":"2781289a744e327f81b17956da61f03672334849","modified":1696393113593},{"_id":"source/about/index.md","hash":"5d3d0e53dc3ff07258a54ed2db0009794db104a0","modified":1696824220252},{"_id":"source/me/index.html","hash":"0af351e21b2212c87f4d0794ece95f28db513cb9","modified":1695635996076},{"_id":"source/tags/index.md","hash":"97157327a8abc43b553e3fa03c981a8eb5b1e406","modified":1695560757248},{"_id":"source/_posts/解决文章目录点击不跳转的问题.md","hash":"0958f4c5b2039a67eacaaaf876a1aed56cb09669","modified":1695747445946},{"_id":"source/_posts/重学链表.md","hash":"9700f70415f10f8f65c4934987e30f8b054f629f","modified":1710506422424},{"_id":"source/_posts/流畅的Python.md","hash":"28eb29b00bc0fa6c864633718a272b800a9b90f6","modified":1709687230223},{"_id":"node_modules/hexo-theme-next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1694997519661},{"_id":"node_modules/hexo-theme-next/package.json","hash":"a491d64d3d9277ed438a76d6244f43b5b2322f1e","modified":1694997519653},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"7fa5fce5ae11760a636213044d42be17a47fbc0e","modified":1694997519780},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1694997519779},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1694997519658},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1694997519656},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1694997519781},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1694997519661},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1694997519779},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1694997519783},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1694997519782},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1694997519784},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1694997519784},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1694997519656},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1694997519785},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1694997519786},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1694997519786},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1694997519788},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1694997519783},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1694997519788},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1694997519789},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1694997519785},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1694997519790},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1694997519787},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1694997519793},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1694997519795},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1694997519793},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1694997519795},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1694997519794},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1694997519796},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1694997519797},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1694997519662},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1694997519670},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1694997519797},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1694997519683},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1694997519797},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1694997519798},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1694997519695},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1694997519659},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1694997519709},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1694997519665},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1694997519657},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1694997519658},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1694997519704},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1694997519660},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1694997519697},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"478d0e62fba2badbcdc1c5a4460d7250e92e372c","modified":1711591768648},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1694997519685},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"da029489bfdbd4f13752b5f14d428373f56aa525","modified":1711209461347},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1694997519707},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1694997519681},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1694997519712},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1694997519673},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1694997519681},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1694997519663},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1694997519713},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1694997519675},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1694997519693},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1694997519695},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1694997519715},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1694997519705},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon.png","hash":"d5184d8948170a8581eb7cef64436b7a66ca3ea2","modified":1695104832000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16.png","hash":"e3405a6ecd7b264e24ec73c43036c179f58883b7","modified":1695104832000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32.png","hash":"23ce8dbf21ef8408f2149821d0624c3c3234779e","modified":1695104832000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"19f514dcc606f399d6e199b8c3b1e5d1f8a52b70","modified":1695021477327},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1694997519778},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1694997519723},{"_id":"node_modules/hexo-theme-next/source/images/safari-pinned-tab.svg","hash":"f491651bb87099e6bc0fd9321544e305d02ae7ef","modified":1695104833000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1694997519580},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1694997519778},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1694997519594},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1694997519595},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1694997519755},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1694997519636},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1694997519599},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1694997519621},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1694997519601},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1694997519639},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1694997519645},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1694997519635},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1694997519631},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1694997519646},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1694997519582},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1694997519583},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1694997519584},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1694997519647},{"_id":"node_modules/hexo-theme-next/source/js/utils - 副本.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1694997519649},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1694997519616},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1695140682177},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1694997519627},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1694997519621},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1694997519626},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1694997519644},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1694997519648},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1694997519607},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1694997519612},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1694997519643},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1694997519651},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1694997519652},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1694997519639},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1694997519640},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1694997519640},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1694997519633},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1694997519698},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1694997519678},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"ae1d8943bb8866711e6d988667137444c95e59ad","modified":1711591959321},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1694997519697},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1694997519679},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta - 副本.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1694997519698},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1694997519641},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1694997519642},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1694997519668},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1694997519699},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1694997519701},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1694997519664},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1694997519680},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1694997519686},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1694997519694},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1694997519669},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1694997519706},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1694997519700},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1694997519679},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1694997519667},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1694997519690},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1694997519710},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1694997519666},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1694997519673},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1694997519681},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1694997519690},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1694997519678},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1694997519693},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1694997519709},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1694997519671},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1694997519673},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1694997519688},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1694997519677},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1694997519696},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1694997519674},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1694997519708},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1694997519675},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1694997519710},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1694997519711},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1694997519686},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1694997519682},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1694997519687},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1694997519684},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1694997519675},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1694997519677},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1694997519711},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1694997519683},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1694997519684},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1694997519665},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1694997519669},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1694997519753},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1694997519687},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1694997519685},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1694997519692},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1694997519696},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1694997519712},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1694997519637},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1694997519737},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1694997519758},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1694997519571},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1694997519730},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1694997519644},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1694997519588},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1694997519755},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1694997519602},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1694997519596},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1694997519608},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1694997519600},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1694997519604},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1694997519613},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1694997519623},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1694997519628},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1694997519650},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1694997519622},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1694997519618},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1694997519647},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1694997519598},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1694997519638},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1694997519649},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1694997519739},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1694997519728},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1694997519763},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1694997519754},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1694997519733},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1694997519743},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1694997519729},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1694997519734},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1694997519757},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1694997519651},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1694997519755},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1694997519747},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1694997519773},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1694997519721},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1694997519719},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1694997519716},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1694997519724},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1694997519747},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1694997519776},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1694997519717},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1694997519721},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1694997519745},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1694997519725},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1694997519720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1694997519718},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1694997519727},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1694997519720},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1694997519748},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1694997519722},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1694997519748},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1694997519726},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1694997519592},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1694997519615},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1694997519617},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1694997519604},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1694997519648},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1694997519591},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1694997519726},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1694997519603},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1694997519614},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1694997519632},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1694997519576},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1694997519624},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1694997519651},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1694997519631},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1694997519627},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1694997519634},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1694997519625},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1694997519629},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1694997519652},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1694997519611},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1694997519733},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1694997519645},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1694997519573},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1694997519734},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1694997519629},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1694997519732},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1694997519775},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1694997519738},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1694997519772},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1694997519752},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1694997519741},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1694997519773},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1694997519742},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1694997519736},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1694997519739},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1694997519737},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1694997519764},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1694997519776},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1694997519740},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1694997519740},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1694997519759},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1694997519760},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1694997519760},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1694997519765},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1694997519760},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1694997519752},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1694997519761},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1694997519761},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1694997519762},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1694997519744},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1694997519762},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1694997519766},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1694997519764},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1694997519767},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1694997519769},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1694997519763},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1694997519771},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1694997519768},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1694997519770},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1694997519771},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1694997519773},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1694997519731},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1694997519735},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1694997519736},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1694997519745},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1694997519738},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1694997519746},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1694997519749},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1694997519753},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1694997519750},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1694997519756},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1694997519758},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1694997519774},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1694997519776},{"_id":"node_modules/hexo-theme-next/source/images/GNU-Linux-Logo-Penguin-SVG.webp","hash":"d04ae8a231b104704c6489a330742849149abf29","modified":1695188805655},{"_id":"public/atom.xml","hash":"334cf7d07eb7d212ead87b9aeabfa8bdc18d018c","modified":1711593374334},{"_id":"public/search.xml","hash":"413e17b78eefea1fea2f1962601d916eaebd42f2","modified":1711593374334},{"_id":"public/external-link/index.html","hash":"96e051bc4e6016b70d3158f302815e3b19505b22","modified":1711593374334},{"_id":"public/tags/index.html","hash":"7948a73967e9a7d3709ee3c4ba35b952acf9c2bc","modified":1711593374334},{"_id":"public/about/index.html","hash":"8f6cc861ebddd8fc0204038c24405b01a4d45414","modified":1711593374334},{"_id":"public/archives/2021/03/index.html","hash":"4b0705ed76161b05d07f6c3ffe001c2b8e8afb98","modified":1711593374334},{"_id":"public/archives/2022/03/index.html","hash":"d34157d9f202fed5958cfa5a0dcd9ea4083160e8","modified":1711593374334},{"_id":"public/archives/2022/10/index.html","hash":"19c34b87db314b1e3d82ca4bd48bba34beddf8ed","modified":1711593374334},{"_id":"public/archives/2023/index.html","hash":"30bf8bb093d48ed44099ab071854408d1c2571ec","modified":1711593374334},{"_id":"public/archives/2023/10/index.html","hash":"8dd3dd6f759ac9ad3680a5167e2b3d5c0e7a0521","modified":1711593374334},{"_id":"public/archives/2024/index.html","hash":"93c7f5a8a0f6fe10ec55580a140f229d960fcc8d","modified":1711593374334},{"_id":"public/archives/2024/03/index.html","hash":"6de600c4046393b83fc4b170c4454f26719e45bd","modified":1711593374334},{"_id":"public/tags/Tools/index.html","hash":"d3b4c6a18b98039b6a1985f58901bb09d3bc0477","modified":1711593374334},{"_id":"public/tags/C/index.html","hash":"feb186aae0276975b062ed7d6dc0c25344278c4e","modified":1711593374334},{"_id":"public/tags/Web/index.html","hash":"189ba4ab19fc967626c0534067643a2c38c6bc63","modified":1711593374334},{"_id":"public/tags/Software/index.html","hash":"4f17cd79d03d4a80a242d79d8c5d6a244679f2f8","modified":1711593374334},{"_id":"public/tags/IC/index.html","hash":"ea77918f7340720e2b4b6292c6a77fd9d852c7f3","modified":1711593374334},{"_id":"public/tags/linux/index.html","hash":"d4517e7cb4452efa8fecfa905d049ff18ce7c306","modified":1711593374334},{"_id":"public/tags/Python/index.html","hash":"13f646ac302b64bce8a0cc3a9e37d51132e49787","modified":1711593374334},{"_id":"public/tags/Algorithm/index.html","hash":"ad5593decc03a490ce33a6fc340cea80071c402d","modified":1711593374334},{"_id":"public/tags/windows/index.html","hash":"73b3f6e541e45de80fa433a0d3d4e355537cfba1","modified":1711593374334},{"_id":"public/posts/9e73dd3c/index.html","hash":"1c83c1e148cb8c8a0aa018b3704ce26c04159f2f","modified":1711593374334},{"_id":"public/posts/32ffb807/index.html","hash":"8f0cc8990bb72e7a77547ff1fc615e20baac36dd","modified":1711593374334},{"_id":"public/posts/918da884/index.html","hash":"0590c399dcc070d9ea5d1aa1ada4af0be3edaa83","modified":1711593374334},{"_id":"public/posts/a06a32e/index.html","hash":"4453e3f1af174d70f41d8f8caae8c23451f9ba87","modified":1711593374334},{"_id":"public/posts/6e206cd9/index.html","hash":"8177384bec92cbdfba05cf006ae1a5f3fec0d04d","modified":1711593374334},{"_id":"public/posts/a91eaa72/index.html","hash":"5dbafecec95c4e8c8345a86d6c98e2f33e40ec61","modified":1711593374334},{"_id":"public/posts/c3711ab9/index.html","hash":"ca7159df9ff60041704a6f183978ebb354882070","modified":1711593374334},{"_id":"public/posts/830bf4be/index.html","hash":"d0301c79cedcb7a10e82b23b7066d3da47368718","modified":1711593374334},{"_id":"public/posts/3ecf09f5/index.html","hash":"336fc82c7ee3f692d9b12099fab237b034e53068","modified":1711593374334},{"_id":"public/posts/14fa845f/index.html","hash":"f35a31881bde0138ea6af0d9b1afeb56dbb2573b","modified":1711593374334},{"_id":"public/posts/ba907200/index.html","hash":"d70928bcc582f7c1a1bd9c1cef23b6756cb2290f","modified":1711593374334},{"_id":"public/posts/7c22bd6a/index.html","hash":"4dc1b6a7c8756eecf0c47937af35e6b4fc3f8276","modified":1711593374334},{"_id":"public/posts/4ff0bc03/index.html","hash":"d6fed6e4dec92dfff2cf07759ad834943b96e094","modified":1711593374334},{"_id":"public/posts/bfc69175/index.html","hash":"197f06c8983e002172f36697f1ffee47470a5c23","modified":1711593374334},{"_id":"public/posts/4bc5178d/index.html","hash":"f72b43aba74d279dc310b2bc86fa83f8467de029","modified":1711593374334},{"_id":"public/posts/f1f00c7b/index.html","hash":"7ef5ee804fc469a6f22d592c0fde293f08959adb","modified":1711593374334},{"_id":"public/posts/b3bdf13b/index.html","hash":"d7e3ff52a033a119dd2646fa822839064c53468c","modified":1711593374334},{"_id":"public/posts/d2783502/index.html","hash":"2ed769fd8cfc985f4ea9780e86248959f12dd230","modified":1711593374334},{"_id":"public/archives/index.html","hash":"f4f5cafbaf25176c59a45cd7d7f180618b154e44","modified":1711593374334},{"_id":"public/archives/page/2/index.html","hash":"6f0dd510c6015d9195f4df6711842cc7c97ae9a7","modified":1711593374334},{"_id":"public/archives/2021/index.html","hash":"fb44a18adb6fdf2e30fd7c7ccdd285ba984b8e49","modified":1711593374334},{"_id":"public/archives/2021/10/index.html","hash":"6dd518df7d915984695a3676089a6f6974ee2a64","modified":1711593374334},{"_id":"public/archives/2022/index.html","hash":"92027da476b4a8114fc56a4025afeb7476270d64","modified":1711593374334},{"_id":"public/index.html","hash":"f4c58fd91396ecfb05a06d875215b5c2afb423f1","modified":1711593374334},{"_id":"public/page/2/index.html","hash":"7a59b1177e6e5d7edb21f319c39fb19315663395","modified":1711593374334},{"_id":"public/me/index.html","hash":"0af351e21b2212c87f4d0794ece95f28db513cb9","modified":1711593374334},{"_id":"public/images/favicon-32x32.png","hash":"23ce8dbf21ef8408f2149821d0624c3c3234779e","modified":1711593374334},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1711593374334},{"_id":"public/images/safari-pinned-tab.svg","hash":"f491651bb87099e6bc0fd9321544e305d02ae7ef","modified":1711593374334},{"_id":"public/images/apple-touch-icon.png","hash":"d5184d8948170a8581eb7cef64436b7a66ca3ea2","modified":1711593374334},{"_id":"public/images/favicon-16x16.png","hash":"e3405a6ecd7b264e24ec73c43036c179f58883b7","modified":1711593374334},{"_id":"public/images/GNU-Linux-Logo-Penguin-SVG.webp","hash":"d04ae8a231b104704c6489a330742849149abf29","modified":1711593374334},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1711593374334},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1711593374334},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1711593374334},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1711593374334},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1711593374334},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1711593374334},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1711593374334},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1711593374334},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1711593374334},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1711593374334},{"_id":"public/css/main.css","hash":"9a02a7f526c4f232a9c8abdcf614e3f5f404d88a","modified":1711593374334},{"_id":"public/js/utils - 副本.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1711593374334},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1711593374334}],"Category":[],"Data":[],"Page":[{"title":"external-link","date":"2023-09-25T09:50:22.000Z","_content":"\n{% lg https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg %}\n\nHackway | https://hackway.org/docs/cs/intro | 计算机专业学习路线 | \n\ncs-self-learning | https://csdiy.wiki | CS自学指南 | \n\n编程指北 | https://csguide.cn/ | 计算机学习路线 | \n\nHello FakeGPT | https://chat.zhile.io | ChatGPT加速器 | \n\nHello 算法 | https://www.hello-algo.com/ | 算法学习入门教程 | \n\nHello 算法备用 | https://hello-algo.pages.dev/ |  算法学习入门教程\n\n{% endlg %}\n\n","source":"external-link/index.md","raw":"---\ntitle: external-link\ndate: 2023-09-25 17:50:22\n---\n\n{% lg https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg %}\n\nHackway | https://hackway.org/docs/cs/intro | 计算机专业学习路线 | \n\ncs-self-learning | https://csdiy.wiki | CS自学指南 | \n\n编程指北 | https://csguide.cn/ | 计算机学习路线 | \n\nHello FakeGPT | https://chat.zhile.io | ChatGPT加速器 | \n\nHello 算法 | https://www.hello-algo.com/ | 算法学习入门教程 | \n\nHello 算法备用 | https://hello-algo.pages.dev/ |  算法学习入门教程\n\n{% endlg %}\n\n","updated":"2023-10-04T04:18:33.593Z","path":"external-link/index.html","comments":1,"layout":"page","_id":"cluami4d0000058te57fk8pi7","content":"<div class=\"link-grid\"><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hackway</p><p>计算机专业学习路线</p>\n<a href=\"https://hackway.org/docs/cs/intro\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>cs-self-learning</p><p>CS自学指南</p>\n<a href=\"https://csdiy.wiki\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>编程指北</p><p>计算机学习路线</p>\n<a href=\"https://csguide.cn/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello FakeGPT</p><p>ChatGPT加速器</p>\n<a href=\"https://chat.zhile.io\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法</p><p>算法学习入门教程</p>\n<a href=\"https://www.hello-algo.com/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法备用</p><p>算法学习入门教程</p>\n<a href=\"https://hello-algo.pages.dev/\"></a>\n</div></div>\n\n","site":{"data":{}},"length":103,"excerpt":"","more":"<div class=\"link-grid\"><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hackway</p><p>计算机专业学习路线</p>\n<a href=\"https://hackway.org/docs/cs/intro\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>cs-self-learning</p><p>CS自学指南</p>\n<a href=\"https://csdiy.wiki\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>编程指北</p><p>计算机学习路线</p>\n<a href=\"https://csguide.cn/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello FakeGPT</p><p>ChatGPT加速器</p>\n<a href=\"https://chat.zhile.io\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法</p><p>算法学习入门教程</p>\n<a href=\"https://www.hello-algo.com/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法备用</p><p>算法学习入门教程</p>\n<a href=\"https://hello-algo.pages.dev/\"></a>\n</div></div>\n\n"},{"title":"Tags","date":"2023-09-18T01:10:10.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2023-09-18 09:10:10\ntype: \"tags\"\n---\n","updated":"2023-09-24T13:05:57.248Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cluami4d6000258te2di8afyo","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"about","date":"2023-09-18T01:08:38.000Z","_content":"\n### To be continue……","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-09-18 09:08:38\n---\n\n### To be continue……","updated":"2023-10-09T04:03:40.252Z","path":"about/index.html","comments":1,"layout":"page","_id":"cluami4d8000558tedximeak1","content":"<h3 id=\"To-be-continue……\"><a href=\"#To-be-continue……\" class=\"headerlink\" title=\"To be continue……\"></a>To be continue……</h3>","site":{"data":{}},"length":14,"excerpt":"","more":"<h3 id=\"To-be-continue……\"><a href=\"#To-be-continue……\" class=\"headerlink\" title=\"To be continue……\"></a>To be continue……</h3>"}],"Post":[{"title":"Collecting commonly used websites","abbrlink":"7c22bd6a","date":"2021-10-01T13:00:00.000Z","_content":"\n<strong style=\"color : orange\">Some commonly used or valuable websites .</strong> \n\n<!-- more -->\n\n{% lg https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg %}\n\nHackway | https://hackway.org/docs/cs/intro | 计算机专业学习路线 | \n\ncs-self-learning | https://csdiy.wiki | CS自学指南 | \n\n名校公开课程评价网 | https://conanhujinming.github.io/comments-for-awesome-courses/ | CS Courses |\n\nCS公开课程学习群 | https://zhuanlan.zhihu.com/p/253232863 | 一个QQ群 |\n\n\n\n编程指北 | https://csguide.cn/ | 计算机学习路线 | \n\nHello FakeGPT | chat.zhille.io | ChatGPT加速器 | \n\nHello 算法 | https://www.hello-algo.com/ | 算法学习入门教程 | \n\nBrian (Bojie) Li (01.me) | https://01.me/\n\n{% endlg %}","source":"_posts/Collecting-commonly-used-websites.md","raw":"---\ntitle: Collecting commonly used websites\ntags: Tools\nabbrlink: 7c22bd6a\ndate: 2021-10-01 21:00:00\n---\n\n<strong style=\"color : orange\">Some commonly used or valuable websites .</strong> \n\n<!-- more -->\n\n{% lg https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg %}\n\nHackway | https://hackway.org/docs/cs/intro | 计算机专业学习路线 | \n\ncs-self-learning | https://csdiy.wiki | CS自学指南 | \n\n名校公开课程评价网 | https://conanhujinming.github.io/comments-for-awesome-courses/ | CS Courses |\n\nCS公开课程学习群 | https://zhuanlan.zhihu.com/p/253232863 | 一个QQ群 |\n\n\n\n编程指北 | https://csguide.cn/ | 计算机学习路线 | \n\nHello FakeGPT | chat.zhille.io | ChatGPT加速器 | \n\nHello 算法 | https://www.hello-algo.com/ | 算法学习入门教程 | \n\nBrian (Bojie) Li (01.me) | https://01.me/\n\n{% endlg %}","slug":"Collecting-commonly-used-websites","published":1,"updated":"2024-03-15T12:38:03.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4d3000158te8y1iaqmc","content":"<p><strong style=\"color : orange\">Some commonly used or valuable websites .</strong> </p>\n<span id=\"more\"></span>\n\n<div class=\"link-grid\"><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hackway</p><p>计算机专业学习路线</p>\n<a href=\"https://hackway.org/docs/cs/intro\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>cs-self-learning</p><p>CS自学指南</p>\n<a href=\"https://csdiy.wiki\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>名校公开课程评价网</p><p>CS Courses</p>\n<a href=\"https://conanhujinming.github.io/comments-for-awesome-courses/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>CS公开课程学习群</p><p>一个QQ群</p>\n<a href=\"https://zhuanlan.zhihu.com/p/253232863\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>编程指北</p><p>计算机学习路线</p>\n<a href=\"https://csguide.cn/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello FakeGPT</p><p>ChatGPT加速器</p>\n<a href=\"chat.zhille.io\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法</p><p>算法学习入门教程</p>\n<a href=\"https://www.hello-algo.com/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Brian (Bojie) Li (01.me)</p><p>https://01.me/</p>\n<a href=\"https://01.me/\"></a>\n</div></div>","site":{"data":{}},"length":188,"excerpt":"<p><strong style=\"color : orange\">Some commonly used or valuable websites .</strong> </p>","more":"<div class=\"link-grid\"><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hackway</p><p>计算机专业学习路线</p>\n<a href=\"https://hackway.org/docs/cs/intro\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>cs-self-learning</p><p>CS自学指南</p>\n<a href=\"https://csdiy.wiki\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>名校公开课程评价网</p><p>CS Courses</p>\n<a href=\"https://conanhujinming.github.io/comments-for-awesome-courses/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>CS公开课程学习群</p><p>一个QQ群</p>\n<a href=\"https://zhuanlan.zhihu.com/p/253232863\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>编程指北</p><p>计算机学习路线</p>\n<a href=\"https://csguide.cn/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello FakeGPT</p><p>ChatGPT加速器</p>\n<a href=\"chat.zhille.io\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Hello 算法</p><p>算法学习入门教程</p>\n<a href=\"https://www.hello-algo.com/\"></a>\n</div><div class=\"link-grid-container\">\n<object class=\"link-grid-image\" data=\"https://pic.imgdb.cn/item/65115467c458853aef31fe7c.jpg\"></object>\n<p>Brian (Bojie) Li (01.me)</p><p>https://01.me/</p>\n<a href=\"https://01.me/\"></a>\n</div></div>"},{"title":"Cpp新知","abbrlink":"3ecf09f5","date":"2022-03-06T00:35:17.000Z","_content":"\n......\n\n<!-- more -->\n\n### C++矩阵运算(运算符重载)\n\n[Link](https://mp.weixin.qq.com/s/C1c5XChVyVT4OSeNvpmaqQ)\n\n```cpp\n#include<iostream>\n\n#include<vector>\n\nclass Matrix{\n\n    private:\n\n        int rows , cols ;\n\n        std::vector<std::vector<int>> data ;\n\n    public:\n\n        Matrix(int rows, int cols , std::vector<std::vector<int>> data): rows(rows), cols(cols) , data(data){}\n\n  \n\n        int get_elem(int row , int col){\n\n            return data[row][col];\n\n        }\n\n        void display(){\n\n            for(int i = 0 ; i < rows ; i++){\n\n                printf(\"\\n\");\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    printf(\"%d  \" , data[i][j]);\n\n                }\n\n            }\n\n        }\n\n        Matrix operator+(const Matrix& A) const{\n\n            Matrix result(rows , cols , data);\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    result.data[i][j] += A.data[i][j];\n\n                }\n\n            return result;\n\n        }\n\n  \n\n        Matrix operator-(const Matrix& A) const{\n\n            Matrix result(rows , cols , data);\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    result.data[i][j] -= A.data[i][j];\n\n                }\n\n            return result;\n\n        }\n\n  \n\n        Matrix operator*(const Matrix& A) const{\n\n            if(cols != A.rows){\n\n                std::cout << \"Invalid matrix dimensions\" << std::endl;\n\n                exit(-1);\n\n            }\n\n            Matrix result(rows , A.cols , std::vector<std::vector<int>> (rows , std::vector<int>(A.cols,0)));\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < A.cols ; j++)\n\n                    for(int k = 0 ; k < cols ; k++){\n\n                        result.data[i][j] += data[i][k] * A.data[k][j];\n\n                    }\n\n            return result;\n\n        }\n\n  \n\n        Matrix transpose()const{\n\n            Matrix res(cols , rows , data);\n\n            for(int i = 0 ; i < cols ; i++)\n\n                for(int j = 0 ; j < rows ; j++){\n\n                    res.data[i][j] = data[j][i];\n\n                }\n\n                return res;\n\n        }\n\n};\n\n  \n\nint main()\n\n{\n\n    std::vector<std::vector<int>> data = { {1,2,3} , {4,5,6} , {7,8,9}};\n\n    std::vector<std::vector<int>> data1 = { {1,2,3} , {4,5,6} , {7,8,9} , {6,6,6}};\n\n    std::vector<std::vector<int>> data2 = { {1,2,3,4} , {4,5,6,7} , {7,8,9,10}};\n\n    Matrix A(3,4,data2);\n\n    Matrix B(4,3,data1);\n\n    Matrix C(3,3,data);\n\n    // C = A + B;\n\n    C = A * B;\n\n    A.display();\n\n    B.display();\n\n    C.display();\n\n    C.transpose().display();\n\n}\n```\n\n### C++11 tuple\n\n[Link](https://mp.weixin.qq.com/s/oPOqr5J0ES0NGO-L3eKvzA)\n\n```cpp\n#include<iostream>\n#include<tuple>\n#include<string>\n\nint main()\n{\n    std::string name = \"Alice\";\n    int age = 21;\n    double grade = 100.0;\n    auto student_tuple = std::make_tuple(name , age , grade);\n\n    std::string name_from_student = std::get<0>(student_tuple);\n    int age_of_student = std::get<1>(student_tuple);\n    double grade_of_student = std::get<2>(student_tuple);\n\n    std::cout << \"name : \" << name_from_student << std::endl;\n    std::cout << \"age  : \" << age_of_student    << std::endl;\n    std::cout << \"grade: \" << grade_of_student  << std::endl;\n    return 0;\n}\n```\n\n### 自动补全背后的算法(字典树)\n\n[Link](https://mp.weixin.qq.com/s/L42BCgw-WczbWsiY9C0MeA)\n\nTrie树（又称前缀树或字典树）是一种用于快速检索字符串数据集中的键的树形数据结构。这种结构非常适合处理字符串集合，特别是实现自动补全或拼写检查等功能。下面，我将通过一个具体的例子来解释Trie树的结构和工作原理。\n\n假设我们有一个Trie树，我们要在其中存储单词“CAT”，“CAN”，和“BAT”。Trie树的结构将如下所示：\n\n```\n       Root\n      /    \\\n     B      C\n     |      |\n     A      A\n    / \\    / \\\n   T   *  T   N\n  /         /\n *         *  \n```\n\n在这个图形化表示中：\n\n- 每个节点代表一个字符。\n- 根节点（Root）不包含字符，它是所有单词的起始点。\n- 每条从根节点到某个标记为“*”的节点的路径代表一个单词。例如，从根节点到第一个“*”的路径是“BAT”。\n- 分支表示单词的不同字符。例如，“BAT”和“CAT”共享第一个字符，但第二个字符不同，因此在第二层分开。\n\n现在，如果我们要添加另一个单词比如“CAR”，Trie树将会更新为：\n\n```\n       Root\n      /    \\\n     B      C\n     |      |\n     A      A\n    / \\    / \\\n   T   *  T   R\n  /       /   |\n *       *    *\n              |\n              *  \n```\n\n在这个新的结构中，“CAT”和“CAR”共享前两个字符“CA”，但第三个字符不同，在“CAR”中为“R”，因此在第三层分叉。\n\n**操作说明**\n\n1. **插入**：当插入一个新单词时，从根节点开始，为单词的每个字符创建一个新的子节点（除非该字符已经存在）。到达单词的最后一个字符时，标记这个节点表示一个单词的结束。\n2. **搜索**：为了查找一个单词，从根节点开始，沿着单词的字符移动。如果能够在每一步都找到相应的字符，并且最后一个字符被标记为一个单词的结尾，那么该单词存在于Trie树中。\n3. **前缀搜索**：前缀搜索与全词搜索类似，但不需要最后一个字符被标记为单词的结尾。如果能够顺着前缀的字符在树中移动到最后一个字符，那么这个前缀存在于树中。\n\nTrie树在处理大量字符串，尤其是进行快速前缀查找和词汇自动补全时非常有效。由于它基于共享前缀来存储单词，因此相比于其他数据结构，它在空间效率上通常更优。\n\n**TrieNode 设计**\n\n`TrieNode` 用于表示Trie树中的每个节点。接下来详细解释这个代码片段，包括`TrieNode`的设计以及每个成员的作用。\n\n```cpp\nclass trie_node{\n    public:\n        bool is_end_of_word;\n        std::unordered_map<char , trie_node*> children;\n\n        trie_node(): is_end_of_word(false){}\n};\n```\n\n1. `bool isEndOfWord;`：这是一个布尔型成员变量，用于标记当前节点是否代表一个单词的结束。如果`isEndOfWord`为`true`，则表示从根节点到当前节点的路径构成一个完整的单词。\n2. `unordered_map<char, TrieNode*> children;`：这是一个无序映射（`unordered_map`），用于存储当前节点的子节点。Trie树的一个关键特性是每个节点可以有多个子节点，每个子节点对应一个字符。这个`unordered_map`允许我们将字符映射到相应的子节点。\n3. `TrieNode() : isEndOfWord(false) {}`：这是`TrieNode`类的构造函数。构造函数用于初始化新创建的`TrieNode`对象。在这里，构造函数将`isEndOfWord`初始化为`false`，表示节点默认不是单词的结束。\n\n现在让我们通过一个示例来解释如何使用这个`TrieNode`类来构建Trie树：\n\n假设我们要在Trie树中插入单词\"CAT\"，首先我们创建一个根节点。然后，我们从根节点开始，在每个字符位置上创建一个新的`TrieNode`对象，将`isEndOfWord`设置为`false`。在这个过程中，我们将字符映射到相应的子节点，如下所示：\n\n1. 创建根节点，`isEndOfWord`为`false`。\n2. 在根节点下创建字符'C'对应的子节点，`isEndOfWord`为`false`。\n3. 在字符'C'对应的子节点下创建字符'A'对应的子节点，`isEndOfWord`为`false`。\n4. 在字符'A'对应的子节点下创建字符'T'对应的子节点，`isEndOfWord`为`true`，因为\"CAT\"的最后一个字符表示单词的结束。\n\n这就是如何使用`TrieNode`类来构建Trie树的一部分。这个类的设计允许我们轻松地在每个节点上附加字符和标记单词的结束。随着插入更多的单词，Trie树的结构会不断扩展。\n\n**完整代码**\n\n这段代码实现了一个称为“Trie”（也被称为前缀树或字典树）的数据结构:\n\n```cpp\n#include<iostream>\n#include<unordered_map>\n#include<string>\nclass trie_node{\n    public:\n        bool is_end_of_word;\n        std::unordered_map<char , trie_node*> children;\n\n        trie_node(): is_end_of_word(false){}\n};\n\nclass trie{\n    private:\n        trie_node* root;\n        //Recursively cleans up memory\n        void clear_memory(trie_node* node){\n            for(auto pair : node->children)\n                clear_memory(pair.second);\n            delete node;\n        }\n    public:\n        trie(){\n            root = new trie_node;\n        }\n\n        void insert(std::string word){\n            trie_node* current = root;\n            for(char ch : word){\n                if(current->children.find(ch) == current->children.end()){\n                    current->children[ch] = new trie_node;\n                }\n                current = current->children[ch];\n            }\n            current->is_end_of_word = true;\n        }\n        //search whether word is in trie tree or not\n        bool search(std::string word){\n            trie_node* current = root;\n            for(char ch : word){\n                if(current->children.find(ch) == current->children.end())\n                    return false;\n                current = current->children[ch]; \n            }\n            return current != nullptr && current->is_end_of_word;\n        }\n\n        //search whether prefix is the prefix of the word in trie tree or not\n        bool start_with(std::string prefix){\n            trie_node* current = root;\n            for(char ch : prefix){\n                if(current->children.find(ch) == current->children.end()){\n                    return false;\n                }\n                current = current->children[ch];\n            }\n            return true;\n        }\n\n\n        ~trie(){\n            clear_memory(root);\n        }\n\n};\n\nint main()\n{\n    trie trie_tree;\n    trie_tree.insert(\"nudt\");\n    trie_tree.insert(\"hust\");\n    std::cout << trie_tree.search(\"hust\") << std::endl;\n    std::cout << trie_tree.start_with(\"nud\") << std::endl;\n    return 0;\n}\n```\n\n### c++/Python调用shell命令\n\n[参考链接](https://mp.weixin.qq.com/s/ahXrzTlIJcQGW_ONPvRgJQ)\n`C++`调用`shell`命令:\n\n```cpp\nchar* command = malloc(sizeof(char)*100);\n\tsnprintf(command , 100 , \"sed -i '13c `define M_c %d' ../sim/testbench/mau_sau_tb_fp64.sv\" , max_row);\n\tsystem(command);\n\tfree(command);\n```\n\n`python`调用`shell`命令\n\n```python\nos.system(\"echo 'hello world'\")\n```\n\n\n\n### 遍历数组的背后\n\n[数组有序与否对遍历的影响](https://mp.weixin.qq.com/s/36ouxHNRoX4ZZJ4dxmkjeg)\n\n[数组按行与按列遍历的差距](https://mp.weixin.qq.com/s/Mm8PqPM1vULK9Yr8tOnOgg) \n\n上面这篇文章写得很详细了，以下是总结与代码实现。\n\n- 数组有序与否影响的是CPU的动态预测，有序的数组动态预测准确度很高。\n\n```cpp\n#include<iostream>\n\n#include<vector>\n\n#include<ctime>\n\n#include<algorithm>\n\n#define SIZE 1e8\n\nint calc(const std::vector<int> &q){\n\n    int a = 0 , b = 0 , len = q.size() ;\n\n    for(int i = 0 ; i < len ; i++){\n\n        if(q[i] < 500)  a++ ;\n\n        else b++ ;\n\n    }\n\n    return a - b ;\n\n}\n\nint main()\n\n{\n\n   std::vector<int> q ;\n\n   for(int i = 0 ; i < SIZE ; i++){\n\n        q.push_back(rand() % 1000) ; //无序数组\n\n        // q.push_back(i) ; //有序数组\n\n   }\n\n    clock_t start = clock() ;\n\n    calc(q) ;\n\n    clock_t end = clock() ;    \n\n    double cost = (double) (end - start) / CLOCKS_PER_SEC ;\n\n    std::printf(\"Time cost : %.3fs\\n\" , cost) ;\n\n    //After sort\n\n    std::sort(q.begin() , q.end() ) ;\n\n    clock_t start1 = clock() ;\n\n    calc(q) ;\n\n    clock_t end1 = clock() ;    \n\n    double cost1 = (double) (end1 - start1) / CLOCKS_PER_SEC ;\n\n    std::printf(\"Time cost after sort : %.3fs\\n\" , cost1) ;\n\n    return 0 ;\n\n}\n```\n\n> Time cost : 0.570s\n> Time cost after sort : 0.129s\n\n\n\n### 传参尽量传引用\n\n传参用引用！\n\n- 如果我们用以下方式传参\n\n```cpp\nvoid func(vector<vector<int>> M)\n```\n\n子函数中就会初始化一个变量`M`，并将形参`M`复制一份给新的`M` , 这样会损失性能。\n\n**传引用的本质就是传地址** ， 这样可以避免复制\n\n```cpp\nvoid func(vector<vector<int>> &M)\n```\n\n如果考虑到为防止在`func`中误操作修改了主函数的`M` ， 可以这样：\n\n```cpp\nvoid func(const vector<vector<int>> &M)\n```\n\n这样在`func`的作用域中，M便不可修改，不会影响主函数中的`M` .\n\n- 实例\n\n```cpp\ntypedef vector<int> vi ;\ntypedef vector<float> vf ;\ntypedef vector<vf> matrix ;\nvoid encode_CS45D(const matrix &M , vf &val , vi &nr , vi &ptr , vi &idx){\n    int m = M.size() , n = M[0].size() ;\n    int NNZ = 0 , nr_t = -1 , t = 0 ;\n    //NNZ : numble of zeros in each slash\n    //nr_t : nr_temp\n    //t indicate whenther there are all zeros in the slash\n    for(int i = 0 , j = 0 ; i < m ; i++){\n        t = 0 , nr_t++ ;\n        for(int k = i , l = 0 ; (l < n && k >= 0) ; k-- , l++){\n            if(M[k][l] != 0){\n                val.push_back(M[k][l]) ;\n                idx.push_back(l) ;\n                NNZ++ , t = 1 ;\n            }\n        }\n        if(t)   nr.push_back(nr_t) ;\n        if(NNZ != ptr.back())   ptr.push_back(NNZ) ;\n    }\n\n    for(int i = m -1 , j = 1 ; j < n ; j++){\n        t = 0 , nr_t++ ;\n        for(int k = i , l = j ; l < n ; l++ , k--){\n            if(M[k][l] != 0){\n                val.push_back(M[k][l]) ;\n                idx.push_back(l) ;\n                NNZ++ , t = 1 ;\n            }\n        }\n        if(t)   nr.push_back(nr_t) ;\n        if(NNZ != ptr.back())   ptr.push_back(NNZ) ;\n    }\n    \n}\n```\n\n如果在传参中，M的传参方式是`matrix M` , 在`Gdb`调试中，无法`step`进`encode_CS45D`这个函数，而是会进入`M`的**拷贝子程序**中(未知，较为底层)\n#cpp \n\n\n\n","source":"_posts/Cpp新知.md","raw":"---\ntitle: Cpp新知\ntags: C++\nabbrlink: 3ecf09f5\ndate: 2022-03-06 08:35:17\n---\n\n......\n\n<!-- more -->\n\n### C++矩阵运算(运算符重载)\n\n[Link](https://mp.weixin.qq.com/s/C1c5XChVyVT4OSeNvpmaqQ)\n\n```cpp\n#include<iostream>\n\n#include<vector>\n\nclass Matrix{\n\n    private:\n\n        int rows , cols ;\n\n        std::vector<std::vector<int>> data ;\n\n    public:\n\n        Matrix(int rows, int cols , std::vector<std::vector<int>> data): rows(rows), cols(cols) , data(data){}\n\n  \n\n        int get_elem(int row , int col){\n\n            return data[row][col];\n\n        }\n\n        void display(){\n\n            for(int i = 0 ; i < rows ; i++){\n\n                printf(\"\\n\");\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    printf(\"%d  \" , data[i][j]);\n\n                }\n\n            }\n\n        }\n\n        Matrix operator+(const Matrix& A) const{\n\n            Matrix result(rows , cols , data);\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    result.data[i][j] += A.data[i][j];\n\n                }\n\n            return result;\n\n        }\n\n  \n\n        Matrix operator-(const Matrix& A) const{\n\n            Matrix result(rows , cols , data);\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < cols ; j++){\n\n                    result.data[i][j] -= A.data[i][j];\n\n                }\n\n            return result;\n\n        }\n\n  \n\n        Matrix operator*(const Matrix& A) const{\n\n            if(cols != A.rows){\n\n                std::cout << \"Invalid matrix dimensions\" << std::endl;\n\n                exit(-1);\n\n            }\n\n            Matrix result(rows , A.cols , std::vector<std::vector<int>> (rows , std::vector<int>(A.cols,0)));\n\n            for(int i = 0 ; i < rows ; i++)\n\n                for(int j = 0 ; j < A.cols ; j++)\n\n                    for(int k = 0 ; k < cols ; k++){\n\n                        result.data[i][j] += data[i][k] * A.data[k][j];\n\n                    }\n\n            return result;\n\n        }\n\n  \n\n        Matrix transpose()const{\n\n            Matrix res(cols , rows , data);\n\n            for(int i = 0 ; i < cols ; i++)\n\n                for(int j = 0 ; j < rows ; j++){\n\n                    res.data[i][j] = data[j][i];\n\n                }\n\n                return res;\n\n        }\n\n};\n\n  \n\nint main()\n\n{\n\n    std::vector<std::vector<int>> data = { {1,2,3} , {4,5,6} , {7,8,9}};\n\n    std::vector<std::vector<int>> data1 = { {1,2,3} , {4,5,6} , {7,8,9} , {6,6,6}};\n\n    std::vector<std::vector<int>> data2 = { {1,2,3,4} , {4,5,6,7} , {7,8,9,10}};\n\n    Matrix A(3,4,data2);\n\n    Matrix B(4,3,data1);\n\n    Matrix C(3,3,data);\n\n    // C = A + B;\n\n    C = A * B;\n\n    A.display();\n\n    B.display();\n\n    C.display();\n\n    C.transpose().display();\n\n}\n```\n\n### C++11 tuple\n\n[Link](https://mp.weixin.qq.com/s/oPOqr5J0ES0NGO-L3eKvzA)\n\n```cpp\n#include<iostream>\n#include<tuple>\n#include<string>\n\nint main()\n{\n    std::string name = \"Alice\";\n    int age = 21;\n    double grade = 100.0;\n    auto student_tuple = std::make_tuple(name , age , grade);\n\n    std::string name_from_student = std::get<0>(student_tuple);\n    int age_of_student = std::get<1>(student_tuple);\n    double grade_of_student = std::get<2>(student_tuple);\n\n    std::cout << \"name : \" << name_from_student << std::endl;\n    std::cout << \"age  : \" << age_of_student    << std::endl;\n    std::cout << \"grade: \" << grade_of_student  << std::endl;\n    return 0;\n}\n```\n\n### 自动补全背后的算法(字典树)\n\n[Link](https://mp.weixin.qq.com/s/L42BCgw-WczbWsiY9C0MeA)\n\nTrie树（又称前缀树或字典树）是一种用于快速检索字符串数据集中的键的树形数据结构。这种结构非常适合处理字符串集合，特别是实现自动补全或拼写检查等功能。下面，我将通过一个具体的例子来解释Trie树的结构和工作原理。\n\n假设我们有一个Trie树，我们要在其中存储单词“CAT”，“CAN”，和“BAT”。Trie树的结构将如下所示：\n\n```\n       Root\n      /    \\\n     B      C\n     |      |\n     A      A\n    / \\    / \\\n   T   *  T   N\n  /         /\n *         *  \n```\n\n在这个图形化表示中：\n\n- 每个节点代表一个字符。\n- 根节点（Root）不包含字符，它是所有单词的起始点。\n- 每条从根节点到某个标记为“*”的节点的路径代表一个单词。例如，从根节点到第一个“*”的路径是“BAT”。\n- 分支表示单词的不同字符。例如，“BAT”和“CAT”共享第一个字符，但第二个字符不同，因此在第二层分开。\n\n现在，如果我们要添加另一个单词比如“CAR”，Trie树将会更新为：\n\n```\n       Root\n      /    \\\n     B      C\n     |      |\n     A      A\n    / \\    / \\\n   T   *  T   R\n  /       /   |\n *       *    *\n              |\n              *  \n```\n\n在这个新的结构中，“CAT”和“CAR”共享前两个字符“CA”，但第三个字符不同，在“CAR”中为“R”，因此在第三层分叉。\n\n**操作说明**\n\n1. **插入**：当插入一个新单词时，从根节点开始，为单词的每个字符创建一个新的子节点（除非该字符已经存在）。到达单词的最后一个字符时，标记这个节点表示一个单词的结束。\n2. **搜索**：为了查找一个单词，从根节点开始，沿着单词的字符移动。如果能够在每一步都找到相应的字符，并且最后一个字符被标记为一个单词的结尾，那么该单词存在于Trie树中。\n3. **前缀搜索**：前缀搜索与全词搜索类似，但不需要最后一个字符被标记为单词的结尾。如果能够顺着前缀的字符在树中移动到最后一个字符，那么这个前缀存在于树中。\n\nTrie树在处理大量字符串，尤其是进行快速前缀查找和词汇自动补全时非常有效。由于它基于共享前缀来存储单词，因此相比于其他数据结构，它在空间效率上通常更优。\n\n**TrieNode 设计**\n\n`TrieNode` 用于表示Trie树中的每个节点。接下来详细解释这个代码片段，包括`TrieNode`的设计以及每个成员的作用。\n\n```cpp\nclass trie_node{\n    public:\n        bool is_end_of_word;\n        std::unordered_map<char , trie_node*> children;\n\n        trie_node(): is_end_of_word(false){}\n};\n```\n\n1. `bool isEndOfWord;`：这是一个布尔型成员变量，用于标记当前节点是否代表一个单词的结束。如果`isEndOfWord`为`true`，则表示从根节点到当前节点的路径构成一个完整的单词。\n2. `unordered_map<char, TrieNode*> children;`：这是一个无序映射（`unordered_map`），用于存储当前节点的子节点。Trie树的一个关键特性是每个节点可以有多个子节点，每个子节点对应一个字符。这个`unordered_map`允许我们将字符映射到相应的子节点。\n3. `TrieNode() : isEndOfWord(false) {}`：这是`TrieNode`类的构造函数。构造函数用于初始化新创建的`TrieNode`对象。在这里，构造函数将`isEndOfWord`初始化为`false`，表示节点默认不是单词的结束。\n\n现在让我们通过一个示例来解释如何使用这个`TrieNode`类来构建Trie树：\n\n假设我们要在Trie树中插入单词\"CAT\"，首先我们创建一个根节点。然后，我们从根节点开始，在每个字符位置上创建一个新的`TrieNode`对象，将`isEndOfWord`设置为`false`。在这个过程中，我们将字符映射到相应的子节点，如下所示：\n\n1. 创建根节点，`isEndOfWord`为`false`。\n2. 在根节点下创建字符'C'对应的子节点，`isEndOfWord`为`false`。\n3. 在字符'C'对应的子节点下创建字符'A'对应的子节点，`isEndOfWord`为`false`。\n4. 在字符'A'对应的子节点下创建字符'T'对应的子节点，`isEndOfWord`为`true`，因为\"CAT\"的最后一个字符表示单词的结束。\n\n这就是如何使用`TrieNode`类来构建Trie树的一部分。这个类的设计允许我们轻松地在每个节点上附加字符和标记单词的结束。随着插入更多的单词，Trie树的结构会不断扩展。\n\n**完整代码**\n\n这段代码实现了一个称为“Trie”（也被称为前缀树或字典树）的数据结构:\n\n```cpp\n#include<iostream>\n#include<unordered_map>\n#include<string>\nclass trie_node{\n    public:\n        bool is_end_of_word;\n        std::unordered_map<char , trie_node*> children;\n\n        trie_node(): is_end_of_word(false){}\n};\n\nclass trie{\n    private:\n        trie_node* root;\n        //Recursively cleans up memory\n        void clear_memory(trie_node* node){\n            for(auto pair : node->children)\n                clear_memory(pair.second);\n            delete node;\n        }\n    public:\n        trie(){\n            root = new trie_node;\n        }\n\n        void insert(std::string word){\n            trie_node* current = root;\n            for(char ch : word){\n                if(current->children.find(ch) == current->children.end()){\n                    current->children[ch] = new trie_node;\n                }\n                current = current->children[ch];\n            }\n            current->is_end_of_word = true;\n        }\n        //search whether word is in trie tree or not\n        bool search(std::string word){\n            trie_node* current = root;\n            for(char ch : word){\n                if(current->children.find(ch) == current->children.end())\n                    return false;\n                current = current->children[ch]; \n            }\n            return current != nullptr && current->is_end_of_word;\n        }\n\n        //search whether prefix is the prefix of the word in trie tree or not\n        bool start_with(std::string prefix){\n            trie_node* current = root;\n            for(char ch : prefix){\n                if(current->children.find(ch) == current->children.end()){\n                    return false;\n                }\n                current = current->children[ch];\n            }\n            return true;\n        }\n\n\n        ~trie(){\n            clear_memory(root);\n        }\n\n};\n\nint main()\n{\n    trie trie_tree;\n    trie_tree.insert(\"nudt\");\n    trie_tree.insert(\"hust\");\n    std::cout << trie_tree.search(\"hust\") << std::endl;\n    std::cout << trie_tree.start_with(\"nud\") << std::endl;\n    return 0;\n}\n```\n\n### c++/Python调用shell命令\n\n[参考链接](https://mp.weixin.qq.com/s/ahXrzTlIJcQGW_ONPvRgJQ)\n`C++`调用`shell`命令:\n\n```cpp\nchar* command = malloc(sizeof(char)*100);\n\tsnprintf(command , 100 , \"sed -i '13c `define M_c %d' ../sim/testbench/mau_sau_tb_fp64.sv\" , max_row);\n\tsystem(command);\n\tfree(command);\n```\n\n`python`调用`shell`命令\n\n```python\nos.system(\"echo 'hello world'\")\n```\n\n\n\n### 遍历数组的背后\n\n[数组有序与否对遍历的影响](https://mp.weixin.qq.com/s/36ouxHNRoX4ZZJ4dxmkjeg)\n\n[数组按行与按列遍历的差距](https://mp.weixin.qq.com/s/Mm8PqPM1vULK9Yr8tOnOgg) \n\n上面这篇文章写得很详细了，以下是总结与代码实现。\n\n- 数组有序与否影响的是CPU的动态预测，有序的数组动态预测准确度很高。\n\n```cpp\n#include<iostream>\n\n#include<vector>\n\n#include<ctime>\n\n#include<algorithm>\n\n#define SIZE 1e8\n\nint calc(const std::vector<int> &q){\n\n    int a = 0 , b = 0 , len = q.size() ;\n\n    for(int i = 0 ; i < len ; i++){\n\n        if(q[i] < 500)  a++ ;\n\n        else b++ ;\n\n    }\n\n    return a - b ;\n\n}\n\nint main()\n\n{\n\n   std::vector<int> q ;\n\n   for(int i = 0 ; i < SIZE ; i++){\n\n        q.push_back(rand() % 1000) ; //无序数组\n\n        // q.push_back(i) ; //有序数组\n\n   }\n\n    clock_t start = clock() ;\n\n    calc(q) ;\n\n    clock_t end = clock() ;    \n\n    double cost = (double) (end - start) / CLOCKS_PER_SEC ;\n\n    std::printf(\"Time cost : %.3fs\\n\" , cost) ;\n\n    //After sort\n\n    std::sort(q.begin() , q.end() ) ;\n\n    clock_t start1 = clock() ;\n\n    calc(q) ;\n\n    clock_t end1 = clock() ;    \n\n    double cost1 = (double) (end1 - start1) / CLOCKS_PER_SEC ;\n\n    std::printf(\"Time cost after sort : %.3fs\\n\" , cost1) ;\n\n    return 0 ;\n\n}\n```\n\n> Time cost : 0.570s\n> Time cost after sort : 0.129s\n\n\n\n### 传参尽量传引用\n\n传参用引用！\n\n- 如果我们用以下方式传参\n\n```cpp\nvoid func(vector<vector<int>> M)\n```\n\n子函数中就会初始化一个变量`M`，并将形参`M`复制一份给新的`M` , 这样会损失性能。\n\n**传引用的本质就是传地址** ， 这样可以避免复制\n\n```cpp\nvoid func(vector<vector<int>> &M)\n```\n\n如果考虑到为防止在`func`中误操作修改了主函数的`M` ， 可以这样：\n\n```cpp\nvoid func(const vector<vector<int>> &M)\n```\n\n这样在`func`的作用域中，M便不可修改，不会影响主函数中的`M` .\n\n- 实例\n\n```cpp\ntypedef vector<int> vi ;\ntypedef vector<float> vf ;\ntypedef vector<vf> matrix ;\nvoid encode_CS45D(const matrix &M , vf &val , vi &nr , vi &ptr , vi &idx){\n    int m = M.size() , n = M[0].size() ;\n    int NNZ = 0 , nr_t = -1 , t = 0 ;\n    //NNZ : numble of zeros in each slash\n    //nr_t : nr_temp\n    //t indicate whenther there are all zeros in the slash\n    for(int i = 0 , j = 0 ; i < m ; i++){\n        t = 0 , nr_t++ ;\n        for(int k = i , l = 0 ; (l < n && k >= 0) ; k-- , l++){\n            if(M[k][l] != 0){\n                val.push_back(M[k][l]) ;\n                idx.push_back(l) ;\n                NNZ++ , t = 1 ;\n            }\n        }\n        if(t)   nr.push_back(nr_t) ;\n        if(NNZ != ptr.back())   ptr.push_back(NNZ) ;\n    }\n\n    for(int i = m -1 , j = 1 ; j < n ; j++){\n        t = 0 , nr_t++ ;\n        for(int k = i , l = j ; l < n ; l++ , k--){\n            if(M[k][l] != 0){\n                val.push_back(M[k][l]) ;\n                idx.push_back(l) ;\n                NNZ++ , t = 1 ;\n            }\n        }\n        if(t)   nr.push_back(nr_t) ;\n        if(NNZ != ptr.back())   ptr.push_back(NNZ) ;\n    }\n    \n}\n```\n\n如果在传参中，M的传参方式是`matrix M` , 在`Gdb`调试中，无法`step`进`encode_CS45D`这个函数，而是会进入`M`的**拷贝子程序**中(未知，较为底层)\n#cpp \n\n\n\n","slug":"Cpp新知","published":1,"updated":"2024-03-15T12:38:27.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4d6000358te0za6ea90","content":"<p>……</p>\n<span id=\"more\"></span>\n\n<h3 id=\"C-矩阵运算-运算符重载\"><a href=\"#C-矩阵运算-运算符重载\" class=\"headerlink\" title=\"C++矩阵运算(运算符重载)\"></a>C++矩阵运算(运算符重载)</h3><p><a href=\"https://mp.weixin.qq.com/s/C1c5XChVyVT4OSeNvpmaqQ\">Link</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> rows , cols ;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> rows, <span class=\"type\">int</span> cols , std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data): <span class=\"built_in\">rows</span>(rows), <span class=\"built_in\">cols</span>(cols) , <span class=\"built_in\">data</span>(data)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_elem</span><span class=\"params\">(<span class=\"type\">int</span> row , <span class=\"type\">int</span> col)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> data[row][col];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d  &quot;</span> , data[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , cols , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result.data[i][j] += A.data[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , cols , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result.data[i][j] -= A.data[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cols != A.rows)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Invalid matrix dimensions&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , A.cols , std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; (rows , std::vector&lt;<span class=\"type\">int</span>&gt;(A.cols,<span class=\"number\">0</span>)))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; A.cols ; j++)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span> ; k &lt; cols ; k++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        result.data[i][j] += data[i][k] * A.data[k][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">transpose</span><span class=\"params\">()</span><span class=\"type\">const</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(cols , rows , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; cols ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; rows ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    res.data[i][j] = data[j][i];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data1 = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125; , &#123;<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data2 = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">A</span><span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">4</span>,data2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">B</span><span class=\"params\">(<span class=\"number\">4</span>,<span class=\"number\">3</span>,data1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">C</span><span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">3</span>,data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// C = A + B;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    C = A * B;</span><br><span class=\"line\"></span><br><span class=\"line\">    A.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    B.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    C.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    C.<span class=\"built_in\">transpose</span>().<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"C-11-tuple\"><a href=\"#C-11-tuple\" class=\"headerlink\" title=\"C++11 tuple\"></a>C++11 tuple</h3><p><a href=\"https://mp.weixin.qq.com/s/oPOqr5J0ES0NGO-L3eKvzA\">Link</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">21</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> grade = <span class=\"number\">100.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> student_tuple = std::<span class=\"built_in\">make_tuple</span>(name , age , grade);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string name_from_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(student_tuple);</span><br><span class=\"line\">    <span class=\"type\">int</span> age_of_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(student_tuple);</span><br><span class=\"line\">    <span class=\"type\">double</span> grade_of_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(student_tuple);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;name : &quot;</span> &lt;&lt; name_from_student &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;age  : &quot;</span> &lt;&lt; age_of_student    &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;grade: &quot;</span> &lt;&lt; grade_of_student  &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动补全背后的算法-字典树\"><a href=\"#自动补全背后的算法-字典树\" class=\"headerlink\" title=\"自动补全背后的算法(字典树)\"></a>自动补全背后的算法(字典树)</h3><p><a href=\"https://mp.weixin.qq.com/s/L42BCgw-WczbWsiY9C0MeA\">Link</a></p>\n<p>Trie树（又称前缀树或字典树）是一种用于快速检索字符串数据集中的键的树形数据结构。这种结构非常适合处理字符串集合，特别是实现自动补全或拼写检查等功能。下面，我将通过一个具体的例子来解释Trie树的结构和工作原理。</p>\n<p>假设我们有一个Trie树，我们要在其中存储单词“CAT”，“CAN”，和“BAT”。Trie树的结构将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      Root</span><br><span class=\"line\">     /    \\</span><br><span class=\"line\">    B      C</span><br><span class=\"line\">    |      |</span><br><span class=\"line\">    A      A</span><br><span class=\"line\">   / \\    / \\</span><br><span class=\"line\">  T   *  T   N</span><br><span class=\"line\"> /         /</span><br><span class=\"line\">*         *  </span><br></pre></td></tr></table></figure>\n\n<p>在这个图形化表示中：</p>\n<ul>\n<li>每个节点代表一个字符。</li>\n<li>根节点（Root）不包含字符，它是所有单词的起始点。</li>\n<li>每条从根节点到某个标记为“<em>”的节点的路径代表一个单词。例如，从根节点到第一个“</em>”的路径是“BAT”。</li>\n<li>分支表示单词的不同字符。例如，“BAT”和“CAT”共享第一个字符，但第二个字符不同，因此在第二层分开。</li>\n</ul>\n<p>现在，如果我们要添加另一个单词比如“CAR”，Trie树将会更新为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      Root</span><br><span class=\"line\">     /    \\</span><br><span class=\"line\">    B      C</span><br><span class=\"line\">    |      |</span><br><span class=\"line\">    A      A</span><br><span class=\"line\">   / \\    / \\</span><br><span class=\"line\">  T   *  T   R</span><br><span class=\"line\"> /       /   |</span><br><span class=\"line\">*       *    *</span><br><span class=\"line\">             |</span><br><span class=\"line\">             *  </span><br></pre></td></tr></table></figure>\n\n<p>在这个新的结构中，“CAT”和“CAR”共享前两个字符“CA”，但第三个字符不同，在“CAR”中为“R”，因此在第三层分叉。</p>\n<p><strong>操作说明</strong></p>\n<ol>\n<li><strong>插入</strong>：当插入一个新单词时，从根节点开始，为单词的每个字符创建一个新的子节点（除非该字符已经存在）。到达单词的最后一个字符时，标记这个节点表示一个单词的结束。</li>\n<li><strong>搜索</strong>：为了查找一个单词，从根节点开始，沿着单词的字符移动。如果能够在每一步都找到相应的字符，并且最后一个字符被标记为一个单词的结尾，那么该单词存在于Trie树中。</li>\n<li><strong>前缀搜索</strong>：前缀搜索与全词搜索类似，但不需要最后一个字符被标记为单词的结尾。如果能够顺着前缀的字符在树中移动到最后一个字符，那么这个前缀存在于树中。</li>\n</ol>\n<p>Trie树在处理大量字符串，尤其是进行快速前缀查找和词汇自动补全时非常有效。由于它基于共享前缀来存储单词，因此相比于其他数据结构，它在空间效率上通常更优。</p>\n<p><strong>TrieNode 设计</strong></p>\n<p><code>TrieNode</code> 用于表示Trie树中的每个节点。接下来详细解释这个代码片段，包括<code>TrieNode</code>的设计以及每个成员的作用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie_node</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> is_end_of_word;</span><br><span class=\"line\">        std::unordered_map&lt;<span class=\"type\">char</span> , trie_node*&gt; children;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">trie_node</span>(): <span class=\"built_in\">is_end_of_word</span>(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>bool isEndOfWord;</code>：这是一个布尔型成员变量，用于标记当前节点是否代表一个单词的结束。如果<code>isEndOfWord</code>为<code>true</code>，则表示从根节点到当前节点的路径构成一个完整的单词。</li>\n<li><code>unordered_map&lt;char, TrieNode*&gt; children;</code>：这是一个无序映射（<code>unordered_map</code>），用于存储当前节点的子节点。Trie树的一个关键特性是每个节点可以有多个子节点，每个子节点对应一个字符。这个<code>unordered_map</code>允许我们将字符映射到相应的子节点。</li>\n<li><code>TrieNode() : isEndOfWord(false) &#123;&#125;</code>：这是<code>TrieNode</code>类的构造函数。构造函数用于初始化新创建的<code>TrieNode</code>对象。在这里，构造函数将<code>isEndOfWord</code>初始化为<code>false</code>，表示节点默认不是单词的结束。</li>\n</ol>\n<p>现在让我们通过一个示例来解释如何使用这个<code>TrieNode</code>类来构建Trie树：</p>\n<p>假设我们要在Trie树中插入单词”CAT”，首先我们创建一个根节点。然后，我们从根节点开始，在每个字符位置上创建一个新的<code>TrieNode</code>对象，将<code>isEndOfWord</code>设置为<code>false</code>。在这个过程中，我们将字符映射到相应的子节点，如下所示：</p>\n<ol>\n<li>创建根节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在根节点下创建字符’C’对应的子节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在字符’C’对应的子节点下创建字符’A’对应的子节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在字符’A’对应的子节点下创建字符’T’对应的子节点，<code>isEndOfWord</code>为<code>true</code>，因为”CAT”的最后一个字符表示单词的结束。</li>\n</ol>\n<p>这就是如何使用<code>TrieNode</code>类来构建Trie树的一部分。这个类的设计允许我们轻松地在每个节点上附加字符和标记单词的结束。随着插入更多的单词，Trie树的结构会不断扩展。</p>\n<p><strong>完整代码</strong></p>\n<p>这段代码实现了一个称为“Trie”（也被称为前缀树或字典树）的数据结构:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie_node</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> is_end_of_word;</span><br><span class=\"line\">        std::unordered_map&lt;<span class=\"type\">char</span> , trie_node*&gt; children;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">trie_node</span>(): <span class=\"built_in\">is_end_of_word</span>(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        trie_node* root;</span><br><span class=\"line\">        <span class=\"comment\">//Recursively cleans up memory</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear_memory</span><span class=\"params\">(trie_node* node)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> pair : node-&gt;children)</span><br><span class=\"line\">                <span class=\"built_in\">clear_memory</span>(pair.second);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">trie</span>()&#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> trie_node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(std::string word)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : word)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                    current-&gt;children[ch] = <span class=\"keyword\">new</span> trie_node;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                current = current-&gt;children[ch];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current-&gt;is_end_of_word = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//search whether word is in trie tree or not</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(std::string word)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : word)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                current = current-&gt;children[ch]; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> current != <span class=\"literal\">nullptr</span> &amp;&amp; current-&gt;is_end_of_word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//search whether prefix is the prefix of the word in trie tree or not</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">start_with</span><span class=\"params\">(std::string prefix)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : prefix)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                current = current-&gt;children[ch];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ~<span class=\"built_in\">trie</span>()&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear_memory</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    trie trie_tree;</span><br><span class=\"line\">    trie_tree.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;nudt&quot;</span>);</span><br><span class=\"line\">    trie_tree.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;hust&quot;</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; trie_tree.<span class=\"built_in\">search</span>(<span class=\"string\">&quot;hust&quot;</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; trie_tree.<span class=\"built_in\">start_with</span>(<span class=\"string\">&quot;nud&quot;</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-Python调用shell命令\"><a href=\"#c-Python调用shell命令\" class=\"headerlink\" title=\"c++&#x2F;Python调用shell命令\"></a>c++&#x2F;Python调用shell命令</h3><p><a href=\"https://mp.weixin.qq.com/s/ahXrzTlIJcQGW_ONPvRgJQ\">参考链接</a><br><code>C++</code>调用<code>shell</code>命令:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* command = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>)*<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(command , <span class=\"number\">100</span> , <span class=\"string\">&quot;sed -i &#x27;13c `define M_c %d&#x27; ../sim/testbench/mau_sau_tb_fp64.sv&quot;</span> , max_row);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(command);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(command);</span><br></pre></td></tr></table></figure>\n\n<p><code>python</code>调用<code>shell</code>命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.system(<span class=\"string\">&quot;echo &#x27;hello world&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历数组的背后\"><a href=\"#遍历数组的背后\" class=\"headerlink\" title=\"遍历数组的背后\"></a>遍历数组的背后</h3><p><a href=\"https://mp.weixin.qq.com/s/36ouxHNRoX4ZZJ4dxmkjeg\">数组有序与否对遍历的影响</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Mm8PqPM1vULK9Yr8tOnOgg\">数组按行与按列遍历的差距</a> </p>\n<p>上面这篇文章写得很详细了，以下是总结与代码实现。</p>\n<ul>\n<li>数组有序与否影响的是CPU的动态预测，有序的数组动态预测准确度很高。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SIZE 1e8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;<span class=\"type\">int</span>&gt; &amp;q)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span> , b = <span class=\"number\">0</span> , len = q.<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; <span class=\"number\">500</span>)  a++ ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> b++ ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   std::vector&lt;<span class=\"type\">int</span>&gt; q ;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        q.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">rand</span>() % <span class=\"number\">1000</span>) ; <span class=\"comment\">//无序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// q.push_back(i) ; //有序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(q) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> end = <span class=\"built_in\">clock</span>() ;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> cost = (<span class=\"type\">double</span>) (end - start) / CLOCKS_PER_SEC ;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time cost : %.3fs\\n&quot;</span> , cost) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//After sort</span></span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q.<span class=\"built_in\">begin</span>() , q.<span class=\"built_in\">end</span>() ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start1 = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(q) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> end1 = <span class=\"built_in\">clock</span>() ;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> cost1 = (<span class=\"type\">double</span>) (end1 - start1) / CLOCKS_PER_SEC ;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time cost after sort : %.3fs\\n&quot;</span> , cost1) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Time cost : 0.570s<br>Time cost after sort : 0.129s</p>\n</blockquote>\n<h3 id=\"传参尽量传引用\"><a href=\"#传参尽量传引用\" class=\"headerlink\" title=\"传参尽量传引用\"></a>传参尽量传引用</h3><p>传参用引用！</p>\n<ul>\n<li>如果我们用以下方式传参</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子函数中就会初始化一个变量<code>M</code>，并将形参<code>M</code>复制一份给新的<code>M</code> , 这样会损失性能。</p>\n<p><strong>传引用的本质就是传地址</strong> ， 这样可以避免复制</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果考虑到为防止在<code>func</code>中误操作修改了主函数的<code>M</code> ， 可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这样在<code>func</code>的作用域中，M便不可修改，不会影响主函数中的<code>M</code> .</p>\n<ul>\n<li>实例</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;<span class=\"type\">int</span>&gt; vi ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;<span class=\"type\">float</span>&gt; vf ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;vf&gt; matrix ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encode_CS45D</span><span class=\"params\">(<span class=\"type\">const</span> matrix &amp;M , vf &amp;val , vi &amp;nr , vi &amp;ptr , vi &amp;idx)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = M.<span class=\"built_in\">size</span>() , n = M[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\">    <span class=\"type\">int</span> NNZ = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span> = <span class=\"number\">-1</span> , t = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//NNZ : numble of zeros in each slash</span></span><br><span class=\"line\">    <span class=\"comment\">//nr_t : nr_temp</span></span><br><span class=\"line\">    <span class=\"comment\">//t indicate whenther there are all zeros in the slash</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> ; i &lt; m ; i++)&#123;</span><br><span class=\"line\">        t = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span>++ ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i , l = <span class=\"number\">0</span> ; (l &lt; n &amp;&amp; k &gt;= <span class=\"number\">0</span>) ; k-- , l++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[k][l] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                val.<span class=\"built_in\">push_back</span>(M[k][l]) ;</span><br><span class=\"line\">                idx.<span class=\"built_in\">push_back</span>(l) ;</span><br><span class=\"line\">                NNZ++ , t = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)   nr.<span class=\"built_in\">push_back</span>(<span class=\"type\">nr_t</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(NNZ != ptr.<span class=\"built_in\">back</span>())   ptr.<span class=\"built_in\">push_back</span>(NNZ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = m <span class=\"number\">-1</span> , j = <span class=\"number\">1</span> ; j &lt; n ; j++)&#123;</span><br><span class=\"line\">        t = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span>++ ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i , l = j ; l &lt; n ; l++ , k--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[k][l] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                val.<span class=\"built_in\">push_back</span>(M[k][l]) ;</span><br><span class=\"line\">                idx.<span class=\"built_in\">push_back</span>(l) ;</span><br><span class=\"line\">                NNZ++ , t = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)   nr.<span class=\"built_in\">push_back</span>(<span class=\"type\">nr_t</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(NNZ != ptr.<span class=\"built_in\">back</span>())   ptr.<span class=\"built_in\">push_back</span>(NNZ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在传参中，M的传参方式是<code>matrix M</code> , 在<code>Gdb</code>调试中，无法<code>step</code>进<code>encode_CS45D</code>这个函数，而是会进入<code>M</code>的<strong>拷贝子程序</strong>中(未知，较为底层)<br>#cpp </p>\n","site":{"data":{}},"length":9039,"excerpt":"<p>……</p>","more":"<h3 id=\"C-矩阵运算-运算符重载\"><a href=\"#C-矩阵运算-运算符重载\" class=\"headerlink\" title=\"C++矩阵运算(运算符重载)\"></a>C++矩阵运算(运算符重载)</h3><p><a href=\"https://mp.weixin.qq.com/s/C1c5XChVyVT4OSeNvpmaqQ\">Link</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Matrix</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> rows , cols ;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Matrix</span>(<span class=\"type\">int</span> rows, <span class=\"type\">int</span> cols , std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data): <span class=\"built_in\">rows</span>(rows), <span class=\"built_in\">cols</span>(cols) , <span class=\"built_in\">data</span>(data)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_elem</span><span class=\"params\">(<span class=\"type\">int</span> row , <span class=\"type\">int</span> col)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> data[row][col];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d  &quot;</span> , data[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , cols , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result.data[i][j] += A.data[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , cols , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; cols ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    result.data[i][j] -= A.data[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        Matrix <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> Matrix&amp; A) <span class=\"type\">const</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cols != A.rows)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                std::cout &lt;&lt; <span class=\"string\">&quot;Invalid matrix dimensions&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">result</span><span class=\"params\">(rows , A.cols , std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; (rows , std::vector&lt;<span class=\"type\">int</span>&gt;(A.cols,<span class=\"number\">0</span>)))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; rows ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; A.cols ; j++)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span> ; k &lt; cols ; k++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        result.data[i][j] += data[i][k] * A.data[k][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Matrix <span class=\"title\">transpose</span><span class=\"params\">()</span><span class=\"type\">const</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">Matrix <span class=\"title\">res</span><span class=\"params\">(cols , rows , data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; cols ; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; rows ; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    res.data[i][j] = data[j][i];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data1 = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125; , &#123;<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; data2 = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125; , &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">A</span><span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">4</span>,data2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">B</span><span class=\"params\">(<span class=\"number\">4</span>,<span class=\"number\">3</span>,data1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">C</span><span class=\"params\">(<span class=\"number\">3</span>,<span class=\"number\">3</span>,data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// C = A + B;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    C = A * B;</span><br><span class=\"line\"></span><br><span class=\"line\">    A.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    B.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    C.<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    C.<span class=\"built_in\">transpose</span>().<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"C-11-tuple\"><a href=\"#C-11-tuple\" class=\"headerlink\" title=\"C++11 tuple\"></a>C++11 tuple</h3><p><a href=\"https://mp.weixin.qq.com/s/oPOqr5J0ES0NGO-L3eKvzA\">Link</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> age = <span class=\"number\">21</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> grade = <span class=\"number\">100.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> student_tuple = std::<span class=\"built_in\">make_tuple</span>(name , age , grade);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string name_from_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(student_tuple);</span><br><span class=\"line\">    <span class=\"type\">int</span> age_of_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(student_tuple);</span><br><span class=\"line\">    <span class=\"type\">double</span> grade_of_student = std::<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(student_tuple);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;name : &quot;</span> &lt;&lt; name_from_student &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;age  : &quot;</span> &lt;&lt; age_of_student    &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;grade: &quot;</span> &lt;&lt; grade_of_student  &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动补全背后的算法-字典树\"><a href=\"#自动补全背后的算法-字典树\" class=\"headerlink\" title=\"自动补全背后的算法(字典树)\"></a>自动补全背后的算法(字典树)</h3><p><a href=\"https://mp.weixin.qq.com/s/L42BCgw-WczbWsiY9C0MeA\">Link</a></p>\n<p>Trie树（又称前缀树或字典树）是一种用于快速检索字符串数据集中的键的树形数据结构。这种结构非常适合处理字符串集合，特别是实现自动补全或拼写检查等功能。下面，我将通过一个具体的例子来解释Trie树的结构和工作原理。</p>\n<p>假设我们有一个Trie树，我们要在其中存储单词“CAT”，“CAN”，和“BAT”。Trie树的结构将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      Root</span><br><span class=\"line\">     /    \\</span><br><span class=\"line\">    B      C</span><br><span class=\"line\">    |      |</span><br><span class=\"line\">    A      A</span><br><span class=\"line\">   / \\    / \\</span><br><span class=\"line\">  T   *  T   N</span><br><span class=\"line\"> /         /</span><br><span class=\"line\">*         *  </span><br></pre></td></tr></table></figure>\n\n<p>在这个图形化表示中：</p>\n<ul>\n<li>每个节点代表一个字符。</li>\n<li>根节点（Root）不包含字符，它是所有单词的起始点。</li>\n<li>每条从根节点到某个标记为“<em>”的节点的路径代表一个单词。例如，从根节点到第一个“</em>”的路径是“BAT”。</li>\n<li>分支表示单词的不同字符。例如，“BAT”和“CAT”共享第一个字符，但第二个字符不同，因此在第二层分开。</li>\n</ul>\n<p>现在，如果我们要添加另一个单词比如“CAR”，Trie树将会更新为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      Root</span><br><span class=\"line\">     /    \\</span><br><span class=\"line\">    B      C</span><br><span class=\"line\">    |      |</span><br><span class=\"line\">    A      A</span><br><span class=\"line\">   / \\    / \\</span><br><span class=\"line\">  T   *  T   R</span><br><span class=\"line\"> /       /   |</span><br><span class=\"line\">*       *    *</span><br><span class=\"line\">             |</span><br><span class=\"line\">             *  </span><br></pre></td></tr></table></figure>\n\n<p>在这个新的结构中，“CAT”和“CAR”共享前两个字符“CA”，但第三个字符不同，在“CAR”中为“R”，因此在第三层分叉。</p>\n<p><strong>操作说明</strong></p>\n<ol>\n<li><strong>插入</strong>：当插入一个新单词时，从根节点开始，为单词的每个字符创建一个新的子节点（除非该字符已经存在）。到达单词的最后一个字符时，标记这个节点表示一个单词的结束。</li>\n<li><strong>搜索</strong>：为了查找一个单词，从根节点开始，沿着单词的字符移动。如果能够在每一步都找到相应的字符，并且最后一个字符被标记为一个单词的结尾，那么该单词存在于Trie树中。</li>\n<li><strong>前缀搜索</strong>：前缀搜索与全词搜索类似，但不需要最后一个字符被标记为单词的结尾。如果能够顺着前缀的字符在树中移动到最后一个字符，那么这个前缀存在于树中。</li>\n</ol>\n<p>Trie树在处理大量字符串，尤其是进行快速前缀查找和词汇自动补全时非常有效。由于它基于共享前缀来存储单词，因此相比于其他数据结构，它在空间效率上通常更优。</p>\n<p><strong>TrieNode 设计</strong></p>\n<p><code>TrieNode</code> 用于表示Trie树中的每个节点。接下来详细解释这个代码片段，包括<code>TrieNode</code>的设计以及每个成员的作用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie_node</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> is_end_of_word;</span><br><span class=\"line\">        std::unordered_map&lt;<span class=\"type\">char</span> , trie_node*&gt; children;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">trie_node</span>(): <span class=\"built_in\">is_end_of_word</span>(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>bool isEndOfWord;</code>：这是一个布尔型成员变量，用于标记当前节点是否代表一个单词的结束。如果<code>isEndOfWord</code>为<code>true</code>，则表示从根节点到当前节点的路径构成一个完整的单词。</li>\n<li><code>unordered_map&lt;char, TrieNode*&gt; children;</code>：这是一个无序映射（<code>unordered_map</code>），用于存储当前节点的子节点。Trie树的一个关键特性是每个节点可以有多个子节点，每个子节点对应一个字符。这个<code>unordered_map</code>允许我们将字符映射到相应的子节点。</li>\n<li><code>TrieNode() : isEndOfWord(false) &#123;&#125;</code>：这是<code>TrieNode</code>类的构造函数。构造函数用于初始化新创建的<code>TrieNode</code>对象。在这里，构造函数将<code>isEndOfWord</code>初始化为<code>false</code>，表示节点默认不是单词的结束。</li>\n</ol>\n<p>现在让我们通过一个示例来解释如何使用这个<code>TrieNode</code>类来构建Trie树：</p>\n<p>假设我们要在Trie树中插入单词”CAT”，首先我们创建一个根节点。然后，我们从根节点开始，在每个字符位置上创建一个新的<code>TrieNode</code>对象，将<code>isEndOfWord</code>设置为<code>false</code>。在这个过程中，我们将字符映射到相应的子节点，如下所示：</p>\n<ol>\n<li>创建根节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在根节点下创建字符’C’对应的子节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在字符’C’对应的子节点下创建字符’A’对应的子节点，<code>isEndOfWord</code>为<code>false</code>。</li>\n<li>在字符’A’对应的子节点下创建字符’T’对应的子节点，<code>isEndOfWord</code>为<code>true</code>，因为”CAT”的最后一个字符表示单词的结束。</li>\n</ol>\n<p>这就是如何使用<code>TrieNode</code>类来构建Trie树的一部分。这个类的设计允许我们轻松地在每个节点上附加字符和标记单词的结束。随着插入更多的单词，Trie树的结构会不断扩展。</p>\n<p><strong>完整代码</strong></p>\n<p>这段代码实现了一个称为“Trie”（也被称为前缀树或字典树）的数据结构:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie_node</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"type\">bool</span> is_end_of_word;</span><br><span class=\"line\">        std::unordered_map&lt;<span class=\"type\">char</span> , trie_node*&gt; children;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">trie_node</span>(): <span class=\"built_in\">is_end_of_word</span>(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">trie</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        trie_node* root;</span><br><span class=\"line\">        <span class=\"comment\">//Recursively cleans up memory</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear_memory</span><span class=\"params\">(trie_node* node)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> pair : node-&gt;children)</span><br><span class=\"line\">                <span class=\"built_in\">clear_memory</span>(pair.second);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">trie</span>()&#123;</span><br><span class=\"line\">            root = <span class=\"keyword\">new</span> trie_node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(std::string word)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : word)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                    current-&gt;children[ch] = <span class=\"keyword\">new</span> trie_node;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                current = current-&gt;children[ch];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current-&gt;is_end_of_word = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//search whether word is in trie tree or not</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">search</span><span class=\"params\">(std::string word)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : word)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                current = current-&gt;children[ch]; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> current != <span class=\"literal\">nullptr</span> &amp;&amp; current-&gt;is_end_of_word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//search whether prefix is the prefix of the word in trie tree or not</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">start_with</span><span class=\"params\">(std::string prefix)</span></span>&#123;</span><br><span class=\"line\">            trie_node* current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span> ch : prefix)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(current-&gt;children.<span class=\"built_in\">find</span>(ch) == current-&gt;children.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                current = current-&gt;children[ch];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ~<span class=\"built_in\">trie</span>()&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear_memory</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    trie trie_tree;</span><br><span class=\"line\">    trie_tree.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;nudt&quot;</span>);</span><br><span class=\"line\">    trie_tree.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;hust&quot;</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; trie_tree.<span class=\"built_in\">search</span>(<span class=\"string\">&quot;hust&quot;</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; trie_tree.<span class=\"built_in\">start_with</span>(<span class=\"string\">&quot;nud&quot;</span>) &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"c-Python调用shell命令\"><a href=\"#c-Python调用shell命令\" class=\"headerlink\" title=\"c++&#x2F;Python调用shell命令\"></a>c++&#x2F;Python调用shell命令</h3><p><a href=\"https://mp.weixin.qq.com/s/ahXrzTlIJcQGW_ONPvRgJQ\">参考链接</a><br><code>C++</code>调用<code>shell</code>命令:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* command = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>)*<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(command , <span class=\"number\">100</span> , <span class=\"string\">&quot;sed -i &#x27;13c `define M_c %d&#x27; ../sim/testbench/mau_sau_tb_fp64.sv&quot;</span> , max_row);</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(command);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(command);</span><br></pre></td></tr></table></figure>\n\n<p><code>python</code>调用<code>shell</code>命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.system(<span class=\"string\">&quot;echo &#x27;hello world&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历数组的背后\"><a href=\"#遍历数组的背后\" class=\"headerlink\" title=\"遍历数组的背后\"></a>遍历数组的背后</h3><p><a href=\"https://mp.weixin.qq.com/s/36ouxHNRoX4ZZJ4dxmkjeg\">数组有序与否对遍历的影响</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Mm8PqPM1vULK9Yr8tOnOgg\">数组按行与按列遍历的差距</a> </p>\n<p>上面这篇文章写得很详细了，以下是总结与代码实现。</p>\n<ul>\n<li>数组有序与否影响的是CPU的动态预测，有序的数组动态预测准确度很高。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SIZE 1e8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;<span class=\"type\">int</span>&gt; &amp;q)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span> , b = <span class=\"number\">0</span> , len = q.<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; len ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; <span class=\"number\">500</span>)  a++ ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> b++ ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   std::vector&lt;<span class=\"type\">int</span>&gt; q ;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; SIZE ; i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        q.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">rand</span>() % <span class=\"number\">1000</span>) ; <span class=\"comment\">//无序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// q.push_back(i) ; //有序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(q) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> end = <span class=\"built_in\">clock</span>() ;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> cost = (<span class=\"type\">double</span>) (end - start) / CLOCKS_PER_SEC ;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time cost : %.3fs\\n&quot;</span> , cost) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//After sort</span></span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(q.<span class=\"built_in\">begin</span>() , q.<span class=\"built_in\">end</span>() ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start1 = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(q) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">clock_t</span> end1 = <span class=\"built_in\">clock</span>() ;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> cost1 = (<span class=\"type\">double</span>) (end1 - start1) / CLOCKS_PER_SEC ;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time cost after sort : %.3fs\\n&quot;</span> , cost1) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Time cost : 0.570s<br>Time cost after sort : 0.129s</p>\n</blockquote>\n<h3 id=\"传参尽量传引用\"><a href=\"#传参尽量传引用\" class=\"headerlink\" title=\"传参尽量传引用\"></a>传参尽量传引用</h3><p>传参用引用！</p>\n<ul>\n<li>如果我们用以下方式传参</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>子函数中就会初始化一个变量<code>M</code>，并将形参<code>M</code>复制一份给新的<code>M</code> , 这样会损失性能。</p>\n<p><strong>传引用的本质就是传地址</strong> ， 这样可以避免复制</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果考虑到为防止在<code>func</code>中误操作修改了主函数的<code>M</code> ， 可以这样：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;M)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这样在<code>func</code>的作用域中，M便不可修改，不会影响主函数中的<code>M</code> .</p>\n<ul>\n<li>实例</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;<span class=\"type\">int</span>&gt; vi ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;<span class=\"type\">float</span>&gt; vf ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;vf&gt; matrix ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">encode_CS45D</span><span class=\"params\">(<span class=\"type\">const</span> matrix &amp;M , vf &amp;val , vi &amp;nr , vi &amp;ptr , vi &amp;idx)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = M.<span class=\"built_in\">size</span>() , n = M[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\">    <span class=\"type\">int</span> NNZ = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span> = <span class=\"number\">-1</span> , t = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"comment\">//NNZ : numble of zeros in each slash</span></span><br><span class=\"line\">    <span class=\"comment\">//nr_t : nr_temp</span></span><br><span class=\"line\">    <span class=\"comment\">//t indicate whenther there are all zeros in the slash</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> ; i &lt; m ; i++)&#123;</span><br><span class=\"line\">        t = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span>++ ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i , l = <span class=\"number\">0</span> ; (l &lt; n &amp;&amp; k &gt;= <span class=\"number\">0</span>) ; k-- , l++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[k][l] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                val.<span class=\"built_in\">push_back</span>(M[k][l]) ;</span><br><span class=\"line\">                idx.<span class=\"built_in\">push_back</span>(l) ;</span><br><span class=\"line\">                NNZ++ , t = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)   nr.<span class=\"built_in\">push_back</span>(<span class=\"type\">nr_t</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(NNZ != ptr.<span class=\"built_in\">back</span>())   ptr.<span class=\"built_in\">push_back</span>(NNZ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = m <span class=\"number\">-1</span> , j = <span class=\"number\">1</span> ; j &lt; n ; j++)&#123;</span><br><span class=\"line\">        t = <span class=\"number\">0</span> , <span class=\"type\">nr_t</span>++ ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = i , l = j ; l &lt; n ; l++ , k--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[k][l] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                val.<span class=\"built_in\">push_back</span>(M[k][l]) ;</span><br><span class=\"line\">                idx.<span class=\"built_in\">push_back</span>(l) ;</span><br><span class=\"line\">                NNZ++ , t = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)   nr.<span class=\"built_in\">push_back</span>(<span class=\"type\">nr_t</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(NNZ != ptr.<span class=\"built_in\">back</span>())   ptr.<span class=\"built_in\">push_back</span>(NNZ) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在传参中，M的传参方式是<code>matrix M</code> , 在<code>Gdb</code>调试中，无法<code>step</code>进<code>encode_CS45D</code>这个函数，而是会进入<code>M</code>的<strong>拷贝子程序</strong>中(未知，较为底层)<br>#cpp </p>"},{"title":"DataStructure","abbrlink":"ba907200","date":"2021-10-20T16:09:08.000Z","_content":"\n<p style = \"color : #f03752 ; font-size : 24px\">It's the note I made when learned data structure . </p>\n\nRef : [数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1nJ411V7bd/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)\n\n<!-- more -->\n\n# Representation and Implementation of ADT\n\n**EX :  Arithmetic Operations on Complex Numbers**\n\n```cpp\n#include <iostream>\nusing namespace std ;\ntypedef struct \n{\n    float real;\n    float imag;\n} Complex;\nvoid assign(Complex &A, float real, float imag) {\n    A.real = real;\n    A.imag = imag;\n}\nvoid print(Complex A){\n    cout << A.real << '+' << A.imag << 'i' << endl ;\n}\nvoid add(Complex &A , Complex B , Complex C){\n    A.real = B.real + C.real ;\n    A.imag = B.imag + C.imag ;\n}\nvoid minus(Complex &A , Complex B , Complex C){\n    A.real = B.real - C.real ;\n    A.imag = B.imag - C.imag ;\n}\nvoid multiply(Complex &A , Complex B , Complex C){\n    A.real = B.real * C.real - B.imag * C.imag ;\n    A.imag = B.real * C.imag + B.imag * C.real ;\n}\nvoid divide(Complex &A , Complex B , Complex C){\n    A.real = (B.real * C.real + B.imag * C.imag) / (C.real * C.real + C.imag * C.imag) ;\n    A.imag = ( - B.real * C.imag + B.imag * C.real ) / (C.real * C.real + C.imag * C.imag) ;\n}\nint main() {\n    Complex A , B , C ;\n    assign(A , 1 , 2);\n    assign(B , 3 , 4) ;\n    assign(C , 5 , 6) ;\n    divide(A , B , C) ;\n    print(A) ;\n    return 0;\n}\n\n```\n\n# Linear List\n\n## Squence Linear List\n\n### **EX1. Horner's rules or Qin Jiushao(秦九韶)'s algorithm**\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<ctime>\n#define N 9 \n#define K 1e7 // numbers of loop\ndouble a[10] = { 2.1 , 3.4 , 2 , 1.3 , 3 , 8.8 , 4.3 , 5.3 , 5.3 , 4.3} ;\ndouble func1(double x , double *a ){\n    double res = a[0] ;\n    for(int i = 1 ; i <= N ; i++){\n        res += a[i] * pow(x , i) ;\n    }\n    return res ;\n    //std:: cout << \"the result of polynominal by func1 is \" << res << std::endl ; \n}\ndouble func2(double x , double *a){\n    // Qin Jiushao's algorithm\n    double res = a[9] ;\n    for(int i = N ; i > 0 ; i--){\n        res = a[i - 1] + res * x ;\n    }\n    return res ;\n    //std::cout << \"the resulr of polynominal by func2 is \" << res << std::endl ;\n}\nvoid time_func1(){\n    clock_t start , stop ;\n    start = clock() ;\n    for(int i = 0 ; i < K ; i++){\n        func1( 2.4 , a ) ;   \n    }\n    stop = clock() ;\n    std::cout << \"func1 cost \" << (double(stop - start)) / CLK_TCK / K << \" s per time\" << std::endl ;\n}\nvoid time_func2(){\n    clock_t start , stop ;\n    start = clock() ;\n    for(int i = 0 ; i < K ; i++){\n        func2( 2.4 , a ) ;   \n    }\n    stop = clock() ;\n    std::cout << \"func2 cost \" << (double(stop - start)) / CLK_TCK / K  << \" s per time\" << std::endl ;\n}\nint main(){\n    double x ; \n    std::cin >> x ; \n    std::cout << \"the result of func1 is \" << func1(x , a) << std::endl ;    \n    std::cout << \"the result of func2 is \" << func2(x , a) << std::endl ;    \n    func2(x , a) ;\n    time_func1() ;\n    time_func2() ;\n}\n```\n\n\n\n### C++ dynamic memory allocation\n\n```cpp\nint* p = new int ;\nint* p2 = new int[10] ; //allocate 10 int memory to p2\ndelete p , p2;\n```\n\n### Convenient way of passing values in C++ \n\n```cpp\nvoid swap_1(int& a , int& b){\n    int temp = a ;\n    a = b ;\n    b = temp ;\n}\nint main(){\n    int a = 2 , b = 9 ;\n    swap_1(a , b) ;\n    cout << \"a = \" << a << \" b = \" << b << endl ;\n    return 0 ;\n}\n```\n\n### Representation of LinearList\n\n```cpp\n#include<iostream>\n#define ElementType int \n#define MaxSize 20 \nusing namespace std ;\ntypedef struct SqList{\n    ElementType  *element ;\n    int length ;\n}SqList ;\n\n\nvoid InitList_Sq(SqList &L){\n    //Initial the Squence Linear List\n    L.element = new ElementType[MaxSize] ;\n    if(!L.element)  {\n        exit(0);\n        L.length = 0 ;\n    }\n}\nvoid DestroyList(SqList &L){\n    if(L.element)   delete L.element ;\n}\nvoid ClearList(SqList &L){\n    L.length = 0 ;\n}\nint GetLength(SqList &L){\n    return  L.length ;\n}\nint IsEmpty(SqList &L){\n    if(L.length)    return 0 ;\n    else    return 1 ;\n}\nint GetEle(SqList &L , int i , ElementType &e){\n    if(i < 1 || i > L.length)   return 0 ;\n    else e = L.element[i] ;\n    return 1 ;\n}\nint LocateEle (SqList &L , ElementType e){\n    for(int i = 0 ; i < L.length ; i++){\n        if(L.element[i] == e)   return i ;\n    }\n    return 0 ;\n}\nint ListInsert_Sq(SqList &L , ElementType e , int i ){\n    if(i < 0 || i > L.length || (L.length + 1) > MaxSize)   return 0 ;\n    for(int j = L.element[L.length - 1] ; j >= i ; j--){\n        L.element[j + 1] = L.element[j] ;\n    }\n    L.element[i] = e ;\n    L.length++ ;\n    return 1 ;\n}\nvoid PrintList_Sq(SqList &L){\n    for(int i = 0 ; i < L.length ; i++){\n        cout << L.element[i] << \" \" ;\n    }\n    cout << endl ;\n}\nint ListDelete_Sq(SqList &L , int i ){\n    if(i < 0 || i > L.length - 1) return 0 ;\n    for(int j = i + 1 ; j < L.length ; j++){\n        L.element[j - 1] = L.element[j] ; \n    }\n    L.length-- ;\n    return 1 ;\n}\nvoid union_list(SqList &La , SqList Lb){\n    int length = GetLength(Lb) ;\n    for(int i = 0 ; i < GetLength(Lb) ; i++){\n        if(LocateEle(La , Lb.element[i]) == -1) {\n            ListInsert_Sq(La , Lb.element[i] , GetLength(La)) ;\n        }\n    }\n}\nvoid merge_list_Sq(SqList &Lc , SqList La , SqList Lb ){\n    int length_a = GetLength(La) , length_b = GetLength(Lb) ;\n    Lc.length = length_a + length_b ;\n    Lc.element = new ElementType[Lc.length] ;\n    int i = 0 , j = 0 , k = 0 ;\n    while(i < length_a && j < length_b){\n        if(La.element[i] < Lb.element[j]){\n            Lc.element[k++] = La.element[i++] ;\n        }\n        else Lc.element[k++] = Lb.element[j++] ;\n    }\n    pc->next = pa ? pa : pb ;\n}\nint main(){\n    SqList L ;\n    InitList_Sq(L) ; \n    int a[5] = {1 , 3 , 5 , 7 , 9} ;\n    for(int i = 0 ; i < 5 ; i++){\n        L.element[i] = a[i] ;\n    }\n    L.length = 5 ;\n    ListDelete_Sq(L , 4) ;\n    PrintList_Sq(L) ;\n}\n```\n\n**Advantages and Disadvantages of Squence Linear List :**\n\n**Advantages :**\n\n- **Storing physical location relationships represents logical relationships .**\n- **Can get any elements quickly .**\n\n**Disadvantage:**\n\n- **Too many steps to move elements  in the option of Insert and Delete elements .**\n\n## Linked Linear List\n\nI write a new article about linked linear list [HERE]()\n\n","source":"_posts/DataStructure.md","raw":"---\ntitle: DataStructure\nabbrlink: ba907200\ndate: 2021-10-21 00:09:08\ntags:\n---\n\n<p style = \"color : #f03752 ; font-size : 24px\">It's the note I made when learned data structure . </p>\n\nRef : [数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1nJ411V7bd/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)\n\n<!-- more -->\n\n# Representation and Implementation of ADT\n\n**EX :  Arithmetic Operations on Complex Numbers**\n\n```cpp\n#include <iostream>\nusing namespace std ;\ntypedef struct \n{\n    float real;\n    float imag;\n} Complex;\nvoid assign(Complex &A, float real, float imag) {\n    A.real = real;\n    A.imag = imag;\n}\nvoid print(Complex A){\n    cout << A.real << '+' << A.imag << 'i' << endl ;\n}\nvoid add(Complex &A , Complex B , Complex C){\n    A.real = B.real + C.real ;\n    A.imag = B.imag + C.imag ;\n}\nvoid minus(Complex &A , Complex B , Complex C){\n    A.real = B.real - C.real ;\n    A.imag = B.imag - C.imag ;\n}\nvoid multiply(Complex &A , Complex B , Complex C){\n    A.real = B.real * C.real - B.imag * C.imag ;\n    A.imag = B.real * C.imag + B.imag * C.real ;\n}\nvoid divide(Complex &A , Complex B , Complex C){\n    A.real = (B.real * C.real + B.imag * C.imag) / (C.real * C.real + C.imag * C.imag) ;\n    A.imag = ( - B.real * C.imag + B.imag * C.real ) / (C.real * C.real + C.imag * C.imag) ;\n}\nint main() {\n    Complex A , B , C ;\n    assign(A , 1 , 2);\n    assign(B , 3 , 4) ;\n    assign(C , 5 , 6) ;\n    divide(A , B , C) ;\n    print(A) ;\n    return 0;\n}\n\n```\n\n# Linear List\n\n## Squence Linear List\n\n### **EX1. Horner's rules or Qin Jiushao(秦九韶)'s algorithm**\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<ctime>\n#define N 9 \n#define K 1e7 // numbers of loop\ndouble a[10] = { 2.1 , 3.4 , 2 , 1.3 , 3 , 8.8 , 4.3 , 5.3 , 5.3 , 4.3} ;\ndouble func1(double x , double *a ){\n    double res = a[0] ;\n    for(int i = 1 ; i <= N ; i++){\n        res += a[i] * pow(x , i) ;\n    }\n    return res ;\n    //std:: cout << \"the result of polynominal by func1 is \" << res << std::endl ; \n}\ndouble func2(double x , double *a){\n    // Qin Jiushao's algorithm\n    double res = a[9] ;\n    for(int i = N ; i > 0 ; i--){\n        res = a[i - 1] + res * x ;\n    }\n    return res ;\n    //std::cout << \"the resulr of polynominal by func2 is \" << res << std::endl ;\n}\nvoid time_func1(){\n    clock_t start , stop ;\n    start = clock() ;\n    for(int i = 0 ; i < K ; i++){\n        func1( 2.4 , a ) ;   \n    }\n    stop = clock() ;\n    std::cout << \"func1 cost \" << (double(stop - start)) / CLK_TCK / K << \" s per time\" << std::endl ;\n}\nvoid time_func2(){\n    clock_t start , stop ;\n    start = clock() ;\n    for(int i = 0 ; i < K ; i++){\n        func2( 2.4 , a ) ;   \n    }\n    stop = clock() ;\n    std::cout << \"func2 cost \" << (double(stop - start)) / CLK_TCK / K  << \" s per time\" << std::endl ;\n}\nint main(){\n    double x ; \n    std::cin >> x ; \n    std::cout << \"the result of func1 is \" << func1(x , a) << std::endl ;    \n    std::cout << \"the result of func2 is \" << func2(x , a) << std::endl ;    \n    func2(x , a) ;\n    time_func1() ;\n    time_func2() ;\n}\n```\n\n\n\n### C++ dynamic memory allocation\n\n```cpp\nint* p = new int ;\nint* p2 = new int[10] ; //allocate 10 int memory to p2\ndelete p , p2;\n```\n\n### Convenient way of passing values in C++ \n\n```cpp\nvoid swap_1(int& a , int& b){\n    int temp = a ;\n    a = b ;\n    b = temp ;\n}\nint main(){\n    int a = 2 , b = 9 ;\n    swap_1(a , b) ;\n    cout << \"a = \" << a << \" b = \" << b << endl ;\n    return 0 ;\n}\n```\n\n### Representation of LinearList\n\n```cpp\n#include<iostream>\n#define ElementType int \n#define MaxSize 20 \nusing namespace std ;\ntypedef struct SqList{\n    ElementType  *element ;\n    int length ;\n}SqList ;\n\n\nvoid InitList_Sq(SqList &L){\n    //Initial the Squence Linear List\n    L.element = new ElementType[MaxSize] ;\n    if(!L.element)  {\n        exit(0);\n        L.length = 0 ;\n    }\n}\nvoid DestroyList(SqList &L){\n    if(L.element)   delete L.element ;\n}\nvoid ClearList(SqList &L){\n    L.length = 0 ;\n}\nint GetLength(SqList &L){\n    return  L.length ;\n}\nint IsEmpty(SqList &L){\n    if(L.length)    return 0 ;\n    else    return 1 ;\n}\nint GetEle(SqList &L , int i , ElementType &e){\n    if(i < 1 || i > L.length)   return 0 ;\n    else e = L.element[i] ;\n    return 1 ;\n}\nint LocateEle (SqList &L , ElementType e){\n    for(int i = 0 ; i < L.length ; i++){\n        if(L.element[i] == e)   return i ;\n    }\n    return 0 ;\n}\nint ListInsert_Sq(SqList &L , ElementType e , int i ){\n    if(i < 0 || i > L.length || (L.length + 1) > MaxSize)   return 0 ;\n    for(int j = L.element[L.length - 1] ; j >= i ; j--){\n        L.element[j + 1] = L.element[j] ;\n    }\n    L.element[i] = e ;\n    L.length++ ;\n    return 1 ;\n}\nvoid PrintList_Sq(SqList &L){\n    for(int i = 0 ; i < L.length ; i++){\n        cout << L.element[i] << \" \" ;\n    }\n    cout << endl ;\n}\nint ListDelete_Sq(SqList &L , int i ){\n    if(i < 0 || i > L.length - 1) return 0 ;\n    for(int j = i + 1 ; j < L.length ; j++){\n        L.element[j - 1] = L.element[j] ; \n    }\n    L.length-- ;\n    return 1 ;\n}\nvoid union_list(SqList &La , SqList Lb){\n    int length = GetLength(Lb) ;\n    for(int i = 0 ; i < GetLength(Lb) ; i++){\n        if(LocateEle(La , Lb.element[i]) == -1) {\n            ListInsert_Sq(La , Lb.element[i] , GetLength(La)) ;\n        }\n    }\n}\nvoid merge_list_Sq(SqList &Lc , SqList La , SqList Lb ){\n    int length_a = GetLength(La) , length_b = GetLength(Lb) ;\n    Lc.length = length_a + length_b ;\n    Lc.element = new ElementType[Lc.length] ;\n    int i = 0 , j = 0 , k = 0 ;\n    while(i < length_a && j < length_b){\n        if(La.element[i] < Lb.element[j]){\n            Lc.element[k++] = La.element[i++] ;\n        }\n        else Lc.element[k++] = Lb.element[j++] ;\n    }\n    pc->next = pa ? pa : pb ;\n}\nint main(){\n    SqList L ;\n    InitList_Sq(L) ; \n    int a[5] = {1 , 3 , 5 , 7 , 9} ;\n    for(int i = 0 ; i < 5 ; i++){\n        L.element[i] = a[i] ;\n    }\n    L.length = 5 ;\n    ListDelete_Sq(L , 4) ;\n    PrintList_Sq(L) ;\n}\n```\n\n**Advantages and Disadvantages of Squence Linear List :**\n\n**Advantages :**\n\n- **Storing physical location relationships represents logical relationships .**\n- **Can get any elements quickly .**\n\n**Disadvantage:**\n\n- **Too many steps to move elements  in the option of Insert and Delete elements .**\n\n## Linked Linear List\n\nI write a new article about linked linear list [HERE]()\n\n","slug":"DataStructure","published":1,"updated":"2024-03-15T12:38:43.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4d9000658tegh5xa8dh","content":"<p style = \"color : #f03752 ; font-size : 24px\">It's the note I made when learned data structure . </p>\n\n<p>Ref : <a href=\"https://www.bilibili.com/video/BV1nJ411V7bd/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibili</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Representation-and-Implementation-of-ADT\"><a href=\"#Representation-and-Implementation-of-ADT\" class=\"headerlink\" title=\"Representation and Implementation of ADT\"></a>Representation and Implementation of ADT</h1><p><strong>EX :  Arithmetic Operations on Complex Numbers</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> real;</span><br><span class=\"line\">    <span class=\"type\">float</span> imag;</span><br><span class=\"line\">&#125; Complex;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assign</span><span class=\"params\">(Complex &amp;A, <span class=\"type\">float</span> real, <span class=\"type\">float</span> imag)</span> </span>&#123;</span><br><span class=\"line\">    A.real = real;</span><br><span class=\"line\">    A.imag = imag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Complex A)</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; A.real &lt;&lt; <span class=\"string\">&#x27;+&#x27;</span> &lt;&lt; A.imag &lt;&lt; <span class=\"string\">&#x27;i&#x27;</span> &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real + C.real ;</span><br><span class=\"line\">    A.imag = B.imag + C.imag ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">minus</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real - C.real ;</span><br><span class=\"line\">    A.imag = B.imag - C.imag ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multiply</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real * C.real - B.imag * C.imag ;</span><br><span class=\"line\">    A.imag = B.real * C.imag + B.imag * C.real ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">divide</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = (B.real * C.real + B.imag * C.imag) / (C.real * C.real + C.imag * C.imag) ;</span><br><span class=\"line\">    A.imag = ( - B.real * C.imag + B.imag * C.real ) / (C.real * C.real + C.imag * C.imag) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Complex A , B , C ;</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(A , <span class=\"number\">1</span> , <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(B , <span class=\"number\">3</span> , <span class=\"number\">4</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(C , <span class=\"number\">5</span> , <span class=\"number\">6</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">divide</span>(A , B , C) ;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(A) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linear-List\"><a href=\"#Linear-List\" class=\"headerlink\" title=\"Linear List\"></a>Linear List</h1><h2 id=\"Squence-Linear-List\"><a href=\"#Squence-Linear-List\" class=\"headerlink\" title=\"Squence Linear List\"></a>Squence Linear List</h2><h3 id=\"EX1-Horner’s-rules-or-Qin-Jiushao-秦九韶-’s-algorithm\"><a href=\"#EX1-Horner’s-rules-or-Qin-Jiushao-秦九韶-’s-algorithm\" class=\"headerlink\" title=\"EX1. Horner’s rules or Qin Jiushao(秦九韶)’s algorithm\"></a><strong>EX1. Horner’s rules or Qin Jiushao(秦九韶)’s algorithm</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 9 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> K 1e7 <span class=\"comment\">// numbers of loop</span></span></span><br><span class=\"line\"><span class=\"type\">double</span> a[<span class=\"number\">10</span>] = &#123; <span class=\"number\">2.1</span> , <span class=\"number\">3.4</span> , <span class=\"number\">2</span> , <span class=\"number\">1.3</span> , <span class=\"number\">3</span> , <span class=\"number\">8.8</span> , <span class=\"number\">4.3</span> , <span class=\"number\">5.3</span> , <span class=\"number\">5.3</span> , <span class=\"number\">4.3</span>&#125; ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"type\">double</span> x , <span class=\"type\">double</span> *a )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = a[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= N ; i++)&#123;</span><br><span class=\"line\">        res += a[i] * <span class=\"built_in\">pow</span>(x , i) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    <span class=\"comment\">//std:: cout &lt;&lt; &quot;the result of polynominal by func1 is &quot; &lt;&lt; res &lt;&lt; std::endl ; </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">double</span> x , <span class=\"type\">double</span> *a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Qin Jiushao&#x27;s algorithm</span></span><br><span class=\"line\">    <span class=\"type\">double</span> res = a[<span class=\"number\">9</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = N ; i &gt; <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        res = a[i - <span class=\"number\">1</span>] + res * x ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; &quot;the resulr of polynominal by func2 is &quot; &lt;&lt; res &lt;&lt; std::endl ;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">time_func1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start , stop ;</span><br><span class=\"line\">    start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; K ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func1</span>( <span class=\"number\">2.4</span> , a ) ;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stop = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;func1 cost &quot;</span> &lt;&lt; (<span class=\"built_in\">double</span>(stop - start)) / CLK_TCK / K &lt;&lt; <span class=\"string\">&quot; s per time&quot;</span> &lt;&lt; std::endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">time_func2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start , stop ;</span><br><span class=\"line\">    start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; K ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func2</span>( <span class=\"number\">2.4</span> , a ) ;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stop = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;func2 cost &quot;</span> &lt;&lt; (<span class=\"built_in\">double</span>(stop - start)) / CLK_TCK / K  &lt;&lt; <span class=\"string\">&quot; s per time&quot;</span> &lt;&lt; std::endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x ; </span><br><span class=\"line\">    std::cin &gt;&gt; x ; </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;the result of func1 is &quot;</span> &lt;&lt; <span class=\"built_in\">func1</span>(x , a) &lt;&lt; std::endl ;    </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;the result of func2 is &quot;</span> &lt;&lt; <span class=\"built_in\">func2</span>(x , a) &lt;&lt; std::endl ;    </span><br><span class=\"line\">    <span class=\"built_in\">func2</span>(x , a) ;</span><br><span class=\"line\">    <span class=\"built_in\">time_func1</span>() ;</span><br><span class=\"line\">    <span class=\"built_in\">time_func2</span>() ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"C-dynamic-memory-allocation\"><a href=\"#C-dynamic-memory-allocation\" class=\"headerlink\" title=\"C++ dynamic memory allocation\"></a>C++ dynamic memory allocation</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* p = <span class=\"keyword\">new</span> <span class=\"type\">int</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span>* p2 = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>] ; <span class=\"comment\">//allocate 10 int memory to p2</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p , p2;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Convenient-way-of-passing-values-in-C\"><a href=\"#Convenient-way-of-passing-values-in-C\" class=\"headerlink\" title=\"Convenient way of passing values in C++\"></a>Convenient way of passing values in C++</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_1</span><span class=\"params\">(<span class=\"type\">int</span>&amp; a , <span class=\"type\">int</span>&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = a ;</span><br><span class=\"line\">    a = b ;</span><br><span class=\"line\">    b = temp ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">2</span> , b = <span class=\"number\">9</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">swap_1</span>(a , b) ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; endl ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Representation-of-LinearList\"><a href=\"#Representation-of-LinearList\" class=\"headerlink\" title=\"Representation of LinearList\"></a>Representation of LinearList</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElementType int </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 20 </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SqList</span>&#123;</span><br><span class=\"line\">    ElementType  *element ;</span><br><span class=\"line\">    <span class=\"type\">int</span> length ;</span><br><span class=\"line\">&#125;SqList ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList_Sq</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Initial the Squence Linear List</span></span><br><span class=\"line\">    L.element = <span class=\"keyword\">new</span> ElementType[MaxSize] ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!L.element)  &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        L.length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DestroyList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.element)   <span class=\"keyword\">delete</span> L.element ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClearList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  L.length ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">IsEmpty</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.length)    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetEle</span><span class=\"params\">(SqList &amp;L , <span class=\"type\">int</span> i , ElementType &amp;e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L.length)   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> e = L.element[i] ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateEle</span> <span class=\"params\">(SqList &amp;L , ElementType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; L.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.element[i] == e)   <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ListInsert_Sq</span><span class=\"params\">(SqList &amp;L , ElementType e , <span class=\"type\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L.length || (L.length + <span class=\"number\">1</span>) &gt; MaxSize)   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = L.element[L.length - <span class=\"number\">1</span>] ; j &gt;= i ; j--)&#123;</span><br><span class=\"line\">        L.element[j + <span class=\"number\">1</span>] = L.element[j] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.element[i] = e ;</span><br><span class=\"line\">    L.length++ ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList_Sq</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; L.length ; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; L.element[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ListDelete_Sq</span><span class=\"params\">(SqList &amp;L , <span class=\"type\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L.length - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span> ; j &lt; L.length ; j++)&#123;</span><br><span class=\"line\">        L.element[j - <span class=\"number\">1</span>] = L.element[j] ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length-- ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">union_list</span><span class=\"params\">(SqList &amp;La , SqList Lb)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"built_in\">GetLength</span>(Lb) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">GetLength</span>(Lb) ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">LocateEle</span>(La , Lb.element[i]) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ListInsert_Sq</span>(La , Lb.element[i] , <span class=\"built_in\">GetLength</span>(La)) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_list_Sq</span><span class=\"params\">(SqList &amp;Lc , SqList La , SqList Lb )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length_a = <span class=\"built_in\">GetLength</span>(La) , length_b = <span class=\"built_in\">GetLength</span>(Lb) ;</span><br><span class=\"line\">    Lc.length = length_a + length_b ;</span><br><span class=\"line\">    Lc.element = <span class=\"keyword\">new</span> ElementType[Lc.length] ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; length_a &amp;&amp; j &lt; length_b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(La.element[i] &lt; Lb.element[j])&#123;</span><br><span class=\"line\">            Lc.element[k++] = La.element[i++] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Lc.element[k++] = Lb.element[j++] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pc-&gt;next = pa ? pa : pb ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    SqList L ;</span><br><span class=\"line\">    <span class=\"built_in\">InitList_Sq</span>(L) ; </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span> , <span class=\"number\">3</span> , <span class=\"number\">5</span> , <span class=\"number\">7</span> , <span class=\"number\">9</span>&#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++)&#123;</span><br><span class=\"line\">        L.element[i] = a[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length = <span class=\"number\">5</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">ListDelete_Sq</span>(L , <span class=\"number\">4</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_Sq</span>(L) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Advantages and Disadvantages of Squence Linear List :</strong></p>\n<p><strong>Advantages :</strong></p>\n<ul>\n<li><strong>Storing physical location relationships represents logical relationships .</strong></li>\n<li><strong>Can get any elements quickly .</strong></li>\n</ul>\n<p><strong>Disadvantage:</strong></p>\n<ul>\n<li><strong>Too many steps to move elements  in the option of Insert and Delete elements .</strong></li>\n</ul>\n<h2 id=\"Linked-Linear-List\"><a href=\"#Linked-Linear-List\" class=\"headerlink\" title=\"Linked Linear List\"></a>Linked Linear List</h2><p>I write a new article about linked linear list <a href=\"\">HERE</a></p>\n","site":{"data":{}},"length":5567,"excerpt":"<p style = \"color : #f03752 ; font-size : 24px\">It's the note I made when learned data structure . </p>\n\n<p>Ref : <a href=\"https://www.bilibili.com/video/BV1nJ411V7bd/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibili</a></p>","more":"<h1 id=\"Representation-and-Implementation-of-ADT\"><a href=\"#Representation-and-Implementation-of-ADT\" class=\"headerlink\" title=\"Representation and Implementation of ADT\"></a>Representation and Implementation of ADT</h1><p><strong>EX :  Arithmetic Operations on Complex Numbers</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> real;</span><br><span class=\"line\">    <span class=\"type\">float</span> imag;</span><br><span class=\"line\">&#125; Complex;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assign</span><span class=\"params\">(Complex &amp;A, <span class=\"type\">float</span> real, <span class=\"type\">float</span> imag)</span> </span>&#123;</span><br><span class=\"line\">    A.real = real;</span><br><span class=\"line\">    A.imag = imag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Complex A)</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; A.real &lt;&lt; <span class=\"string\">&#x27;+&#x27;</span> &lt;&lt; A.imag &lt;&lt; <span class=\"string\">&#x27;i&#x27;</span> &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real + C.real ;</span><br><span class=\"line\">    A.imag = B.imag + C.imag ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">minus</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real - C.real ;</span><br><span class=\"line\">    A.imag = B.imag - C.imag ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">multiply</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = B.real * C.real - B.imag * C.imag ;</span><br><span class=\"line\">    A.imag = B.real * C.imag + B.imag * C.real ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">divide</span><span class=\"params\">(Complex &amp;A , Complex B , Complex C)</span></span>&#123;</span><br><span class=\"line\">    A.real = (B.real * C.real + B.imag * C.imag) / (C.real * C.real + C.imag * C.imag) ;</span><br><span class=\"line\">    A.imag = ( - B.real * C.imag + B.imag * C.real ) / (C.real * C.real + C.imag * C.imag) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Complex A , B , C ;</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(A , <span class=\"number\">1</span> , <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(B , <span class=\"number\">3</span> , <span class=\"number\">4</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">assign</span>(C , <span class=\"number\">5</span> , <span class=\"number\">6</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">divide</span>(A , B , C) ;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(A) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Linear-List\"><a href=\"#Linear-List\" class=\"headerlink\" title=\"Linear List\"></a>Linear List</h1><h2 id=\"Squence-Linear-List\"><a href=\"#Squence-Linear-List\" class=\"headerlink\" title=\"Squence Linear List\"></a>Squence Linear List</h2><h3 id=\"EX1-Horner’s-rules-or-Qin-Jiushao-秦九韶-’s-algorithm\"><a href=\"#EX1-Horner’s-rules-or-Qin-Jiushao-秦九韶-’s-algorithm\" class=\"headerlink\" title=\"EX1. Horner’s rules or Qin Jiushao(秦九韶)’s algorithm\"></a><strong>EX1. Horner’s rules or Qin Jiushao(秦九韶)’s algorithm</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 9 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> K 1e7 <span class=\"comment\">// numbers of loop</span></span></span><br><span class=\"line\"><span class=\"type\">double</span> a[<span class=\"number\">10</span>] = &#123; <span class=\"number\">2.1</span> , <span class=\"number\">3.4</span> , <span class=\"number\">2</span> , <span class=\"number\">1.3</span> , <span class=\"number\">3</span> , <span class=\"number\">8.8</span> , <span class=\"number\">4.3</span> , <span class=\"number\">5.3</span> , <span class=\"number\">5.3</span> , <span class=\"number\">4.3</span>&#125; ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"type\">double</span> x , <span class=\"type\">double</span> *a )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = a[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= N ; i++)&#123;</span><br><span class=\"line\">        res += a[i] * <span class=\"built_in\">pow</span>(x , i) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    <span class=\"comment\">//std:: cout &lt;&lt; &quot;the result of polynominal by func1 is &quot; &lt;&lt; res &lt;&lt; std::endl ; </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">double</span> x , <span class=\"type\">double</span> *a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Qin Jiushao&#x27;s algorithm</span></span><br><span class=\"line\">    <span class=\"type\">double</span> res = a[<span class=\"number\">9</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = N ; i &gt; <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        res = a[i - <span class=\"number\">1</span>] + res * x ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; &quot;the resulr of polynominal by func2 is &quot; &lt;&lt; res &lt;&lt; std::endl ;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">time_func1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start , stop ;</span><br><span class=\"line\">    start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; K ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func1</span>( <span class=\"number\">2.4</span> , a ) ;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stop = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;func1 cost &quot;</span> &lt;&lt; (<span class=\"built_in\">double</span>(stop - start)) / CLK_TCK / K &lt;&lt; <span class=\"string\">&quot; s per time&quot;</span> &lt;&lt; std::endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">time_func2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">clock_t</span> start , stop ;</span><br><span class=\"line\">    start = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; K ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func2</span>( <span class=\"number\">2.4</span> , a ) ;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stop = <span class=\"built_in\">clock</span>() ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;func2 cost &quot;</span> &lt;&lt; (<span class=\"built_in\">double</span>(stop - start)) / CLK_TCK / K  &lt;&lt; <span class=\"string\">&quot; s per time&quot;</span> &lt;&lt; std::endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x ; </span><br><span class=\"line\">    std::cin &gt;&gt; x ; </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;the result of func1 is &quot;</span> &lt;&lt; <span class=\"built_in\">func1</span>(x , a) &lt;&lt; std::endl ;    </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;the result of func2 is &quot;</span> &lt;&lt; <span class=\"built_in\">func2</span>(x , a) &lt;&lt; std::endl ;    </span><br><span class=\"line\">    <span class=\"built_in\">func2</span>(x , a) ;</span><br><span class=\"line\">    <span class=\"built_in\">time_func1</span>() ;</span><br><span class=\"line\">    <span class=\"built_in\">time_func2</span>() ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"C-dynamic-memory-allocation\"><a href=\"#C-dynamic-memory-allocation\" class=\"headerlink\" title=\"C++ dynamic memory allocation\"></a>C++ dynamic memory allocation</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* p = <span class=\"keyword\">new</span> <span class=\"type\">int</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span>* p2 = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>] ; <span class=\"comment\">//allocate 10 int memory to p2</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p , p2;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Convenient-way-of-passing-values-in-C\"><a href=\"#Convenient-way-of-passing-values-in-C\" class=\"headerlink\" title=\"Convenient way of passing values in C++\"></a>Convenient way of passing values in C++</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap_1</span><span class=\"params\">(<span class=\"type\">int</span>&amp; a , <span class=\"type\">int</span>&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = a ;</span><br><span class=\"line\">    a = b ;</span><br><span class=\"line\">    b = temp ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">2</span> , b = <span class=\"number\">9</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">swap_1</span>(a , b) ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; endl ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Representation-of-LinearList\"><a href=\"#Representation-of-LinearList\" class=\"headerlink\" title=\"Representation of LinearList\"></a>Representation of LinearList</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElementType int </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 20 </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">SqList</span>&#123;</span><br><span class=\"line\">    ElementType  *element ;</span><br><span class=\"line\">    <span class=\"type\">int</span> length ;</span><br><span class=\"line\">&#125;SqList ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList_Sq</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Initial the Squence Linear List</span></span><br><span class=\"line\">    L.element = <span class=\"keyword\">new</span> ElementType[MaxSize] ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!L.element)  &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        L.length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DestroyList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.element)   <span class=\"keyword\">delete</span> L.element ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClearList</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    L.length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  L.length ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">IsEmpty</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.length)    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetEle</span><span class=\"params\">(SqList &amp;L , <span class=\"type\">int</span> i , ElementType &amp;e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L.length)   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> e = L.element[i] ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateEle</span> <span class=\"params\">(SqList &amp;L , ElementType e)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; L.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.element[i] == e)   <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ListInsert_Sq</span><span class=\"params\">(SqList &amp;L , ElementType e , <span class=\"type\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L.length || (L.length + <span class=\"number\">1</span>) &gt; MaxSize)   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = L.element[L.length - <span class=\"number\">1</span>] ; j &gt;= i ; j--)&#123;</span><br><span class=\"line\">        L.element[j + <span class=\"number\">1</span>] = L.element[j] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.element[i] = e ;</span><br><span class=\"line\">    L.length++ ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList_Sq</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; L.length ; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; L.element[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ListDelete_Sq</span><span class=\"params\">(SqList &amp;L , <span class=\"type\">int</span> i )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L.length - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span> ; j &lt; L.length ; j++)&#123;</span><br><span class=\"line\">        L.element[j - <span class=\"number\">1</span>] = L.element[j] ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length-- ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">union_list</span><span class=\"params\">(SqList &amp;La , SqList Lb)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"built_in\">GetLength</span>(Lb) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">GetLength</span>(Lb) ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">LocateEle</span>(La , Lb.element[i]) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">ListInsert_Sq</span>(La , Lb.element[i] , <span class=\"built_in\">GetLength</span>(La)) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_list_Sq</span><span class=\"params\">(SqList &amp;Lc , SqList La , SqList Lb )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length_a = <span class=\"built_in\">GetLength</span>(La) , length_b = <span class=\"built_in\">GetLength</span>(Lb) ;</span><br><span class=\"line\">    Lc.length = length_a + length_b ;</span><br><span class=\"line\">    Lc.element = <span class=\"keyword\">new</span> ElementType[Lc.length] ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; length_a &amp;&amp; j &lt; length_b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(La.element[i] &lt; Lb.element[j])&#123;</span><br><span class=\"line\">            Lc.element[k++] = La.element[i++] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Lc.element[k++] = Lb.element[j++] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pc-&gt;next = pa ? pa : pb ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    SqList L ;</span><br><span class=\"line\">    <span class=\"built_in\">InitList_Sq</span>(L) ; </span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span> , <span class=\"number\">3</span> , <span class=\"number\">5</span> , <span class=\"number\">7</span> , <span class=\"number\">9</span>&#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++)&#123;</span><br><span class=\"line\">        L.element[i] = a[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length = <span class=\"number\">5</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">ListDelete_Sq</span>(L , <span class=\"number\">4</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_Sq</span>(L) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Advantages and Disadvantages of Squence Linear List :</strong></p>\n<p><strong>Advantages :</strong></p>\n<ul>\n<li><strong>Storing physical location relationships represents logical relationships .</strong></li>\n<li><strong>Can get any elements quickly .</strong></li>\n</ul>\n<p><strong>Disadvantage:</strong></p>\n<ul>\n<li><strong>Too many steps to move elements  in the option of Insert and Delete elements .</strong></li>\n</ul>\n<h2 id=\"Linked-Linear-List\"><a href=\"#Linked-Linear-List\" class=\"headerlink\" title=\"Linked Linear List\"></a>Linked Linear List</h2><p>I write a new article about linked linear list <a href=\"\">HERE</a></p>"},{"title":"Customized Website Article Link","abbrlink":"4bc5178d","date":"2021-10-01T09:00:00.000Z","_content":"\n### Abstract\n\nIn the default setting of Hexo and Next , my article 's usl is long and ugly ,  so I want to customize my article's lick ,which is concise and static .  Fortunately , I finally find a hexo plugin called `hexo-abbrlink` , which is really amazing !   Here is the link :  [rozbo/hexo-abbrlink: create one and only link for every post for hexo (github.com)](https://github.com/rozbo/hexo-abbrlink)\n\n<!-- more -->\n\n### Install and Configure it\n\n1. **Add plugin to Hexo :**\n\n```shell\nnpm install hexo-abbrlink --save\n```\n\n2. **Modify `config.yml`**\n\n**Change the origin code** \n\n```yml\npermalink: :year/:month/:day/:title/\n```\n\n**into**(You can choose one of two ways below :)\n\n```yml\npermalink: posts/:abbrlink/\n```\n\n**or**\n\n```yml\npermalink: posts/:addrlink.html\n```\n\n<strong style = \"color = red \">Be careful : </strong> \n\nThere is a `/` in the end of `permalink: posts/:abbrlink/` ,  and not in `permalink: posts/:addrlink.html` !    This `/`  is really important .\n\n\n\n3. **Add the codes below in the end of file `config.yml`**\n\n```yml\n# abbrlink config\nabbrlink:\n  alg: crc32      #support crc16(default) and crc32\n  rep: hex        #support dec(default) and hex\n  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) \n  # Generate categories from directory-tree\n  # depth: the max_depth of directory-tree you want to generate, should > 0\n  auto_category:\n     enable: true  #true(default)\n     depth:        #3(default)\n     over_write: false \n  auto_title: false #enable auto title, it can auto fill the title by path\n  auto_date: false #enable auto date, it can auto fill the date by time today\n  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.\n```\n\nYou can modifly the parameters `alg` and `rep` according to your preference , and their meaning is as follow :\n\n```yml\nalg -- Algorithm (currently support crc16 and crc32, which crc16 is default)\nrep -- Represent (the generated link could be presented in hex or dec value)\n```\n\n4. **Final Nagging**\n\n* If  your article 's  URL  is still the style `:year/:month/:day/:title/` ,  you may forget to change `permalink: :year/:month/:day/:title/`  into  `permalink: posts/:abbrlink/`  or `permalink: posts/:addrlink.html`  .   Another reason may be `\"GitHub just can't response at once\"`  , so just wait for minutes patiently ~\n* Just don't forget the `/` in the end of `permalink: posts/:abbrlink/`\n\n<del>Actually , I had fallen into two traps mentioned above .</del>\n\n* **That's all .**","source":"_posts/Customized-Website-Article-Link.md","raw":"---\ntitle: Customized Website Article Link\nabbrlink: 4bc5178d\ndate: 2021-10-01 17:00:00\ntags: Web\n---\n\n### Abstract\n\nIn the default setting of Hexo and Next , my article 's usl is long and ugly ,  so I want to customize my article's lick ,which is concise and static .  Fortunately , I finally find a hexo plugin called `hexo-abbrlink` , which is really amazing !   Here is the link :  [rozbo/hexo-abbrlink: create one and only link for every post for hexo (github.com)](https://github.com/rozbo/hexo-abbrlink)\n\n<!-- more -->\n\n### Install and Configure it\n\n1. **Add plugin to Hexo :**\n\n```shell\nnpm install hexo-abbrlink --save\n```\n\n2. **Modify `config.yml`**\n\n**Change the origin code** \n\n```yml\npermalink: :year/:month/:day/:title/\n```\n\n**into**(You can choose one of two ways below :)\n\n```yml\npermalink: posts/:abbrlink/\n```\n\n**or**\n\n```yml\npermalink: posts/:addrlink.html\n```\n\n<strong style = \"color = red \">Be careful : </strong> \n\nThere is a `/` in the end of `permalink: posts/:abbrlink/` ,  and not in `permalink: posts/:addrlink.html` !    This `/`  is really important .\n\n\n\n3. **Add the codes below in the end of file `config.yml`**\n\n```yml\n# abbrlink config\nabbrlink:\n  alg: crc32      #support crc16(default) and crc32\n  rep: hex        #support dec(default) and hex\n  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) \n  # Generate categories from directory-tree\n  # depth: the max_depth of directory-tree you want to generate, should > 0\n  auto_category:\n     enable: true  #true(default)\n     depth:        #3(default)\n     over_write: false \n  auto_title: false #enable auto title, it can auto fill the title by path\n  auto_date: false #enable auto date, it can auto fill the date by time today\n  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.\n```\n\nYou can modifly the parameters `alg` and `rep` according to your preference , and their meaning is as follow :\n\n```yml\nalg -- Algorithm (currently support crc16 and crc32, which crc16 is default)\nrep -- Represent (the generated link could be presented in hex or dec value)\n```\n\n4. **Final Nagging**\n\n* If  your article 's  URL  is still the style `:year/:month/:day/:title/` ,  you may forget to change `permalink: :year/:month/:day/:title/`  into  `permalink: posts/:abbrlink/`  or `permalink: posts/:addrlink.html`  .   Another reason may be `\"GitHub just can't response at once\"`  , so just wait for minutes patiently ~\n* Just don't forget the `/` in the end of `permalink: posts/:abbrlink/`\n\n<del>Actually , I had fallen into two traps mentioned above .</del>\n\n* **That's all .**","slug":"Customized-Website-Article-Link","published":1,"updated":"2024-03-15T12:38:34.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4d9000758tearc8h26h","content":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>In the default setting of Hexo and Next , my article ‘s usl is long and ugly ,  so I want to customize my article’s lick ,which is concise and static .  Fortunately , I finally find a hexo plugin called <code>hexo-abbrlink</code> , which is really amazing !   Here is the link :  <a href=\"https://github.com/rozbo/hexo-abbrlink\">rozbo&#x2F;hexo-abbrlink: create one and only link for every post for hexo (github.com)</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Install-and-Configure-it\"><a href=\"#Install-and-Configure-it\" class=\"headerlink\" title=\"Install and Configure it\"></a>Install and Configure it</h3><ol>\n<li><strong>Add plugin to Hexo :</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>Modify <code>config.yml</code></strong></li>\n</ol>\n<p><strong>Change the origin code</strong> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>into</strong>(You can choose one of two ways below :)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:abbrlink/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>or</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:addrlink.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong style = \"color = red \">Be careful : </strong> </p>\n<p>There is a <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code> ,  and not in <code>permalink: posts/:addrlink.html</code> !    This <code>/</code>  is really important .</p>\n<ol start=\"3\">\n<li><strong>Add the codes below in the end of file <code>config.yml</code></strong></li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># abbrlink config</span></span><br><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>      <span class=\"comment\">#support crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>        <span class=\"comment\">#support dec(default) and hex</span></span><br><span class=\"line\">  <span class=\"attr\">drafts:</span> <span class=\"literal\">false</span>   <span class=\"comment\">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class=\"line\">  <span class=\"comment\"># Generate categories from directory-tree</span></span><br><span class=\"line\">  <span class=\"comment\"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class=\"line\">  <span class=\"attr\">auto_category:</span></span><br><span class=\"line\">     <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#true(default)</span></span><br><span class=\"line\">     <span class=\"attr\">depth:</span>        <span class=\"comment\">#3(default)</span></span><br><span class=\"line\">     <span class=\"attr\">over_write:</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  <span class=\"attr\">auto_title:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable auto title, it can auto fill the title by path</span></span><br><span class=\"line\">  <span class=\"attr\">auto_date:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable auto date, it can auto fill the date by time today</span></span><br><span class=\"line\">  <span class=\"attr\">force:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span></span><br></pre></td></tr></table></figure>\n\n<p>You can modifly the parameters <code>alg</code> and <code>rep</code> according to your preference , and their meaning is as follow :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">alg</span> <span class=\"string\">--</span> <span class=\"string\">Algorithm</span> <span class=\"string\">(currently</span> <span class=\"string\">support</span> <span class=\"string\">crc16</span> <span class=\"string\">and</span> <span class=\"string\">crc32,</span> <span class=\"string\">which</span> <span class=\"string\">crc16</span> <span class=\"string\">is</span> <span class=\"string\">default)</span></span><br><span class=\"line\"><span class=\"string\">rep</span> <span class=\"string\">--</span> <span class=\"string\">Represent</span> <span class=\"string\">(the</span> <span class=\"string\">generated</span> <span class=\"string\">link</span> <span class=\"string\">could</span> <span class=\"string\">be</span> <span class=\"string\">presented</span> <span class=\"string\">in</span> <span class=\"string\">hex</span> <span class=\"string\">or</span> <span class=\"string\">dec</span> <span class=\"string\">value)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Final Nagging</strong></li>\n</ol>\n<ul>\n<li>If  your article ‘s  URL  is still the style <code>:year/:month/:day/:title/</code> ,  you may forget to change <code>permalink: :year/:month/:day/:title/</code>  into  <code>permalink: posts/:abbrlink/</code>  or <code>permalink: posts/:addrlink.html</code>  .   Another reason may be <code>&quot;GitHub just can&#39;t response at once&quot;</code>  , so just wait for minutes patiently ~</li>\n<li>Just don’t forget the <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code></li>\n</ul>\n<p><del>Actually , I had fallen into two traps mentioned above .</del></p>\n<ul>\n<li><strong>That’s all .</strong></li>\n</ul>\n","site":{"data":{}},"length":1952,"excerpt":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>In the default setting of Hexo and Next , my article ‘s usl is long and ugly ,  so I want to customize my article’s lick ,which is concise and static .  Fortunately , I finally find a hexo plugin called <code>hexo-abbrlink</code> , which is really amazing !   Here is the link :  <a href=\"https://github.com/rozbo/hexo-abbrlink\">rozbo&#x2F;hexo-abbrlink: create one and only link for every post for hexo (github.com)</a></p>","more":"<h3 id=\"Install-and-Configure-it\"><a href=\"#Install-and-Configure-it\" class=\"headerlink\" title=\"Install and Configure it\"></a>Install and Configure it</h3><ol>\n<li><strong>Add plugin to Hexo :</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>Modify <code>config.yml</code></strong></li>\n</ol>\n<p><strong>Change the origin code</strong> </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>into</strong>(You can choose one of two ways below :)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:abbrlink/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>or</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">posts/:addrlink.html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong style = \"color = red \">Be careful : </strong> </p>\n<p>There is a <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code> ,  and not in <code>permalink: posts/:addrlink.html</code> !    This <code>/</code>  is really important .</p>\n<ol start=\"3\">\n<li><strong>Add the codes below in the end of file <code>config.yml</code></strong></li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># abbrlink config</span></span><br><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>      <span class=\"comment\">#support crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>        <span class=\"comment\">#support dec(default) and hex</span></span><br><span class=\"line\">  <span class=\"attr\">drafts:</span> <span class=\"literal\">false</span>   <span class=\"comment\">#(true)Process draft,(false)Do not process draft. false(default) </span></span><br><span class=\"line\">  <span class=\"comment\"># Generate categories from directory-tree</span></span><br><span class=\"line\">  <span class=\"comment\"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class=\"line\">  <span class=\"attr\">auto_category:</span></span><br><span class=\"line\">     <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#true(default)</span></span><br><span class=\"line\">     <span class=\"attr\">depth:</span>        <span class=\"comment\">#3(default)</span></span><br><span class=\"line\">     <span class=\"attr\">over_write:</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  <span class=\"attr\">auto_title:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable auto title, it can auto fill the title by path</span></span><br><span class=\"line\">  <span class=\"attr\">auto_date:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable auto date, it can auto fill the date by time today</span></span><br><span class=\"line\">  <span class=\"attr\">force:</span> <span class=\"literal\">false</span> <span class=\"comment\">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span></span><br></pre></td></tr></table></figure>\n\n<p>You can modifly the parameters <code>alg</code> and <code>rep</code> according to your preference , and their meaning is as follow :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">alg</span> <span class=\"string\">--</span> <span class=\"string\">Algorithm</span> <span class=\"string\">(currently</span> <span class=\"string\">support</span> <span class=\"string\">crc16</span> <span class=\"string\">and</span> <span class=\"string\">crc32,</span> <span class=\"string\">which</span> <span class=\"string\">crc16</span> <span class=\"string\">is</span> <span class=\"string\">default)</span></span><br><span class=\"line\"><span class=\"string\">rep</span> <span class=\"string\">--</span> <span class=\"string\">Represent</span> <span class=\"string\">(the</span> <span class=\"string\">generated</span> <span class=\"string\">link</span> <span class=\"string\">could</span> <span class=\"string\">be</span> <span class=\"string\">presented</span> <span class=\"string\">in</span> <span class=\"string\">hex</span> <span class=\"string\">or</span> <span class=\"string\">dec</span> <span class=\"string\">value)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>Final Nagging</strong></li>\n</ol>\n<ul>\n<li>If  your article ‘s  URL  is still the style <code>:year/:month/:day/:title/</code> ,  you may forget to change <code>permalink: :year/:month/:day/:title/</code>  into  <code>permalink: posts/:abbrlink/</code>  or <code>permalink: posts/:addrlink.html</code>  .   Another reason may be <code>&quot;GitHub just can&#39;t response at once&quot;</code>  , so just wait for minutes patiently ~</li>\n<li>Just don’t forget the <code>/</code> in the end of <code>permalink: posts/:abbrlink/</code></li>\n</ul>\n<p><del>Actually , I had fallen into two traps mentioned above .</del></p>\n<ul>\n<li><strong>That’s all .</strong></li>\n</ul>"},{"title":"Git学习笔记","abbrlink":"a91eaa72","date":"2022-10-09T03:30:57.000Z","_content":"\nGit学习笔记 by 《[ProGit](https://git-scm.com/book/zh/v2)》\n\n<!-- more -->\n\n# Git设计理念\n\n* **Git直接记录快照，而非差异比较**\n\n* 基于差异**(Delta-based)** , 像CSV、Subversion、Perforce。它们如何建立新版本：在版本1的基础上，建立一个记录`版本2(新版本)`与`版本1`差异的文件，我们称其为$\\Delta1$ .当我们需要读取版本2时，可以通过**$版本1 + \\Delta1$** 计算得出版本2。\n\n* Git快照流**，提交后，建立一个新的快照：对**修改过的文件**建立一个新的快照并保存其索引，对**未修改的文件**并不重新存储**，而是**只保留一个链接**指向旧文件\n\n{% gp 2-2 %}\n\n![基于差异比较](https://git-scm.com/book/en/v2/images/deltas.png)\n\n![数据流-快照](https://git-scm.com/book/en/v2/images/snapshots.png)\n\n{% endgp %}\n\n# Git 基础\n\n## Git工作状态\n\n**三种状态：**`已提交(committed)`、``已修改(modified)``、``已暂存(staged) ``, 对应三个阶段：``工作区``、``暂存区``、``Git目录(仓库)``。\n\n{% gp 2-2 %}\n\n![Git三个阶段](https://git-scm.com/book/en/v2/images/areas.png)\n\n![文件状态变化周期](https://git-scm.com/book/en/v2/images/lifecycle.png)\n\n{% endgp %}\n\n## Git配置\n\n安装Git后添加用户信息：\n\n```shell\ngit config --global user.name \"benkangpeng\"\ngit config --global user.email benkangpeng@163.com\n```\n\n```shell\n$ cd /c/user/my_project\n$ git init # 初始化git\n```\n\n## Git基本操作\n\n### 获取mannul\n\n```shell\ngit <verb> -h\n```\n\nex :  `git add -h`\n\n### git init\n\n```shell\n$ cd /my_project/\n$ git init\n```\n\n初始化Git仓库，此时会在my_project文件夹中生成`.git`子目录用于存放版本控制文件。注意：**此时还没对项目文件进行跟踪** , 还需要`git add`跟踪所需文件。\n\ngit add\n\n```shell\n$ git *.c  # 跟踪所有后缀为.c文件\n$ git README.md\n```\n\n`git add`内涵：\n\n要暂存这次更新，需要运行 `git add` 命令。 这是个**多功能**命令：①可以用它开始跟踪新文件，②或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“<u>精确地将内容添加到**下一次提交**中</u>”而不是“将一个文件添加到项目中”要更加合适。 \n\n### git status\n\n显示当前文件夹git状况。\n\n> On branch master\n>\n> No commits yet\n>\n> Changes to be committed:\n>   (use \"git rm --cached <file>...\" to unstage)\n>         new file:   README.md\n>\n> Untracked files:\n>   (use \"git add <file>...\" to include in what will be committed)\n>         CONTRIBUTING.md\n\n如上显示的是，`README.md`已被跟踪，而`CONTRIBUTING.md`未被跟踪。\n\n```shell\n$ git add CONTRIBUTING.md\n$ echo `My project` > README.md\n$ git status\n```\n\n> On branch master\n>\n> No commits yet\n>\n> Changes to be committed:\n>   (use \"git rm --cached <file>...\" to unstage)\n>         new file:   CONTRIBUTING.md\n>         new file:   README.md\n>\n> Changes not staged for commit:\n>   (use \"git add <file>...\" to update what will be committed)\n>   (use \"git restore <file>...\" to discard changes in working directory)\n>         modified:   README.md\n\n* 此时`CONTRIBUTING.md`已经被跟踪\n* 提示有``待提交的修改`` (changes to be committed) ,  `CONTRIBUTING.md`和`README.md`没有提交。(至于changes , 即`new file` , git将`创立文件`也视为`changes`)\n* `Changes not staged for commit` ： 我们刚才向`README,md`写入了`My project` , 但没有将新版本的`README.md`添加进入暂存区`stage` 。可执行操作`git add README.md`\n* 上面这条再一次体现了`git add`的双重命令，或将其理解为`为文件提交(commit)做好预备` \n\n### .gitignore\n\n创建`.gitignore`文件忽略追踪\n\n```shell\n$ touch .gitignore\n$ git add .gitignore\n# You must add .gitignore into the staging area to make it work .\n```\n\n常见语法：\n\n```\n# 忽略所有的 .a 文件\n*.a\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n```\n\n### git diff\n\n* `git diff` 查看**同一**文件`已暂存`与`未暂存`的两个版本的差异\n\n  eg.  在`README.md`中添加一行`哈哈` ，no stage ,  使用命令查看:\n\n>$ git diff README.md\n>diff --git a/README.md b/README.md\n>index 6fcadd0..b2f8c83 100644\n>--- a/README.md\n>+++ b/README.md\n>@@ -1 +1,3 @@\n> My project~\n>+\n>+哈哈\n>\\ No newline at end of file\n\n* `git diff --staged` 查看``已暂存文件``与``最后一次提交文件``的差异.\n\n```shell\n$ git diff --staged README.md\n```\n\n\n\n### git commit\n\n每次准备提交前，先用 `git status` 看下，你所需要的文件是不是都**已暂存**起来了， 然后再运行提交命令 `git commit`：\n\n```shell\n$ git commit -m \"the first commit\"\n```\n\n* `-m` : 添加提交信息message\n* \"the first commit\" : 提交的信息，区分每一次提交做了哪些大体的修改\n\n* `git commit -a`跳过暂存区，直接将为暂存的文件commit .\n\n### git rm\n\n* 如果你想从磁盘根本删除``未暂存的文件``:\n\n```shell\n$ git rm PROJECT.md\n```\n\n* 从暂存区删除(取消跟踪)文件(仍保存在磁盘里）：\n\n```shell\n$ git rm -f PROJECT.md #-force , 强制删除\n```\n\n### git mv\n\n* `git mv` 移动文件 or 重命名文件。\n\n```shell\n$ git mv Project.md PROJECT.md\n```\n\n上述命令相当于：\n\n```shell\n$ mv Project.md PROJECT.md\n$ git rm Project.md # 从暂存区移除Project.md\n$ git add PROJECT.md # 跟踪PROJECT.md\n```\n\n### git log\n\n* `git log` 显示所有提交日志\n* `git log -2` 显示最近两条日志\n* `git log -p` 按补丁格式显示每个提交引入的差异\n* `git log --pretty=oneline`显示格式为一行\n* 此外还有一些参数过滤日志内容，例如`--since``--author`等，可查文档。\n\n### git commit --amend\n\n* 提交后发现上一次提交有些许瑕疵，例如message写错了、没有跟踪上某个文件 ，但又不想再一次提交，想覆盖上一次提交。\n\n```shell\n$ git commit --amend -m \"the right message\"\n```\n\n### git reset\n\n* 强制重置(删除)某个commit, 例如`git reset --hard HEAD~1`删除上一次提交。\n* 取消暂存的文件，例如将`CONTRIBUTING.md`文件取出``stageing area` , `git reset HEAD CONTRIBUTING.md`\n\n### *文件版本回溯\n\n案例：`commit log`如下，自从`git clone`以来，我提交了`version 1`和`version2`.整个项目只有两个文件：`check.md`和`README.md`. 我现在想将`check.md`还原到`version 1`的状态，但`README.md`不用还原。(可以理解为我后知后觉意识到`version2`中对`check.md`的修改是错误的。)\n\n> $ git log --pretty=oneline\n> bc03ee1185c084b514ff44a9520ab5d29777b600 (HEAD) version2\n> 3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1\n> 86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\n> ct some ways to github\n> 1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\n> a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n\n```shell\n$ git reset 3d44a  # 3d44a是version1的效验码，没写完整\nUnstaged changes after reset:\nM       README.md\nM       check.md\n#到version1后,本地文件是没有发生变化的(仍是version2的snapshot),因此会提示`unstaged changes\n$ git status\nHEAD detached from 86d413d\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   README.md\n        modified:   check.md\n# 如何恢复check.md，上面的信息也提示我们了“git restore <file>”\n$ git restore check.md && git add README.md\n$ git log --pretty=oneline\n3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 (HEAD) version 1\n86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\nct some ways to github\n1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\na41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n#END\n```\n\n<del>但以上做法删除了version2的提交信息。是否存在方法，只进行单个文件的版本回溯呢？现在还没解决……</del>\n\n### *单文件版本回溯\n\n```shell\n$ git log --pretty=oneline\n05bfc3c25ca3ee80247f3ec24b4936d2d7e7d2c1 (HEAD) version3\n245a8ddd0c2bfc01c2444930e2ed11b04320d354 version2\n3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1\n86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\nct some ways to github\n1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\na41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n```\n\n* 将`check.md`回溯到版本1，其他文件不变，`git checkout <hash> check.md`\n\n```shell\n$ git checkout 3d44a28a check.md\nUpdated 1 path from aab7394\n```\n\n### 与远程仓库联动\n\n* `git remote add <name> <url>` 添加远程仓库，例如`git remote add getback https://github.com/BenkangPeng/GetBack.git` , 之后可用名称`getback`代替网址进行操作。类似于`C`里的`#define`\n* `git remote -v`显示已添加的远程仓库, `git remote`简略显示。\n* `git remote rename name1 name2` 修改仓库**代称**，实际远程仓库(比如Github上的仓库）名称没被修改。\n\n```shell\n$ git remote add getback https://github.com/BenkangPeng/GetBack.git\n$ git remote -v\ngetback https://github.com/BenkangPeng/GetBack.git (fetch)\ngetback https://github.com/BenkangPeng/GetBack.git (push)\n$ git remote rename getback GetBack\n$ git remote\nGetBack\n```\n\n* `git fetch` 获取仓库的更新。例如，你在1年以前`clone`了仓库`A` , 但在过去一年内，仓库`A`其他开源贡献者提交了许多内容，甚至产生了分支，`git fetch <url>`将仓库`A`的这些更新数据下载到本地，但不会改变本地状态：**不会自动合并分支或修改你当前的工作**。当然你可以手动合并分支、更新本地仓库。\n* `git clone <url>`克隆仓库。将`<url>`对应的仓库克隆到本地，与`git fetch`不同的是，它将覆盖本地工作。\n\n```shell\n$ git clone https://github.com/BenkangPeng/GetBack.git\n$ cd GetBack/\n$ git remote -v\norigin  https://github.com/BenkangPeng/GetBack.git (fetch)\norigin  https://github.com/BenkangPeng/GetBack.git (push)\n#克隆完仓库后，git会自动创建一个origin的远程仓库，对应的就是克隆的仓库url\n#对GetBack进行修改……\n$ git push origin main\n#将本地的main分支(主支)提交到远程仓库origin\n```\n\n关于``主分支`` `master`改为`main`，还颇有意味。[github/renaming](https://github.com/github/renaming)        [乐子 on 知乎](https://zhuanlan.zhihu.com/p/257179306)\n\n### Tag\n\n* `git tag -a <v1.0> -m \"version 1.0\"` 添加`annotated tag` , `git tag v1.0`添加`lightweight`标签。\n* `git tag`显示所有标签，`git show <v1.0> `显示某个标签信息\n* `git tag <version> <verify code>`为之前某一次`commit`补充`tag`\n\n```shell\n$ git log --pretty=oneline\ndd0a36aec54a58a9f3427f5f33b1ee97802949b0 (HEAD -> master, tag: v1.0) \n3d4057629e1e3515667c7e826817a9ab5a29f306 the second commit\n349775b9754e9113e549a9d734707bff38f2e3b4 the first commit\n\n$ git tag v0.0 34977\n```\n\n* 默认情况下，`git push`不会顺带将每一个`commit` 的`tag`提交，需手动设置。`git push origin <tagname>`上传单个`tag`  ,  `git push origin --tags `推送所有`tags`\n* `git tag -d <tagname>`删除标签，但不会删除远程仓库(``remote`)的`tags` , 需用`git push origin --delete <tagname>`\n\n\n\n# Git分支\n\n```shell\n$ git branch testing\t#创立分支testing\n$ git checkout testing  #切换到testing\n#以上两条命令可合并为 git checkout -b testing \nSwitched to branch 'testing'\n# do some changes\n$ git checkout main  #回到主分支\n$ git branch #显示所有分支\n```\n\n* `git merge <branch>`\n\n```shell\n$ git touch polynorminal.cpp\n# edit polynorminal.cpp\n$ git add polynorminal.cpp\n$ git commit -m \"touch a new .cpp file\"\n$ git checkout -b AddFunc2\nSwitched to a new branch 'AddFunc2'\n# edit polynorminal.cpp\n$ git commit -a -m \"have added the func2\"\n$ git checkout main\n$ git merge AddFunc2\nUpdating 87ba74e..869b2a7\nFast-forward\n polynorminal.cpp | 11 ++++++++++-\n 1 file changed, 10 insertions(+), 1 deletion(-)\n```\n\n{% note info %}\n\n在`main`中合并分支时，可能出现合并冲突，这是因为分支中文件修改过大，`git`不知道如何将`main`与`branch`两个文件版本合并，此时需手动合并、修改文件，并`commit`\n\n{% endnote %}\n\n* `git branch -d <branch>`删除分支（但不能删除未合并的分支）\n* `git branch --no-merged`查看未合并的分支\n\n\n\n### Git版本回溯(by branch)\n\n我一直是用`git reset --hard <hash_id>`进行版本回溯，但这样会丢失之后的commit，导致版本混乱。现在想到一个方法，可以用分支来进行回溯查看。(当然，如果我们确定要回到某个commit重新工作，并确定要丢失之后的commit，也可以硬重置。)\n\n**查看当前分支**\n\n```shell\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n现在我们正在`sparse`分支上，因为改动较大，想回到稠密版本上查看稠密版本的源码：\n\n```shell\n$ git checkout -b check_dense_version e339fae\n# = git branch check_dense_version e339fae && git checkout check_denser_version\nSwitched to a new branch 'check_dense_version'\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (HEAD -> check_dense_version) 完成稠密\n| * bfbf7ce (sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n这时整个工作目录的文件都变成了`e3319fae`时的版本。在这个版本下，如果我们运行代码导致一些文件发生了修改，工作目录不干净，是不能直接`switch`回`sparse`的：\n\n```shell\n$ git switch sparse \nerror: Your local changes to the following files would be overwritten by checkout:\n        a.txt\nPlease commit your changes or stash them before you switch branches.\nAborting\n```\n\n提示显示如果我们要更换分支，需要`commit` 或者`stash`\n\n* 如果我们不需要提交，可以将文件变更取消掉，再`switch`\n\n```shell\n$ git restore .  #将所有被修改的文件复原\n$ git switch sparse \nSwitched to branch 'sparse'\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (check_dense_version) 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n**`git stash`**\n\n如果我们在`sparse`分支下工作目录有修改未提交，那么切换分支之前需要将修改存入`stash`。\n\n```shell\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n\n$ git branch temp e339fae\n$ git switch temp\nerror: Your local changes to the following files would be overwritten by checkout:\n        a.txt\nPlease commit your changes or stash them before you switch branches.\nAborting\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (temp) 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n$ git stash save \"uncommit modify in sparse\"\nSaved working directory and index state On sparse: uncommit modify in sparse\n$ git switch temp\nSwitched to branch 'temp'\n$ git switch sparse \nSwitched to branch 'sparse'\n$ git stash list\nstash@{0}: On sparse: uncommit modify in sparse\n$ git stash pop 0\nOn branch sparse\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (6679d6d8daf8a44c45d289fe82c7aab9a5430eb0)\n```\n\n**git stash相关命令**\n\n1. `git stash save [message]`：将当前工作目录的修改保存到一个stash列表中，并附带一条可选的描述信息。\n2. `git stash list`：列出所有的stash列表。\n3. `git stash apply [stash_id]`：将指定的stash应用到当前工作目录，但不从stash列表中删除。\n4. `git stash pop [stash_id]`：将指定的stash应用到当前工作目录，并从stash列表中删除。\n5. `git stash drop [stash_id]`：从stash列表中删除指定的stash。\n6. `git stash branch [branch_name] [stash_id]`：基于指定的stash创建一个新的分支，并将stash应用到新分支上。\n7. `git stash pop --index [stash_id]`：将指定的stash应用到当前工作目录和索引（暂存区），并从stash列表中删除\n\n\n\n\n\n","source":"_posts/Git学习笔记.md","raw":"---\ntitle: Git学习笔记\ntags: Tools\nabbrlink: a91eaa72\ndate: 2022-10-09 11:30:57\n---\n\nGit学习笔记 by 《[ProGit](https://git-scm.com/book/zh/v2)》\n\n<!-- more -->\n\n# Git设计理念\n\n* **Git直接记录快照，而非差异比较**\n\n* 基于差异**(Delta-based)** , 像CSV、Subversion、Perforce。它们如何建立新版本：在版本1的基础上，建立一个记录`版本2(新版本)`与`版本1`差异的文件，我们称其为$\\Delta1$ .当我们需要读取版本2时，可以通过**$版本1 + \\Delta1$** 计算得出版本2。\n\n* Git快照流**，提交后，建立一个新的快照：对**修改过的文件**建立一个新的快照并保存其索引，对**未修改的文件**并不重新存储**，而是**只保留一个链接**指向旧文件\n\n{% gp 2-2 %}\n\n![基于差异比较](https://git-scm.com/book/en/v2/images/deltas.png)\n\n![数据流-快照](https://git-scm.com/book/en/v2/images/snapshots.png)\n\n{% endgp %}\n\n# Git 基础\n\n## Git工作状态\n\n**三种状态：**`已提交(committed)`、``已修改(modified)``、``已暂存(staged) ``, 对应三个阶段：``工作区``、``暂存区``、``Git目录(仓库)``。\n\n{% gp 2-2 %}\n\n![Git三个阶段](https://git-scm.com/book/en/v2/images/areas.png)\n\n![文件状态变化周期](https://git-scm.com/book/en/v2/images/lifecycle.png)\n\n{% endgp %}\n\n## Git配置\n\n安装Git后添加用户信息：\n\n```shell\ngit config --global user.name \"benkangpeng\"\ngit config --global user.email benkangpeng@163.com\n```\n\n```shell\n$ cd /c/user/my_project\n$ git init # 初始化git\n```\n\n## Git基本操作\n\n### 获取mannul\n\n```shell\ngit <verb> -h\n```\n\nex :  `git add -h`\n\n### git init\n\n```shell\n$ cd /my_project/\n$ git init\n```\n\n初始化Git仓库，此时会在my_project文件夹中生成`.git`子目录用于存放版本控制文件。注意：**此时还没对项目文件进行跟踪** , 还需要`git add`跟踪所需文件。\n\ngit add\n\n```shell\n$ git *.c  # 跟踪所有后缀为.c文件\n$ git README.md\n```\n\n`git add`内涵：\n\n要暂存这次更新，需要运行 `git add` 命令。 这是个**多功能**命令：①可以用它开始跟踪新文件，②或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“<u>精确地将内容添加到**下一次提交**中</u>”而不是“将一个文件添加到项目中”要更加合适。 \n\n### git status\n\n显示当前文件夹git状况。\n\n> On branch master\n>\n> No commits yet\n>\n> Changes to be committed:\n>   (use \"git rm --cached <file>...\" to unstage)\n>         new file:   README.md\n>\n> Untracked files:\n>   (use \"git add <file>...\" to include in what will be committed)\n>         CONTRIBUTING.md\n\n如上显示的是，`README.md`已被跟踪，而`CONTRIBUTING.md`未被跟踪。\n\n```shell\n$ git add CONTRIBUTING.md\n$ echo `My project` > README.md\n$ git status\n```\n\n> On branch master\n>\n> No commits yet\n>\n> Changes to be committed:\n>   (use \"git rm --cached <file>...\" to unstage)\n>         new file:   CONTRIBUTING.md\n>         new file:   README.md\n>\n> Changes not staged for commit:\n>   (use \"git add <file>...\" to update what will be committed)\n>   (use \"git restore <file>...\" to discard changes in working directory)\n>         modified:   README.md\n\n* 此时`CONTRIBUTING.md`已经被跟踪\n* 提示有``待提交的修改`` (changes to be committed) ,  `CONTRIBUTING.md`和`README.md`没有提交。(至于changes , 即`new file` , git将`创立文件`也视为`changes`)\n* `Changes not staged for commit` ： 我们刚才向`README,md`写入了`My project` , 但没有将新版本的`README.md`添加进入暂存区`stage` 。可执行操作`git add README.md`\n* 上面这条再一次体现了`git add`的双重命令，或将其理解为`为文件提交(commit)做好预备` \n\n### .gitignore\n\n创建`.gitignore`文件忽略追踪\n\n```shell\n$ touch .gitignore\n$ git add .gitignore\n# You must add .gitignore into the staging area to make it work .\n```\n\n常见语法：\n\n```\n# 忽略所有的 .a 文件\n*.a\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n```\n\n### git diff\n\n* `git diff` 查看**同一**文件`已暂存`与`未暂存`的两个版本的差异\n\n  eg.  在`README.md`中添加一行`哈哈` ，no stage ,  使用命令查看:\n\n>$ git diff README.md\n>diff --git a/README.md b/README.md\n>index 6fcadd0..b2f8c83 100644\n>--- a/README.md\n>+++ b/README.md\n>@@ -1 +1,3 @@\n> My project~\n>+\n>+哈哈\n>\\ No newline at end of file\n\n* `git diff --staged` 查看``已暂存文件``与``最后一次提交文件``的差异.\n\n```shell\n$ git diff --staged README.md\n```\n\n\n\n### git commit\n\n每次准备提交前，先用 `git status` 看下，你所需要的文件是不是都**已暂存**起来了， 然后再运行提交命令 `git commit`：\n\n```shell\n$ git commit -m \"the first commit\"\n```\n\n* `-m` : 添加提交信息message\n* \"the first commit\" : 提交的信息，区分每一次提交做了哪些大体的修改\n\n* `git commit -a`跳过暂存区，直接将为暂存的文件commit .\n\n### git rm\n\n* 如果你想从磁盘根本删除``未暂存的文件``:\n\n```shell\n$ git rm PROJECT.md\n```\n\n* 从暂存区删除(取消跟踪)文件(仍保存在磁盘里）：\n\n```shell\n$ git rm -f PROJECT.md #-force , 强制删除\n```\n\n### git mv\n\n* `git mv` 移动文件 or 重命名文件。\n\n```shell\n$ git mv Project.md PROJECT.md\n```\n\n上述命令相当于：\n\n```shell\n$ mv Project.md PROJECT.md\n$ git rm Project.md # 从暂存区移除Project.md\n$ git add PROJECT.md # 跟踪PROJECT.md\n```\n\n### git log\n\n* `git log` 显示所有提交日志\n* `git log -2` 显示最近两条日志\n* `git log -p` 按补丁格式显示每个提交引入的差异\n* `git log --pretty=oneline`显示格式为一行\n* 此外还有一些参数过滤日志内容，例如`--since``--author`等，可查文档。\n\n### git commit --amend\n\n* 提交后发现上一次提交有些许瑕疵，例如message写错了、没有跟踪上某个文件 ，但又不想再一次提交，想覆盖上一次提交。\n\n```shell\n$ git commit --amend -m \"the right message\"\n```\n\n### git reset\n\n* 强制重置(删除)某个commit, 例如`git reset --hard HEAD~1`删除上一次提交。\n* 取消暂存的文件，例如将`CONTRIBUTING.md`文件取出``stageing area` , `git reset HEAD CONTRIBUTING.md`\n\n### *文件版本回溯\n\n案例：`commit log`如下，自从`git clone`以来，我提交了`version 1`和`version2`.整个项目只有两个文件：`check.md`和`README.md`. 我现在想将`check.md`还原到`version 1`的状态，但`README.md`不用还原。(可以理解为我后知后觉意识到`version2`中对`check.md`的修改是错误的。)\n\n> $ git log --pretty=oneline\n> bc03ee1185c084b514ff44a9520ab5d29777b600 (HEAD) version2\n> 3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1\n> 86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\n> ct some ways to github\n> 1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\n> a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n\n```shell\n$ git reset 3d44a  # 3d44a是version1的效验码，没写完整\nUnstaged changes after reset:\nM       README.md\nM       check.md\n#到version1后,本地文件是没有发生变化的(仍是version2的snapshot),因此会提示`unstaged changes\n$ git status\nHEAD detached from 86d413d\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   README.md\n        modified:   check.md\n# 如何恢复check.md，上面的信息也提示我们了“git restore <file>”\n$ git restore check.md && git add README.md\n$ git log --pretty=oneline\n3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 (HEAD) version 1\n86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\nct some ways to github\n1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\na41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n#END\n```\n\n<del>但以上做法删除了version2的提交信息。是否存在方法，只进行单个文件的版本回溯呢？现在还没解决……</del>\n\n### *单文件版本回溯\n\n```shell\n$ git log --pretty=oneline\n05bfc3c25ca3ee80247f3ec24b4936d2d7e7d2c1 (HEAD) version3\n245a8ddd0c2bfc01c2444930e2ed11b04320d354 version2\n3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1\n86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle\nct some ways to github\n1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push\na41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md\n```\n\n* 将`check.md`回溯到版本1，其他文件不变，`git checkout <hash> check.md`\n\n```shell\n$ git checkout 3d44a28a check.md\nUpdated 1 path from aab7394\n```\n\n### 与远程仓库联动\n\n* `git remote add <name> <url>` 添加远程仓库，例如`git remote add getback https://github.com/BenkangPeng/GetBack.git` , 之后可用名称`getback`代替网址进行操作。类似于`C`里的`#define`\n* `git remote -v`显示已添加的远程仓库, `git remote`简略显示。\n* `git remote rename name1 name2` 修改仓库**代称**，实际远程仓库(比如Github上的仓库）名称没被修改。\n\n```shell\n$ git remote add getback https://github.com/BenkangPeng/GetBack.git\n$ git remote -v\ngetback https://github.com/BenkangPeng/GetBack.git (fetch)\ngetback https://github.com/BenkangPeng/GetBack.git (push)\n$ git remote rename getback GetBack\n$ git remote\nGetBack\n```\n\n* `git fetch` 获取仓库的更新。例如，你在1年以前`clone`了仓库`A` , 但在过去一年内，仓库`A`其他开源贡献者提交了许多内容，甚至产生了分支，`git fetch <url>`将仓库`A`的这些更新数据下载到本地，但不会改变本地状态：**不会自动合并分支或修改你当前的工作**。当然你可以手动合并分支、更新本地仓库。\n* `git clone <url>`克隆仓库。将`<url>`对应的仓库克隆到本地，与`git fetch`不同的是，它将覆盖本地工作。\n\n```shell\n$ git clone https://github.com/BenkangPeng/GetBack.git\n$ cd GetBack/\n$ git remote -v\norigin  https://github.com/BenkangPeng/GetBack.git (fetch)\norigin  https://github.com/BenkangPeng/GetBack.git (push)\n#克隆完仓库后，git会自动创建一个origin的远程仓库，对应的就是克隆的仓库url\n#对GetBack进行修改……\n$ git push origin main\n#将本地的main分支(主支)提交到远程仓库origin\n```\n\n关于``主分支`` `master`改为`main`，还颇有意味。[github/renaming](https://github.com/github/renaming)        [乐子 on 知乎](https://zhuanlan.zhihu.com/p/257179306)\n\n### Tag\n\n* `git tag -a <v1.0> -m \"version 1.0\"` 添加`annotated tag` , `git tag v1.0`添加`lightweight`标签。\n* `git tag`显示所有标签，`git show <v1.0> `显示某个标签信息\n* `git tag <version> <verify code>`为之前某一次`commit`补充`tag`\n\n```shell\n$ git log --pretty=oneline\ndd0a36aec54a58a9f3427f5f33b1ee97802949b0 (HEAD -> master, tag: v1.0) \n3d4057629e1e3515667c7e826817a9ab5a29f306 the second commit\n349775b9754e9113e549a9d734707bff38f2e3b4 the first commit\n\n$ git tag v0.0 34977\n```\n\n* 默认情况下，`git push`不会顺带将每一个`commit` 的`tag`提交，需手动设置。`git push origin <tagname>`上传单个`tag`  ,  `git push origin --tags `推送所有`tags`\n* `git tag -d <tagname>`删除标签，但不会删除远程仓库(``remote`)的`tags` , 需用`git push origin --delete <tagname>`\n\n\n\n# Git分支\n\n```shell\n$ git branch testing\t#创立分支testing\n$ git checkout testing  #切换到testing\n#以上两条命令可合并为 git checkout -b testing \nSwitched to branch 'testing'\n# do some changes\n$ git checkout main  #回到主分支\n$ git branch #显示所有分支\n```\n\n* `git merge <branch>`\n\n```shell\n$ git touch polynorminal.cpp\n# edit polynorminal.cpp\n$ git add polynorminal.cpp\n$ git commit -m \"touch a new .cpp file\"\n$ git checkout -b AddFunc2\nSwitched to a new branch 'AddFunc2'\n# edit polynorminal.cpp\n$ git commit -a -m \"have added the func2\"\n$ git checkout main\n$ git merge AddFunc2\nUpdating 87ba74e..869b2a7\nFast-forward\n polynorminal.cpp | 11 ++++++++++-\n 1 file changed, 10 insertions(+), 1 deletion(-)\n```\n\n{% note info %}\n\n在`main`中合并分支时，可能出现合并冲突，这是因为分支中文件修改过大，`git`不知道如何将`main`与`branch`两个文件版本合并，此时需手动合并、修改文件，并`commit`\n\n{% endnote %}\n\n* `git branch -d <branch>`删除分支（但不能删除未合并的分支）\n* `git branch --no-merged`查看未合并的分支\n\n\n\n### Git版本回溯(by branch)\n\n我一直是用`git reset --hard <hash_id>`进行版本回溯，但这样会丢失之后的commit，导致版本混乱。现在想到一个方法，可以用分支来进行回溯查看。(当然，如果我们确定要回到某个commit重新工作，并确定要丢失之后的commit，也可以硬重置。)\n\n**查看当前分支**\n\n```shell\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n现在我们正在`sparse`分支上，因为改动较大，想回到稠密版本上查看稠密版本的源码：\n\n```shell\n$ git checkout -b check_dense_version e339fae\n# = git branch check_dense_version e339fae && git checkout check_denser_version\nSwitched to a new branch 'check_dense_version'\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (HEAD -> check_dense_version) 完成稠密\n| * bfbf7ce (sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n这时整个工作目录的文件都变成了`e3319fae`时的版本。在这个版本下，如果我们运行代码导致一些文件发生了修改，工作目录不干净，是不能直接`switch`回`sparse`的：\n\n```shell\n$ git switch sparse \nerror: Your local changes to the following files would be overwritten by checkout:\n        a.txt\nPlease commit your changes or stash them before you switch branches.\nAborting\n```\n\n提示显示如果我们要更换分支，需要`commit` 或者`stash`\n\n* 如果我们不需要提交，可以将文件变更取消掉，再`switch`\n\n```shell\n$ git restore .  #将所有被修改的文件复原\n$ git switch sparse \nSwitched to branch 'sparse'\n* a1ebf62 (master) c2b91\n| * 831fee6 (testing) 87ab2\n|/\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (check_dense_version) 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n```\n\n**`git stash`**\n\n如果我们在`sparse`分支下工作目录有修改未提交，那么切换分支之前需要将修改存入`stash`。\n\n```shell\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n\n$ git branch temp e339fae\n$ git switch temp\nerror: Your local changes to the following files would be overwritten by checkout:\n        a.txt\nPlease commit your changes or stash them before you switch branches.\nAborting\n$ git log --oneline --decorate --graph --all\n* a1ebf62 (master) c2b91\n* 8a4b1b7 f30ab\n* cd426be 34ac2\n* d922070 98ca9\n* e339fae (temp) 完成稠密\n| * bfbf7ce (HEAD -> sparse) sparse v1.0\n| * eb62cc0 完成主体\n|/\n* b6a6d16 3rd commit\n* f64efae 2nd commit\n* 8bd0d82 1st commit\n$ git stash save \"uncommit modify in sparse\"\nSaved working directory and index state On sparse: uncommit modify in sparse\n$ git switch temp\nSwitched to branch 'temp'\n$ git switch sparse \nSwitched to branch 'sparse'\n$ git stash list\nstash@{0}: On sparse: uncommit modify in sparse\n$ git stash pop 0\nOn branch sparse\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (6679d6d8daf8a44c45d289fe82c7aab9a5430eb0)\n```\n\n**git stash相关命令**\n\n1. `git stash save [message]`：将当前工作目录的修改保存到一个stash列表中，并附带一条可选的描述信息。\n2. `git stash list`：列出所有的stash列表。\n3. `git stash apply [stash_id]`：将指定的stash应用到当前工作目录，但不从stash列表中删除。\n4. `git stash pop [stash_id]`：将指定的stash应用到当前工作目录，并从stash列表中删除。\n5. `git stash drop [stash_id]`：从stash列表中删除指定的stash。\n6. `git stash branch [branch_name] [stash_id]`：基于指定的stash创建一个新的分支，并将stash应用到新分支上。\n7. `git stash pop --index [stash_id]`：将指定的stash应用到当前工作目录和索引（暂存区），并从stash列表中删除\n\n\n\n\n\n","slug":"Git学习笔记","published":1,"updated":"2024-03-15T12:39:10.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4da000858te0vey3d63","content":"<p>Git学习笔记 by 《<a href=\"https://git-scm.com/book/zh/v2\">ProGit</a>》</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Git设计理念\"><a href=\"#Git设计理念\" class=\"headerlink\" title=\"Git设计理念\"></a>Git设计理念</h1><ul>\n<li><p><strong>Git直接记录快照，而非差异比较</strong></p>\n</li>\n<li><p>基于差异**(Delta-based)** , 像CSV、Subversion、Perforce。它们如何建立新版本：在版本1的基础上，建立一个记录<code>版本2(新版本)</code>与<code>版本1</code>差异的文件，我们称其为$\\Delta1$ .当我们需要读取版本2时，可以通过**$版本1 + \\Delta1$** 计算得出版本2。</p>\n</li>\n<li><p>Git快照流<strong>，提交后，建立一个新的快照：对</strong>修改过的文件<strong>建立一个新的快照并保存其索引，对</strong>未修改的文件<strong>并不重新存储</strong>，而是<strong>只保留一个链接</strong>指向旧文件</p>\n</li>\n</ul>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/deltas.png\" alt=\"基于差异比较\"></div><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/snapshots.png\" alt=\"数据流-快照\"></div></div></div>\n\n<h1 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h1><h2 id=\"Git工作状态\"><a href=\"#Git工作状态\" class=\"headerlink\" title=\"Git工作状态\"></a>Git工作状态</h2><p><strong>三种状态：</strong><code>已提交(committed)</code>、<code>已修改(modified)</code>、<code>已暂存(staged) </code>, 对应三个阶段：<code>工作区</code>、<code>暂存区</code>、<code>Git目录(仓库)</code>。</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/areas.png\" alt=\"Git三个阶段\"></div><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"文件状态变化周期\"></div></div></div>\n\n<h2 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h2><p>安装Git后添加用户信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email benkangpeng@163.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /c/user/my_project</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init <span class=\"comment\"># 初始化git</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><h3 id=\"获取mannul\"><a href=\"#获取mannul\" class=\"headerlink\" title=\"获取mannul\"></a>获取mannul</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git &lt;verb&gt; -h</span><br></pre></td></tr></table></figure>\n\n<p>ex :  <code>git add -h</code></p>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /my_project/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化Git仓库，此时会在my_project文件夹中生成<code>.git</code>子目录用于存放版本控制文件。注意：<strong>此时还没对项目文件进行跟踪</strong> , 还需要<code>git add</code>跟踪所需文件。</p>\n<p>git add</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git *.c  <span class=\"comment\"># 跟踪所有后缀为.c文件</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git README.md</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git add</code>内涵：</p>\n<p>要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个<strong>多功能</strong>命令：①可以用它开始跟踪新文件，②或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“<u>精确地将内容添加到<strong>下一次提交</strong>中</u>”而不是“将一个文件添加到项目中”要更加合适。 </p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>显示当前文件夹git状况。</p>\n<blockquote>\n<p>On branch master</p>\n<p>No commits yet</p>\n<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   README.md</p>\n<p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>        CONTRIBUTING.md</p>\n</blockquote>\n<p>如上显示的是，<code>README.md</code>已被跟踪，而<code>CONTRIBUTING.md</code>未被跟踪。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> `My project` &gt; README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>On branch master</p>\n<p>No commits yet</p>\n<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   CONTRIBUTING.md<br>        new file:   README.md</p>\n<p>Changes not staged for commit:<br>  (use “git add <file>…” to update what will be committed)<br>  (use “git restore <file>…” to discard changes in working directory)<br>        modified:   README.md</p>\n</blockquote>\n<ul>\n<li>此时<code>CONTRIBUTING.md</code>已经被跟踪</li>\n<li>提示有<code>待提交的修改</code> (changes to be committed) ,  <code>CONTRIBUTING.md</code>和<code>README.md</code>没有提交。(至于changes , 即<code>new file</code> , git将<code>创立文件</code>也视为<code>changes</code>)</li>\n<li><code>Changes not staged for commit</code> ： 我们刚才向<code>README,md</code>写入了<code>My project</code> , 但没有将新版本的<code>README.md</code>添加进入暂存区<code>stage</code> 。可执行操作<code>git add README.md</code></li>\n<li>上面这条再一次体现了<code>git add</code>的双重命令，或将其理解为<code>为文件提交(commit)做好预备</code></li>\n</ul>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>创建<code>.gitignore</code>文件忽略追踪</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> .gitignore</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add .gitignore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">You must add .gitignore into the staging area to make it work .</span></span><br></pre></td></tr></table></figure>\n\n<p>常见语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 忽略所有的 .a 文件</span><br><span class=\"line\">*.a</span><br><span class=\"line\"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"># 忽略任何目录下名为 build 的文件夹</span><br><span class=\"line\">build/</span><br><span class=\"line\"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h3><ul>\n<li><p><code>git diff</code> 查看<strong>同一</strong>文件<code>已暂存</code>与<code>未暂存</code>的两个版本的差异</p>\n<p>eg.  在<code>README.md</code>中添加一行<code>哈哈</code> ，no stage ,  使用命令查看:</p>\n</li>\n</ul>\n<blockquote>\n<p>$ git diff README.md<br>diff –git a&#x2F;README.md b&#x2F;README.md<br>index 6fcadd0..b2f8c83 100644<br>— a&#x2F;README.md<br>+++ b&#x2F;README.md<br>@@ -1 +1,3 @@<br>My project~<br>+<br>+哈哈<br>\\ No newline at end of file</p>\n</blockquote>\n<ul>\n<li><code>git diff --staged</code> 查看<code>已暂存文件</code>与<code>最后一次提交文件</code>的差异.</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git diff --staged README.md</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都<strong>已暂存</strong>起来了， 然后再运行提交命令 <code>git commit</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;the first commit&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>-m</code> : 添加提交信息message</p>\n</li>\n<li><p>“the first commit” : 提交的信息，区分每一次提交做了哪些大体的修改</p>\n</li>\n<li><p><code>git commit -a</code>跳过暂存区，直接将为暂存的文件commit .</p>\n</li>\n</ul>\n<h3 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h3><ul>\n<li>如果你想从磁盘根本删除<code>未暂存的文件</code>:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> PROJECT.md</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从暂存区删除(取消跟踪)文件(仍保存在磁盘里）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> -f PROJECT.md <span class=\"comment\">#-force , 强制删除</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h3><ul>\n<li><code>git mv</code> 移动文件 or 重命名文件。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">mv</span> Project.md PROJECT.md</span></span><br></pre></td></tr></table></figure>\n\n<p>上述命令相当于：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mv</span> Project.md PROJECT.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> Project.md <span class=\"comment\"># 从暂存区移除Project.md</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add PROJECT.md <span class=\"comment\"># 跟踪PROJECT.md</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><ul>\n<li><code>git log</code> 显示所有提交日志</li>\n<li><code>git log -2</code> 显示最近两条日志</li>\n<li><code>git log -p</code> 按补丁格式显示每个提交引入的差异</li>\n<li><code>git log --pretty=oneline</code>显示格式为一行</li>\n<li>此外还有一些参数过滤日志内容，例如<code>--since``--author</code>等，可查文档。</li>\n</ul>\n<h3 id=\"git-commit-–amend\"><a href=\"#git-commit-–amend\" class=\"headerlink\" title=\"git commit –amend\"></a>git commit –amend</h3><ul>\n<li>提交后发现上一次提交有些许瑕疵，例如message写错了、没有跟踪上某个文件 ，但又不想再一次提交，想覆盖上一次提交。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit --amend -m <span class=\"string\">&quot;the right message&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><ul>\n<li>强制重置(删除)某个commit, 例如<code>git reset --hard HEAD~1</code>删除上一次提交。</li>\n<li>取消暂存的文件，例如将<code>CONTRIBUTING.md</code>文件取出&#96;&#96;stageing area<code>,</code>git reset HEAD CONTRIBUTING.md&#96;</li>\n</ul>\n<h3 id=\"文件版本回溯\"><a href=\"#文件版本回溯\" class=\"headerlink\" title=\"*文件版本回溯\"></a>*文件版本回溯</h3><p>案例：<code>commit log</code>如下，自从<code>git clone</code>以来，我提交了<code>version 1</code>和<code>version2</code>.整个项目只有两个文件：<code>check.md</code>和<code>README.md</code>. 我现在想将<code>check.md</code>还原到<code>version 1</code>的状态，但<code>README.md</code>不用还原。(可以理解为我后知后觉意识到<code>version2</code>中对<code>check.md</code>的修改是错误的。)</p>\n<blockquote>\n<p>$ git log –pretty&#x3D;oneline<br>bc03ee1185c084b514ff44a9520ab5d29777b600 (HEAD) version2<br>3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1<br>86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin&#x2F;main, origin&#x2F;HEAD) colle<br>ct some ways to github<br>1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push<br>a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset 3d44a  <span class=\"comment\"># 3d44a是version1的效验码，没写完整</span></span></span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       README.md</span><br><span class=\"line\">M       check.md</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">到version1后,本地文件是没有发生变化的(仍是version2的snapshot),因此会提示`unstaged changes</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br><span class=\"line\">HEAD detached from 86d413d</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">        modified:   README.md</span><br><span class=\"line\">        modified:   check.md</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如何恢复check.md，上面的信息也提示我们了“git restore &lt;file&gt;”</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git restore check.md &amp;&amp; git add README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 (HEAD) version 1</span><br><span class=\"line\">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class=\"line\">ct some ways to github</span><br><span class=\"line\">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class=\"line\">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">END</span></span><br></pre></td></tr></table></figure>\n\n<p><del>但以上做法删除了version2的提交信息。是否存在方法，只进行单个文件的版本回溯呢？现在还没解决……</del></p>\n<h3 id=\"单文件版本回溯\"><a href=\"#单文件版本回溯\" class=\"headerlink\" title=\"*单文件版本回溯\"></a>*单文件版本回溯</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">05bfc3c25ca3ee80247f3ec24b4936d2d7e7d2c1 (HEAD) version3</span><br><span class=\"line\">245a8ddd0c2bfc01c2444930e2ed11b04320d354 version2</span><br><span class=\"line\">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1</span><br><span class=\"line\">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class=\"line\">ct some ways to github</span><br><span class=\"line\">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class=\"line\">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将<code>check.md</code>回溯到版本1，其他文件不变，<code>git checkout &lt;hash&gt; check.md</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout 3d44a28a check.md</span></span><br><span class=\"line\">Updated 1 path from aab7394</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"与远程仓库联动\"><a href=\"#与远程仓库联动\" class=\"headerlink\" title=\"与远程仓库联动\"></a>与远程仓库联动</h3><ul>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code> 添加远程仓库，例如<code>git remote add getback https://github.com/BenkangPeng/GetBack.git</code> , 之后可用名称<code>getback</code>代替网址进行操作。类似于<code>C</code>里的<code>#define</code></li>\n<li><code>git remote -v</code>显示已添加的远程仓库, <code>git remote</code>简略显示。</li>\n<li><code>git remote rename name1 name2</code> 修改仓库<strong>代称</strong>，实际远程仓库(比如Github上的仓库）名称没被修改。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote add getback https://github.com/BenkangPeng/GetBack.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">getback https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class=\"line\">getback https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote rename getback GetBack</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote</span></span><br><span class=\"line\">GetBack</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>git fetch</code> 获取仓库的更新。例如，你在1年以前<code>clone</code>了仓库<code>A</code> , 但在过去一年内，仓库<code>A</code>其他开源贡献者提交了许多内容，甚至产生了分支，<code>git fetch &lt;url&gt;</code>将仓库<code>A</code>的这些更新数据下载到本地，但不会改变本地状态：<strong>不会自动合并分支或修改你当前的工作</strong>。当然你可以手动合并分支、更新本地仓库。</li>\n<li><code>git clone &lt;url&gt;</code>克隆仓库。将<code>&lt;url&gt;</code>对应的仓库克隆到本地，与<code>git fetch</code>不同的是，它将覆盖本地工作。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/BenkangPeng/GetBack.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> GetBack/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">origin  https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class=\"line\">origin  https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">克隆完仓库后，git会自动创建一个origin的远程仓库，对应的就是克隆的仓库url</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">对GetBack进行修改……</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin main</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将本地的main分支(主支)提交到远程仓库origin</span></span><br></pre></td></tr></table></figure>\n\n<p>关于<code>主分支</code> <code>master</code>改为<code>main</code>，还颇有意味。<a href=\"https://github.com/github/renaming\">github&#x2F;renaming</a>        <a href=\"https://zhuanlan.zhihu.com/p/257179306\">乐子 on 知乎</a></p>\n<h3 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h3><ul>\n<li><code>git tag -a &lt;v1.0&gt; -m &quot;version 1.0&quot;</code> 添加<code>annotated tag</code> , <code>git tag v1.0</code>添加<code>lightweight</code>标签。</li>\n<li><code>git tag</code>显示所有标签，<code>git show &lt;v1.0&gt; </code>显示某个标签信息</li>\n<li><code>git tag &lt;version&gt; &lt;verify code&gt;</code>为之前某一次<code>commit</code>补充<code>tag</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">dd0a36aec54a58a9f3427f5f33b1ee97802949b0 (HEAD -&gt; master, tag: v1.0) </span><br><span class=\"line\">3d4057629e1e3515667c7e826817a9ab5a29f306 the second commit</span><br><span class=\"line\">349775b9754e9113e549a9d734707bff38f2e3b4 the first commit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag v0.0 34977</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>默认情况下，<code>git push</code>不会顺带将每一个<code>commit</code> 的<code>tag</code>提交，需手动设置。<code>git push origin &lt;tagname&gt;</code>上传单个<code>tag</code>  ,  <code>git push origin --tags </code>推送所有<code>tags</code></li>\n<li><code>git tag -d &lt;tagname&gt;</code>删除标签，但不会删除远程仓库(&#96;&#96;remote<code>)的</code>tags<code> , 需用</code>git push origin –delete <tagname>&#96;</li>\n</ul>\n<h1 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch testing\t<span class=\"comment\">#创立分支testing</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout testing  <span class=\"comment\">#切换到testing</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">以上两条命令可合并为 git checkout -b testing</span> </span><br><span class=\"line\">Switched to branch &#x27;testing&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">do</span> some changes</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout main  <span class=\"comment\">#回到主分支</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch <span class=\"comment\">#显示所有分支</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>git merge &lt;branch&gt;</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">touch</span> polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">edit polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;touch a new .cpp file&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -b AddFunc2</span></span><br><span class=\"line\">Switched to a new branch &#x27;AddFunc2&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">edit polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -a -m <span class=\"string\">&quot;have added the func2&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout main</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git merge AddFunc2</span></span><br><span class=\"line\">Updating 87ba74e..869b2a7</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> polynorminal.cpp | 11 ++++++++++-</span><br><span class=\"line\"> 1 file changed, 10 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>在<code>main</code>中合并分支时，可能出现合并冲突，这是因为分支中文件修改过大，<code>git</code>不知道如何将<code>main</code>与<code>branch</code>两个文件版本合并，此时需手动合并、修改文件，并<code>commit</code></p>\n</div>\n\n<ul>\n<li><code>git branch -d &lt;branch&gt;</code>删除分支（但不能删除未合并的分支）</li>\n<li><code>git branch --no-merged</code>查看未合并的分支</li>\n</ul>\n<h3 id=\"Git版本回溯-by-branch\"><a href=\"#Git版本回溯-by-branch\" class=\"headerlink\" title=\"Git版本回溯(by branch)\"></a>Git版本回溯(by branch)</h3><p>我一直是用<code>git reset --hard &lt;hash_id&gt;</code>进行版本回溯，但这样会丢失之后的commit，导致版本混乱。现在想到一个方法，可以用分支来进行回溯查看。(当然，如果我们确定要回到某个commit重新工作，并确定要丢失之后的commit，也可以硬重置。)</p>\n<p><strong>查看当前分支</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p>现在我们正在<code>sparse</code>分支上，因为改动较大，想回到稠密版本上查看稠密版本的源码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -b check_dense_version e339fae</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">= git branch check_dense_version e339fae &amp;&amp; git checkout check_denser_version</span></span><br><span class=\"line\">Switched to a new branch &#x27;check_dense_version&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (HEAD -&gt; check_dense_version) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p>这时整个工作目录的文件都变成了<code>e3319fae</code>时的版本。在这个版本下，如果我们运行代码导致一些文件发生了修改，工作目录不干净，是不能直接<code>switch</code>回<code>sparse</code>的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class=\"line\">        a.txt</span><br><span class=\"line\">Please commit your changes or stash them before you switch branches.</span><br><span class=\"line\">Aborting</span><br></pre></td></tr></table></figure>\n\n<p>提示显示如果我们要更换分支，需要<code>commit</code> 或者<code>stash</code></p>\n<ul>\n<li>如果我们不需要提交，可以将文件变更取消掉，再<code>switch</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git restore .  <span class=\"comment\">#将所有被修改的文件复原</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">Switched to branch &#x27;sparse&#x27;</span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (check_dense_version) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>git stash</code></strong></p>\n<p>如果我们在<code>sparse</code>分支下工作目录有修改未提交，那么切换分支之前需要将修改存入<code>stash</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch temp e339fae</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch temp</span></span><br><span class=\"line\">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class=\"line\">        a.txt</span><br><span class=\"line\">Please commit your changes or stash them before you switch branches.</span><br><span class=\"line\">Aborting</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (temp) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash save <span class=\"string\">&quot;uncommit modify in sparse&quot;</span></span></span><br><span class=\"line\">Saved working directory and index state On sparse: uncommit modify in sparse</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch temp</span></span><br><span class=\"line\">Switched to branch &#x27;temp&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">Switched to branch &#x27;sparse&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash list</span></span><br><span class=\"line\">stash@&#123;0&#125;: On sparse: uncommit modify in sparse</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash pop 0</span></span><br><span class=\"line\">On branch sparse</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">        modified:   a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class=\"line\">Dropped refs/stash@&#123;0&#125; (6679d6d8daf8a44c45d289fe82c7aab9a5430eb0)</span><br></pre></td></tr></table></figure>\n\n<p><strong>git stash相关命令</strong></p>\n<ol>\n<li><code>git stash save [message]</code>：将当前工作目录的修改保存到一个stash列表中，并附带一条可选的描述信息。</li>\n<li><code>git stash list</code>：列出所有的stash列表。</li>\n<li><code>git stash apply [stash_id]</code>：将指定的stash应用到当前工作目录，但不从stash列表中删除。</li>\n<li><code>git stash pop [stash_id]</code>：将指定的stash应用到当前工作目录，并从stash列表中删除。</li>\n<li><code>git stash drop [stash_id]</code>：从stash列表中删除指定的stash。</li>\n<li><code>git stash branch [branch_name] [stash_id]</code>：基于指定的stash创建一个新的分支，并将stash应用到新分支上。</li>\n<li><code>git stash pop --index [stash_id]</code>：将指定的stash应用到当前工作目录和索引（暂存区），并从stash列表中删除</li>\n</ol>\n","site":{"data":{}},"length":10749,"excerpt":"<p>Git学习笔记 by 《<a href=\"https://git-scm.com/book/zh/v2\">ProGit</a>》</p>","more":"<h1 id=\"Git设计理念\"><a href=\"#Git设计理念\" class=\"headerlink\" title=\"Git设计理念\"></a>Git设计理念</h1><ul>\n<li><p><strong>Git直接记录快照，而非差异比较</strong></p>\n</li>\n<li><p>基于差异**(Delta-based)** , 像CSV、Subversion、Perforce。它们如何建立新版本：在版本1的基础上，建立一个记录<code>版本2(新版本)</code>与<code>版本1</code>差异的文件，我们称其为$\\Delta1$ .当我们需要读取版本2时，可以通过**$版本1 + \\Delta1$** 计算得出版本2。</p>\n</li>\n<li><p>Git快照流<strong>，提交后，建立一个新的快照：对</strong>修改过的文件<strong>建立一个新的快照并保存其索引，对</strong>未修改的文件<strong>并不重新存储</strong>，而是<strong>只保留一个链接</strong>指向旧文件</p>\n</li>\n</ul>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/deltas.png\" alt=\"基于差异比较\"></div><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/snapshots.png\" alt=\"数据流-快照\"></div></div></div>\n\n<h1 id=\"Git-基础\"><a href=\"#Git-基础\" class=\"headerlink\" title=\"Git 基础\"></a>Git 基础</h1><h2 id=\"Git工作状态\"><a href=\"#Git工作状态\" class=\"headerlink\" title=\"Git工作状态\"></a>Git工作状态</h2><p><strong>三种状态：</strong><code>已提交(committed)</code>、<code>已修改(modified)</code>、<code>已暂存(staged) </code>, 对应三个阶段：<code>工作区</code>、<code>暂存区</code>、<code>Git目录(仓库)</code>。</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/areas.png\" alt=\"Git三个阶段\"></div><div class=\"group-picture-column\"><img src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"文件状态变化周期\"></div></div></div>\n\n<h2 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h2><p>安装Git后添加用户信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email benkangpeng@163.com</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /c/user/my_project</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init <span class=\"comment\"># 初始化git</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h2><h3 id=\"获取mannul\"><a href=\"#获取mannul\" class=\"headerlink\" title=\"获取mannul\"></a>获取mannul</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git &lt;verb&gt; -h</span><br></pre></td></tr></table></figure>\n\n<p>ex :  <code>git add -h</code></p>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /my_project/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化Git仓库，此时会在my_project文件夹中生成<code>.git</code>子目录用于存放版本控制文件。注意：<strong>此时还没对项目文件进行跟踪</strong> , 还需要<code>git add</code>跟踪所需文件。</p>\n<p>git add</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git *.c  <span class=\"comment\"># 跟踪所有后缀为.c文件</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git README.md</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git add</code>内涵：</p>\n<p>要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个<strong>多功能</strong>命令：①可以用它开始跟踪新文件，②或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“<u>精确地将内容添加到<strong>下一次提交</strong>中</u>”而不是“将一个文件添加到项目中”要更加合适。 </p>\n<h3 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h3><p>显示当前文件夹git状况。</p>\n<blockquote>\n<p>On branch master</p>\n<p>No commits yet</p>\n<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   README.md</p>\n<p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>        CONTRIBUTING.md</p>\n</blockquote>\n<p>如上显示的是，<code>README.md</code>已被跟踪，而<code>CONTRIBUTING.md</code>未被跟踪。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> `My project` &gt; README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>On branch master</p>\n<p>No commits yet</p>\n<p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)<br>        new file:   CONTRIBUTING.md<br>        new file:   README.md</p>\n<p>Changes not staged for commit:<br>  (use “git add <file>…” to update what will be committed)<br>  (use “git restore <file>…” to discard changes in working directory)<br>        modified:   README.md</p>\n</blockquote>\n<ul>\n<li>此时<code>CONTRIBUTING.md</code>已经被跟踪</li>\n<li>提示有<code>待提交的修改</code> (changes to be committed) ,  <code>CONTRIBUTING.md</code>和<code>README.md</code>没有提交。(至于changes , 即<code>new file</code> , git将<code>创立文件</code>也视为<code>changes</code>)</li>\n<li><code>Changes not staged for commit</code> ： 我们刚才向<code>README,md</code>写入了<code>My project</code> , 但没有将新版本的<code>README.md</code>添加进入暂存区<code>stage</code> 。可执行操作<code>git add README.md</code></li>\n<li>上面这条再一次体现了<code>git add</code>的双重命令，或将其理解为<code>为文件提交(commit)做好预备</code></li>\n</ul>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>创建<code>.gitignore</code>文件忽略追踪</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">touch</span> .gitignore</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add .gitignore</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">You must add .gitignore into the staging area to make it work .</span></span><br></pre></td></tr></table></figure>\n\n<p>常见语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 忽略所有的 .a 文件</span><br><span class=\"line\">*.a</span><br><span class=\"line\"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"># 忽略任何目录下名为 build 的文件夹</span><br><span class=\"line\">build/</span><br><span class=\"line\"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h3><ul>\n<li><p><code>git diff</code> 查看<strong>同一</strong>文件<code>已暂存</code>与<code>未暂存</code>的两个版本的差异</p>\n<p>eg.  在<code>README.md</code>中添加一行<code>哈哈</code> ，no stage ,  使用命令查看:</p>\n</li>\n</ul>\n<blockquote>\n<p>$ git diff README.md<br>diff –git a&#x2F;README.md b&#x2F;README.md<br>index 6fcadd0..b2f8c83 100644<br>— a&#x2F;README.md<br>+++ b&#x2F;README.md<br>@@ -1 +1,3 @@<br>My project~<br>+<br>+哈哈<br>\\ No newline at end of file</p>\n</blockquote>\n<ul>\n<li><code>git diff --staged</code> 查看<code>已暂存文件</code>与<code>最后一次提交文件</code>的差异.</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git diff --staged README.md</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都<strong>已暂存</strong>起来了， 然后再运行提交命令 <code>git commit</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;the first commit&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>-m</code> : 添加提交信息message</p>\n</li>\n<li><p>“the first commit” : 提交的信息，区分每一次提交做了哪些大体的修改</p>\n</li>\n<li><p><code>git commit -a</code>跳过暂存区，直接将为暂存的文件commit .</p>\n</li>\n</ul>\n<h3 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h3><ul>\n<li>如果你想从磁盘根本删除<code>未暂存的文件</code>:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> PROJECT.md</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从暂存区删除(取消跟踪)文件(仍保存在磁盘里）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> -f PROJECT.md <span class=\"comment\">#-force , 强制删除</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h3><ul>\n<li><code>git mv</code> 移动文件 or 重命名文件。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">mv</span> Project.md PROJECT.md</span></span><br></pre></td></tr></table></figure>\n\n<p>上述命令相当于：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mv</span> Project.md PROJECT.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> Project.md <span class=\"comment\"># 从暂存区移除Project.md</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add PROJECT.md <span class=\"comment\"># 跟踪PROJECT.md</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><ul>\n<li><code>git log</code> 显示所有提交日志</li>\n<li><code>git log -2</code> 显示最近两条日志</li>\n<li><code>git log -p</code> 按补丁格式显示每个提交引入的差异</li>\n<li><code>git log --pretty=oneline</code>显示格式为一行</li>\n<li>此外还有一些参数过滤日志内容，例如<code>--since``--author</code>等，可查文档。</li>\n</ul>\n<h3 id=\"git-commit-–amend\"><a href=\"#git-commit-–amend\" class=\"headerlink\" title=\"git commit –amend\"></a>git commit –amend</h3><ul>\n<li>提交后发现上一次提交有些许瑕疵，例如message写错了、没有跟踪上某个文件 ，但又不想再一次提交，想覆盖上一次提交。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit --amend -m <span class=\"string\">&quot;the right message&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><ul>\n<li>强制重置(删除)某个commit, 例如<code>git reset --hard HEAD~1</code>删除上一次提交。</li>\n<li>取消暂存的文件，例如将<code>CONTRIBUTING.md</code>文件取出&#96;&#96;stageing area<code>,</code>git reset HEAD CONTRIBUTING.md&#96;</li>\n</ul>\n<h3 id=\"文件版本回溯\"><a href=\"#文件版本回溯\" class=\"headerlink\" title=\"*文件版本回溯\"></a>*文件版本回溯</h3><p>案例：<code>commit log</code>如下，自从<code>git clone</code>以来，我提交了<code>version 1</code>和<code>version2</code>.整个项目只有两个文件：<code>check.md</code>和<code>README.md</code>. 我现在想将<code>check.md</code>还原到<code>version 1</code>的状态，但<code>README.md</code>不用还原。(可以理解为我后知后觉意识到<code>version2</code>中对<code>check.md</code>的修改是错误的。)</p>\n<blockquote>\n<p>$ git log –pretty&#x3D;oneline<br>bc03ee1185c084b514ff44a9520ab5d29777b600 (HEAD) version2<br>3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1<br>86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin&#x2F;main, origin&#x2F;HEAD) colle<br>ct some ways to github<br>1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push<br>a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset 3d44a  <span class=\"comment\"># 3d44a是version1的效验码，没写完整</span></span></span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       README.md</span><br><span class=\"line\">M       check.md</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">到version1后,本地文件是没有发生变化的(仍是version2的snapshot),因此会提示`unstaged changes</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br><span class=\"line\">HEAD detached from 86d413d</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">        modified:   README.md</span><br><span class=\"line\">        modified:   check.md</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如何恢复check.md，上面的信息也提示我们了“git restore &lt;file&gt;”</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git restore check.md &amp;&amp; git add README.md</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 (HEAD) version 1</span><br><span class=\"line\">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class=\"line\">ct some ways to github</span><br><span class=\"line\">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class=\"line\">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">END</span></span><br></pre></td></tr></table></figure>\n\n<p><del>但以上做法删除了version2的提交信息。是否存在方法，只进行单个文件的版本回溯呢？现在还没解决……</del></p>\n<h3 id=\"单文件版本回溯\"><a href=\"#单文件版本回溯\" class=\"headerlink\" title=\"*单文件版本回溯\"></a>*单文件版本回溯</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">05bfc3c25ca3ee80247f3ec24b4936d2d7e7d2c1 (HEAD) version3</span><br><span class=\"line\">245a8ddd0c2bfc01c2444930e2ed11b04320d354 version2</span><br><span class=\"line\">3d44a28a78ffba2eab8d0718e34c3f7463cfa2a1 version 1</span><br><span class=\"line\">86d413d821c361c0245859fddd9c6258f698f16f (tag: v1.0, origin/main, origin/HEAD) colle</span><br><span class=\"line\">ct some ways to github</span><br><span class=\"line\">1bfa40c95f5b2a5a086421889e60321ef056fbc0 (tag: v0.1) the first commit by git push</span><br><span class=\"line\">a41ee579c6756e653d380b2e08426ea74f77841d (tag: v0.0) Create README.md</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将<code>check.md</code>回溯到版本1，其他文件不变，<code>git checkout &lt;hash&gt; check.md</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout 3d44a28a check.md</span></span><br><span class=\"line\">Updated 1 path from aab7394</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"与远程仓库联动\"><a href=\"#与远程仓库联动\" class=\"headerlink\" title=\"与远程仓库联动\"></a>与远程仓库联动</h3><ul>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code> 添加远程仓库，例如<code>git remote add getback https://github.com/BenkangPeng/GetBack.git</code> , 之后可用名称<code>getback</code>代替网址进行操作。类似于<code>C</code>里的<code>#define</code></li>\n<li><code>git remote -v</code>显示已添加的远程仓库, <code>git remote</code>简略显示。</li>\n<li><code>git remote rename name1 name2</code> 修改仓库<strong>代称</strong>，实际远程仓库(比如Github上的仓库）名称没被修改。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote add getback https://github.com/BenkangPeng/GetBack.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">getback https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class=\"line\">getback https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote rename getback GetBack</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote</span></span><br><span class=\"line\">GetBack</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>git fetch</code> 获取仓库的更新。例如，你在1年以前<code>clone</code>了仓库<code>A</code> , 但在过去一年内，仓库<code>A</code>其他开源贡献者提交了许多内容，甚至产生了分支，<code>git fetch &lt;url&gt;</code>将仓库<code>A</code>的这些更新数据下载到本地，但不会改变本地状态：<strong>不会自动合并分支或修改你当前的工作</strong>。当然你可以手动合并分支、更新本地仓库。</li>\n<li><code>git clone &lt;url&gt;</code>克隆仓库。将<code>&lt;url&gt;</code>对应的仓库克隆到本地，与<code>git fetch</code>不同的是，它将覆盖本地工作。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/BenkangPeng/GetBack.git</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> GetBack/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">origin  https://github.com/BenkangPeng/GetBack.git (fetch)</span><br><span class=\"line\">origin  https://github.com/BenkangPeng/GetBack.git (push)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">克隆完仓库后，git会自动创建一个origin的远程仓库，对应的就是克隆的仓库url</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">对GetBack进行修改……</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin main</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将本地的main分支(主支)提交到远程仓库origin</span></span><br></pre></td></tr></table></figure>\n\n<p>关于<code>主分支</code> <code>master</code>改为<code>main</code>，还颇有意味。<a href=\"https://github.com/github/renaming\">github&#x2F;renaming</a>        <a href=\"https://zhuanlan.zhihu.com/p/257179306\">乐子 on 知乎</a></p>\n<h3 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h3><ul>\n<li><code>git tag -a &lt;v1.0&gt; -m &quot;version 1.0&quot;</code> 添加<code>annotated tag</code> , <code>git tag v1.0</code>添加<code>lightweight</code>标签。</li>\n<li><code>git tag</code>显示所有标签，<code>git show &lt;v1.0&gt; </code>显示某个标签信息</li>\n<li><code>git tag &lt;version&gt; &lt;verify code&gt;</code>为之前某一次<code>commit</code>补充<code>tag</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --pretty=oneline</span></span><br><span class=\"line\">dd0a36aec54a58a9f3427f5f33b1ee97802949b0 (HEAD -&gt; master, tag: v1.0) </span><br><span class=\"line\">3d4057629e1e3515667c7e826817a9ab5a29f306 the second commit</span><br><span class=\"line\">349775b9754e9113e549a9d734707bff38f2e3b4 the first commit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag v0.0 34977</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>默认情况下，<code>git push</code>不会顺带将每一个<code>commit</code> 的<code>tag</code>提交，需手动设置。<code>git push origin &lt;tagname&gt;</code>上传单个<code>tag</code>  ,  <code>git push origin --tags </code>推送所有<code>tags</code></li>\n<li><code>git tag -d &lt;tagname&gt;</code>删除标签，但不会删除远程仓库(&#96;&#96;remote<code>)的</code>tags<code> , 需用</code>git push origin –delete <tagname>&#96;</li>\n</ul>\n<h1 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch testing\t<span class=\"comment\">#创立分支testing</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout testing  <span class=\"comment\">#切换到testing</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">以上两条命令可合并为 git checkout -b testing</span> </span><br><span class=\"line\">Switched to branch &#x27;testing&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">do</span> some changes</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout main  <span class=\"comment\">#回到主分支</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch <span class=\"comment\">#显示所有分支</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>git merge &lt;branch&gt;</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">touch</span> polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">edit polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;touch a new .cpp file&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -b AddFunc2</span></span><br><span class=\"line\">Switched to a new branch &#x27;AddFunc2&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">edit polynorminal.cpp</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -a -m <span class=\"string\">&quot;have added the func2&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout main</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git merge AddFunc2</span></span><br><span class=\"line\">Updating 87ba74e..869b2a7</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> polynorminal.cpp | 11 ++++++++++-</span><br><span class=\"line\"> 1 file changed, 10 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>在<code>main</code>中合并分支时，可能出现合并冲突，这是因为分支中文件修改过大，<code>git</code>不知道如何将<code>main</code>与<code>branch</code>两个文件版本合并，此时需手动合并、修改文件，并<code>commit</code></p>\n</div>\n\n<ul>\n<li><code>git branch -d &lt;branch&gt;</code>删除分支（但不能删除未合并的分支）</li>\n<li><code>git branch --no-merged</code>查看未合并的分支</li>\n</ul>\n<h3 id=\"Git版本回溯-by-branch\"><a href=\"#Git版本回溯-by-branch\" class=\"headerlink\" title=\"Git版本回溯(by branch)\"></a>Git版本回溯(by branch)</h3><p>我一直是用<code>git reset --hard &lt;hash_id&gt;</code>进行版本回溯，但这样会丢失之后的commit，导致版本混乱。现在想到一个方法，可以用分支来进行回溯查看。(当然，如果我们确定要回到某个commit重新工作，并确定要丢失之后的commit，也可以硬重置。)</p>\n<p><strong>查看当前分支</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p>现在我们正在<code>sparse</code>分支上，因为改动较大，想回到稠密版本上查看稠密版本的源码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -b check_dense_version e339fae</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">= git branch check_dense_version e339fae &amp;&amp; git checkout check_denser_version</span></span><br><span class=\"line\">Switched to a new branch &#x27;check_dense_version&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (HEAD -&gt; check_dense_version) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p>这时整个工作目录的文件都变成了<code>e3319fae</code>时的版本。在这个版本下，如果我们运行代码导致一些文件发生了修改，工作目录不干净，是不能直接<code>switch</code>回<code>sparse</code>的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class=\"line\">        a.txt</span><br><span class=\"line\">Please commit your changes or stash them before you switch branches.</span><br><span class=\"line\">Aborting</span><br></pre></td></tr></table></figure>\n\n<p>提示显示如果我们要更换分支，需要<code>commit</code> 或者<code>stash</code></p>\n<ul>\n<li>如果我们不需要提交，可以将文件变更取消掉，再<code>switch</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git restore .  <span class=\"comment\">#将所有被修改的文件复原</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">Switched to branch &#x27;sparse&#x27;</span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">| * 831fee6 (testing) 87ab2</span><br><span class=\"line\">|/</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (check_dense_version) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>git stash</code></strong></p>\n<p>如果我们在<code>sparse</code>分支下工作目录有修改未提交，那么切换分支之前需要将修改存入<code>stash</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git branch temp e339fae</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch temp</span></span><br><span class=\"line\">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class=\"line\">        a.txt</span><br><span class=\"line\">Please commit your changes or stash them before you switch branches.</span><br><span class=\"line\">Aborting</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> --oneline --decorate --graph --all</span></span><br><span class=\"line\">* a1ebf62 (master) c2b91</span><br><span class=\"line\">* 8a4b1b7 f30ab</span><br><span class=\"line\">* cd426be 34ac2</span><br><span class=\"line\">* d922070 98ca9</span><br><span class=\"line\">* e339fae (temp) 完成稠密</span><br><span class=\"line\">| * bfbf7ce (HEAD -&gt; sparse) sparse v1.0</span><br><span class=\"line\">| * eb62cc0 完成主体</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b6a6d16 3rd commit</span><br><span class=\"line\">* f64efae 2nd commit</span><br><span class=\"line\">* 8bd0d82 1st commit</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash save <span class=\"string\">&quot;uncommit modify in sparse&quot;</span></span></span><br><span class=\"line\">Saved working directory and index state On sparse: uncommit modify in sparse</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch temp</span></span><br><span class=\"line\">Switched to branch &#x27;temp&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git switch sparse</span> </span><br><span class=\"line\">Switched to branch &#x27;sparse&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash list</span></span><br><span class=\"line\">stash@&#123;0&#125;: On sparse: uncommit modify in sparse</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash pop 0</span></span><br><span class=\"line\">On branch sparse</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">        modified:   a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class=\"line\">Dropped refs/stash@&#123;0&#125; (6679d6d8daf8a44c45d289fe82c7aab9a5430eb0)</span><br></pre></td></tr></table></figure>\n\n<p><strong>git stash相关命令</strong></p>\n<ol>\n<li><code>git stash save [message]</code>：将当前工作目录的修改保存到一个stash列表中，并附带一条可选的描述信息。</li>\n<li><code>git stash list</code>：列出所有的stash列表。</li>\n<li><code>git stash apply [stash_id]</code>：将指定的stash应用到当前工作目录，但不从stash列表中删除。</li>\n<li><code>git stash pop [stash_id]</code>：将指定的stash应用到当前工作目录，并从stash列表中删除。</li>\n<li><code>git stash drop [stash_id]</code>：从stash列表中删除指定的stash。</li>\n<li><code>git stash branch [branch_name] [stash_id]</code>：基于指定的stash创建一个新的分支，并将stash应用到新分支上。</li>\n<li><code>git stash pop --index [stash_id]</code>：将指定的stash应用到当前工作目录和索引（暂存区），并从stash列表中删除</li>\n</ol>"},{"title":"Gdb学习笔记","abbrlink":"a06a32e","date":"2022-10-26T15:26:49.000Z","_content":"\n以前学过一个C的调试工具`gdb`，重新看了一下资料复习。资料是`LinuxC`书上的一个章节，当然这本书也是十分推荐。[Download Pdf](https://link.zhihu.com/?target=http%3A//staff.ustc.edu.cn/~guoyan/os12/LinuxC.pdf)    [View Online](https://akaedu.github.io/book/)  [相关讨论](https://www.zhihu.com/question/34069391)\n\n<!-- more -->\n\n# 单步执行\n\n```cpp\n//示例程序\n#include <stdio.h>\nint add_range(int low, int high)\n{\n    int i, sum;\n    for (i = low; i <= high; i++)\n        sum = sum + i;\n    return sum;\n}\nint main(void)\n{\n    int result[100];\n    result[0] = add_range(1, 10);\n    result[1] = add_range(1, 100);\n    printf(\"result[0]=%d\\nresult[1]=%d\\n\", result[0], result[1]);\n    return 0;\n}\n```\n\n* **生成并进入`gdb`**\n\n```shell\n$ g++ -g test.cpp -o main \n$ gdb main\n```\n\n* **单步执行**\n  * `list`列出源程序. `list 23`表示从第23行开始列出源程序。简写为`l`\n  * `回车`重复执行上一次的指令\n  * `n` 表示`next`下一步\n  * `s` ， `step`, 进入被调用函数\n\n```shell\n$ start # 开始运行程序\nThread 1 hit Temporary breakpoint 1, main () at test.cpp:12\n12          result[0] = add_range(1, 10);\n$ n # next单步运行到下一步\n(gdb) n\n13          result[1] = add_range(1, 100);\n#如果我们要进入子函数add_range查看运行过程呢  -> `s`表示step\n(gdb) s\nadd_range (low=1, high=100) at test.cpp:5\n5           for (i = low; i <= high; i++)\n```\n\n* **打印参数值**\n  * `i locals`显示当前栈帧变量信息\n  * `p <variable>` 打印变量\n  * `set var <variable> = <data>`修改变量\n\n```shell\nThread 1 hit Temporary breakpoint 1, main () at test.cpp:12\n12          result[0] = add_range(1, 10);\n(gdb) s\nadd_range (low=1, high=10) at test.cpp:5\n5           for (i = low; i <= high; i++)\n(gdb) i locals  # info local 显示当前栈帧中的变量\ni = 32760\nsum = 501247388\n#此处就可以发现程序的问题：没有赋初值\n(gdb) n\n6               sum = sum + i;\n(gdb) i locals\ni = 1\nsum = 501247388\n(gdb) set var sum = 0 # 修改sum的值\n(gdb) n\n5           for (i = low; i <= high; i++)\n(gdb) p sum # print sum\n$1 = 1 # $1是临时变量，临时显示\n(gdb)\n```\n\n* **栈帧**\n  * `bt`显示栈帧\n  * `f <numble>`选中、进入栈帧\n\n```cpp\nThread 1 hit Temporary breakpoint 1, main () at test.c:10\n10          int result[5] = {0};\n(gdb) n\n11          result[0] = Sum(1 , 10) ;\n(gdb) s\nSum (low=1, high=10) at test.c:3\n3           int i = 0 , sum = 0 ;\n(gdb) n\n4           for(i = low ; i <= high ; i++){\n(gdb)\n5               sum += i ;\n(gdb) p result\nNo symbol \"result\" in current context.\n// 当前栈帧没有\"result\"\n(gdb) bt // 显示当前栈帧 backtrace\n#0  Sum (low=1, high=10) at test.c:5\n#1  0x00000000004015c2 in main () at test.c:11\n(gdb) f 1 // frame 1 , 1为bt列出来的栈帧编号\n#1  0x00000000004015c2 in main () at test.c:11\n11          result[0] = Sum(1 , 10) ;\n(gdb) p result\n$1 = {0, 0, 0, 0, 0}\n```\n\n\n\n# 断点调试\n\n```c\n#include <stdio.h>\nint main(void)\n{\n    int sum = 0, i = 0;\n    char input[8] ;\n    while (1) {\n        scanf(\"%s\", input);\n        for (i = 0; input[i] != '\\0'; i++)\n        sum = sum*10 + input[i] - '0';\n        printf(\"input=%d\\n\", sum);\n    }\n    return 0;\n}\n```\n\n以上C程序的功能是：输入``字符型``的数字(`最高七位`），输出对应的``整数``，如此循环。\n\n但又是类似的结果，第一次输出正确，之后的输出错误。(其实一眼能看出sum没有置零)\n\n接下来进行`debug`:\n\n* `display <variable>` 设置变量显示 ， `undisplay <variable>`关闭某个变量显示\n\n```cpp\n4           int sum = 0, i = 0;\n(gdb) n\n7               scanf(\"%s\", input);\n(gdb)\n1234\n8               for (i = 0; input[i] != '\\0'; i++)\n(gdb) display sum\t//显示变量\n1: sum = 0\n(gdb) display input[i]\n2: input[i] = 49 '1'\n(gdb) n\n9               sum = sum*10 + input[i] - '0';\n1: sum = 0\n2: input[i] = 49 '1'\n(gdb) n\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 1\n2: input[i] = 49 '1'\n(gdb)\n9               sum = sum*10 + input[i] - '0';\n1: sum = 1\n2: input[i] = 50 '2'\n(gdb)\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 12\n2: input[i] = 50 '2'\n```\n\n\n\n**就这样跟踪了几个循环似乎没有错误。如果我们不像这样重复跟踪，可以设置断点，让程序自然运行到我们想要停止的位置。**\n\n* `b <lineNumber>`设置断点 , `b` :  `breakpoint` \n* `c` 连续执行，直到断点处 `continue`\n\n```shell\n(gdb) c\nContinuing.\n[New Thread 18408.0x4c14]\ninput=1234\n\nThread 1 hit Breakpoint 2, main () at test.c:7\n7               scanf(\"%s\", input);\n1: sum = 1234\n2: input[i] = 0 '\\000'\n(gdb) n\n5678\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 1234\n(gdb) n\n9               sum = sum*10 + input[i] - '0';\n1: sum = 1234\n```\n\n**如此便找到问题所在：下一次循环中，sum会在上一次循环输入的基础上进行累加**\n\n只要在每一次输入输出结束后将sum置零即可，如下：\n\n```c\n#include <stdio.h>\nint main(void)\n{\n    int sum = 0, i = 0;\n    char input[8] ;\n    while (1) {\n        scanf(\"%s\", input);\n        for (i = 0; input[i] != '\\0'; i++)\n        sum = sum*10 + input[i] - '0';\n        printf(\"input=%d\\n\", sum);\n        sum = 0 ;\n    }\n    return 0;\n}\n```\n\n* `i b` 查看所有断点信息`info breakpoints`\n* `delete breakpoints <num>` 删除所指的编号断点\n* `disable breakpoints <num>`禁用所指编号断点\n* `enable breakpoints <num>`\n* `run` 从头开始连续而非单步执行程序\n* ` b <num> if <command>` 设立触发断点的条件，例如`b 7 if sum != 0`\n\n\n\n# 观察点\n\n依然是之前的例子：\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main(){\n   char input[5] ;\n   int sum ;\n   while(1){\n    sum = 0 ;\n    scanf(\"%s\" , input) ;\n    for(int i = 0 ; input[i] != '\\0' ; i++){\n        sum = sum * 10 + input[i] - '0' ;\n    }\n    cout << \"input = \" << sum << endl ;\n   } \n   return 0 ;\n}\n```\n\n**如果我们没有注意到数组长度，输入了长度大于4的字符串，`input`产生了越界会发生什么**\n\n```shell\nThread 1 hit Temporary breakpoint 6, main () at test.cpp:7\n7           sum = 0 ;\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\ninput = 123407\n```\n\n**我们发现输出也是不对的 ， 但 ：**\n\n```shell\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) p input\n$13 = \"12345\"\n(gdb) x/8b input # 以byte为单位，打印input后8个byte地址的信息\n0x61fe13:       49      50      51      52      53      0       0       0\n```\n\n**我们输入`12345`后，查看input内的值，发现按照程序逻辑，`for`循环也会在`i = 5`处结束**\n\n**结果应该仍为12345** ,  **莫非`input[5]有变化？`**\n\n* `watch <varible>`观察点变量被访问修改时，程序中断\n\n```shell\nThread 1 hit Temporary breakpoint 11, main () at test.cpp:7\n7           sum = 0 ;\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) i watchpoints\nNo watchpoints.\n(gdb) watch input [5]\nHardware watchpoint 12: input [5]\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 0 '\\000'\nNew value = 1 '\\001'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 1 '\\001'\nNew value = 2 '\\002'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 2 '\\002'\nNew value = 3 '\\003'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n```\n\n**我们发现每一次for循环运行时`input[5]`会＋1 ， 可知 i = 5 时 ， sum = 12345 * 10  + 5 - 48  = 123407**\n\n**也就是说`input[5]对应的就是i` , 换句话说，i的地址是 &input[5]**\n\n**修改**：\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main(){\n   char input[5] ;\n   int sum ;\n   while(1){\n    sum = 0 ;\n    scanf(\"%s\" , input) ;\n    for(int i = 0 ; input[i] != '\\0' ; i++){\n        if(input[i] < '0' || input[i] > '9'){\n            cout << \"invalid input !\" << endl ;\n            sum = -1 ;\n            break;\n        }\n        sum = sum * 10 + input[i] - '0' ;\n    }\n    cout << \"input = \" << sum << endl ;\n   } \n   return 0 ;\n}\n```","source":"_posts/Gdb学习笔记.md","raw":"---\ntitle: Gdb学习笔记\nabbrlink: a06a32e\ndate: 2022-10-26 23:26:49\ntags:\n---\n\n以前学过一个C的调试工具`gdb`，重新看了一下资料复习。资料是`LinuxC`书上的一个章节，当然这本书也是十分推荐。[Download Pdf](https://link.zhihu.com/?target=http%3A//staff.ustc.edu.cn/~guoyan/os12/LinuxC.pdf)    [View Online](https://akaedu.github.io/book/)  [相关讨论](https://www.zhihu.com/question/34069391)\n\n<!-- more -->\n\n# 单步执行\n\n```cpp\n//示例程序\n#include <stdio.h>\nint add_range(int low, int high)\n{\n    int i, sum;\n    for (i = low; i <= high; i++)\n        sum = sum + i;\n    return sum;\n}\nint main(void)\n{\n    int result[100];\n    result[0] = add_range(1, 10);\n    result[1] = add_range(1, 100);\n    printf(\"result[0]=%d\\nresult[1]=%d\\n\", result[0], result[1]);\n    return 0;\n}\n```\n\n* **生成并进入`gdb`**\n\n```shell\n$ g++ -g test.cpp -o main \n$ gdb main\n```\n\n* **单步执行**\n  * `list`列出源程序. `list 23`表示从第23行开始列出源程序。简写为`l`\n  * `回车`重复执行上一次的指令\n  * `n` 表示`next`下一步\n  * `s` ， `step`, 进入被调用函数\n\n```shell\n$ start # 开始运行程序\nThread 1 hit Temporary breakpoint 1, main () at test.cpp:12\n12          result[0] = add_range(1, 10);\n$ n # next单步运行到下一步\n(gdb) n\n13          result[1] = add_range(1, 100);\n#如果我们要进入子函数add_range查看运行过程呢  -> `s`表示step\n(gdb) s\nadd_range (low=1, high=100) at test.cpp:5\n5           for (i = low; i <= high; i++)\n```\n\n* **打印参数值**\n  * `i locals`显示当前栈帧变量信息\n  * `p <variable>` 打印变量\n  * `set var <variable> = <data>`修改变量\n\n```shell\nThread 1 hit Temporary breakpoint 1, main () at test.cpp:12\n12          result[0] = add_range(1, 10);\n(gdb) s\nadd_range (low=1, high=10) at test.cpp:5\n5           for (i = low; i <= high; i++)\n(gdb) i locals  # info local 显示当前栈帧中的变量\ni = 32760\nsum = 501247388\n#此处就可以发现程序的问题：没有赋初值\n(gdb) n\n6               sum = sum + i;\n(gdb) i locals\ni = 1\nsum = 501247388\n(gdb) set var sum = 0 # 修改sum的值\n(gdb) n\n5           for (i = low; i <= high; i++)\n(gdb) p sum # print sum\n$1 = 1 # $1是临时变量，临时显示\n(gdb)\n```\n\n* **栈帧**\n  * `bt`显示栈帧\n  * `f <numble>`选中、进入栈帧\n\n```cpp\nThread 1 hit Temporary breakpoint 1, main () at test.c:10\n10          int result[5] = {0};\n(gdb) n\n11          result[0] = Sum(1 , 10) ;\n(gdb) s\nSum (low=1, high=10) at test.c:3\n3           int i = 0 , sum = 0 ;\n(gdb) n\n4           for(i = low ; i <= high ; i++){\n(gdb)\n5               sum += i ;\n(gdb) p result\nNo symbol \"result\" in current context.\n// 当前栈帧没有\"result\"\n(gdb) bt // 显示当前栈帧 backtrace\n#0  Sum (low=1, high=10) at test.c:5\n#1  0x00000000004015c2 in main () at test.c:11\n(gdb) f 1 // frame 1 , 1为bt列出来的栈帧编号\n#1  0x00000000004015c2 in main () at test.c:11\n11          result[0] = Sum(1 , 10) ;\n(gdb) p result\n$1 = {0, 0, 0, 0, 0}\n```\n\n\n\n# 断点调试\n\n```c\n#include <stdio.h>\nint main(void)\n{\n    int sum = 0, i = 0;\n    char input[8] ;\n    while (1) {\n        scanf(\"%s\", input);\n        for (i = 0; input[i] != '\\0'; i++)\n        sum = sum*10 + input[i] - '0';\n        printf(\"input=%d\\n\", sum);\n    }\n    return 0;\n}\n```\n\n以上C程序的功能是：输入``字符型``的数字(`最高七位`），输出对应的``整数``，如此循环。\n\n但又是类似的结果，第一次输出正确，之后的输出错误。(其实一眼能看出sum没有置零)\n\n接下来进行`debug`:\n\n* `display <variable>` 设置变量显示 ， `undisplay <variable>`关闭某个变量显示\n\n```cpp\n4           int sum = 0, i = 0;\n(gdb) n\n7               scanf(\"%s\", input);\n(gdb)\n1234\n8               for (i = 0; input[i] != '\\0'; i++)\n(gdb) display sum\t//显示变量\n1: sum = 0\n(gdb) display input[i]\n2: input[i] = 49 '1'\n(gdb) n\n9               sum = sum*10 + input[i] - '0';\n1: sum = 0\n2: input[i] = 49 '1'\n(gdb) n\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 1\n2: input[i] = 49 '1'\n(gdb)\n9               sum = sum*10 + input[i] - '0';\n1: sum = 1\n2: input[i] = 50 '2'\n(gdb)\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 12\n2: input[i] = 50 '2'\n```\n\n\n\n**就这样跟踪了几个循环似乎没有错误。如果我们不像这样重复跟踪，可以设置断点，让程序自然运行到我们想要停止的位置。**\n\n* `b <lineNumber>`设置断点 , `b` :  `breakpoint` \n* `c` 连续执行，直到断点处 `continue`\n\n```shell\n(gdb) c\nContinuing.\n[New Thread 18408.0x4c14]\ninput=1234\n\nThread 1 hit Breakpoint 2, main () at test.c:7\n7               scanf(\"%s\", input);\n1: sum = 1234\n2: input[i] = 0 '\\000'\n(gdb) n\n5678\n8               for (i = 0; input[i] != '\\0'; i++)\n1: sum = 1234\n(gdb) n\n9               sum = sum*10 + input[i] - '0';\n1: sum = 1234\n```\n\n**如此便找到问题所在：下一次循环中，sum会在上一次循环输入的基础上进行累加**\n\n只要在每一次输入输出结束后将sum置零即可，如下：\n\n```c\n#include <stdio.h>\nint main(void)\n{\n    int sum = 0, i = 0;\n    char input[8] ;\n    while (1) {\n        scanf(\"%s\", input);\n        for (i = 0; input[i] != '\\0'; i++)\n        sum = sum*10 + input[i] - '0';\n        printf(\"input=%d\\n\", sum);\n        sum = 0 ;\n    }\n    return 0;\n}\n```\n\n* `i b` 查看所有断点信息`info breakpoints`\n* `delete breakpoints <num>` 删除所指的编号断点\n* `disable breakpoints <num>`禁用所指编号断点\n* `enable breakpoints <num>`\n* `run` 从头开始连续而非单步执行程序\n* ` b <num> if <command>` 设立触发断点的条件，例如`b 7 if sum != 0`\n\n\n\n# 观察点\n\n依然是之前的例子：\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main(){\n   char input[5] ;\n   int sum ;\n   while(1){\n    sum = 0 ;\n    scanf(\"%s\" , input) ;\n    for(int i = 0 ; input[i] != '\\0' ; i++){\n        sum = sum * 10 + input[i] - '0' ;\n    }\n    cout << \"input = \" << sum << endl ;\n   } \n   return 0 ;\n}\n```\n\n**如果我们没有注意到数组长度，输入了长度大于4的字符串，`input`产生了越界会发生什么**\n\n```shell\nThread 1 hit Temporary breakpoint 6, main () at test.cpp:7\n7           sum = 0 ;\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\ninput = 123407\n```\n\n**我们发现输出也是不对的 ， 但 ：**\n\n```shell\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) p input\n$13 = \"12345\"\n(gdb) x/8b input # 以byte为单位，打印input后8个byte地址的信息\n0x61fe13:       49      50      51      52      53      0       0       0\n```\n\n**我们输入`12345`后，查看input内的值，发现按照程序逻辑，`for`循环也会在`i = 5`处结束**\n\n**结果应该仍为12345** ,  **莫非`input[5]有变化？`**\n\n* `watch <varible>`观察点变量被访问修改时，程序中断\n\n```shell\nThread 1 hit Temporary breakpoint 11, main () at test.cpp:7\n7           sum = 0 ;\n(gdb) n\n8           scanf(\"%s\" , input) ;\n(gdb)\n12345\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) i watchpoints\nNo watchpoints.\n(gdb) watch input [5]\nHardware watchpoint 12: input [5]\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 0 '\\000'\nNew value = 1 '\\001'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 1 '\\001'\nNew value = 2 '\\002'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n(gdb) c\nContinuing.\n\nThread 1 hit Hardware watchpoint 12: input [5]\n\nOld value = 2 '\\002'\nNew value = 3 '\\003'\n0x0000000000401607 in main () at test.cpp:9\n9           for(int i = 0 ; input[i] != '\\0' ; i++){\n```\n\n**我们发现每一次for循环运行时`input[5]`会＋1 ， 可知 i = 5 时 ， sum = 12345 * 10  + 5 - 48  = 123407**\n\n**也就是说`input[5]对应的就是i` , 换句话说，i的地址是 &input[5]**\n\n**修改**：\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main(){\n   char input[5] ;\n   int sum ;\n   while(1){\n    sum = 0 ;\n    scanf(\"%s\" , input) ;\n    for(int i = 0 ; input[i] != '\\0' ; i++){\n        if(input[i] < '0' || input[i] > '9'){\n            cout << \"invalid input !\" << endl ;\n            sum = -1 ;\n            break;\n        }\n        sum = sum * 10 + input[i] - '0' ;\n    }\n    cout << \"input = \" << sum << endl ;\n   } \n   return 0 ;\n}\n```","slug":"Gdb学习笔记","published":1,"updated":"2024-03-15T12:39:02.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4db000b58te5mmq0owl","content":"<p>以前学过一个C的调试工具<code>gdb</code>，重新看了一下资料复习。资料是<code>LinuxC</code>书上的一个章节，当然这本书也是十分推荐。<a href=\"https://link.zhihu.com/?target=http://staff.ustc.edu.cn/~guoyan/os12/LinuxC.pdf\">Download Pdf</a>    <a href=\"https://akaedu.github.io/book/\">View Online</a>  <a href=\"https://www.zhihu.com/question/34069391\">相关讨论</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add_range</span><span class=\"params\">(<span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = low; i &lt;= high; i++)</span><br><span class=\"line\">        sum = sum + i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result[<span class=\"number\">100</span>];</span><br><span class=\"line\">    result[<span class=\"number\">0</span>] = <span class=\"built_in\">add_range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    result[<span class=\"number\">1</span>] = <span class=\"built_in\">add_range</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result[0]=%d\\nresult[1]=%d\\n&quot;</span>, result[<span class=\"number\">0</span>], result[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>生成并进入<code>gdb</code></strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">g++ -g test.cpp -o main</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gdb main</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>单步执行</strong><ul>\n<li><code>list</code>列出源程序. <code>list 23</code>表示从第23行开始列出源程序。简写为<code>l</code></li>\n<li><code>回车</code>重复执行上一次的指令</li>\n<li><code>n</code> 表示<code>next</code>下一步</li>\n<li><code>s</code> ， <code>step</code>, 进入被调用函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">start <span class=\"comment\"># 开始运行程序</span></span></span><br><span class=\"line\">Thread 1 hit Temporary breakpoint 1, main () at test.cpp:12</span><br><span class=\"line\">12          result[0] = add_range(1, 10);</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">n <span class=\"comment\"># next单步运行到下一步</span></span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">13          result[1] = add_range(1, 100);</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果我们要进入子函数add_range查看运行过程呢  -&gt; `s`表示step</span></span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">add_range (low=1, high=100) at test.cpp:5</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>打印参数值</strong><ul>\n<li><code>i locals</code>显示当前栈帧变量信息</li>\n<li><code>p &lt;variable&gt;</code> 打印变量</li>\n<li><code>set var &lt;variable&gt; = &lt;data&gt;</code>修改变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 1, main () at test.cpp:12</span><br><span class=\"line\">12          result[0] = add_range(1, 10);</span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">add_range (low=1, high=10) at test.cpp:5</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br><span class=\"line\">(gdb) i locals  # info local 显示当前栈帧中的变量</span><br><span class=\"line\">i = 32760</span><br><span class=\"line\">sum = 501247388</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">此处就可以发现程序的问题：没有赋初值</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">6               sum = sum + i;</span><br><span class=\"line\">(gdb) i locals</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">sum = 501247388</span><br><span class=\"line\">(gdb) set var sum = 0 # 修改sum的值</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br><span class=\"line\">(gdb) p sum # print sum</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">1 = 1 <span class=\"comment\"># $1是临时变量，临时显示</span></span></span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>栈帧</strong><ul>\n<li><code>bt</code>显示栈帧</li>\n<li><code>f &lt;numble&gt;</code>选中、进入栈帧</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread <span class=\"number\">1</span> hit Temporary breakpoint <span class=\"number\">1</span>, <span class=\"built_in\">main</span> () at test.c:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>          <span class=\"type\">int</span> result[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">11</span>          result[<span class=\"number\">0</span>] = <span class=\"built_in\">Sum</span>(<span class=\"number\">1</span> , <span class=\"number\">10</span>) ;</span><br><span class=\"line\">(gdb) <span class=\"function\">s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Sum</span> <span class=\"params\">(low=<span class=\"number\">1</span>, high=<span class=\"number\">10</span>)</span> at test.c:<span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"number\">3</span>           int i =</span> <span class=\"number\">0</span> , sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">4</span>           <span class=\"keyword\">for</span>(i = low ; i &lt;= high ; i++)&#123;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">5</span>               sum += i ;</span><br><span class=\"line\">(gdb) p result</span><br><span class=\"line\">No symbol <span class=\"string\">&quot;result&quot;</span> in current context.</span><br><span class=\"line\"><span class=\"comment\">// 当前栈帧没有&quot;result&quot;</span></span><br><span class=\"line\">(gdb) bt <span class=\"comment\">// 显示当前栈帧 backtrace</span></span><br><span class=\"line\">#<span class=\"number\">0</span>  <span class=\"built_in\">Sum</span> (low=<span class=\"number\">1</span>, high=<span class=\"number\">10</span>) at test.c:<span class=\"number\">5</span></span><br><span class=\"line\">#<span class=\"number\">1</span>  <span class=\"number\">0x00000000004015c2</span> <span class=\"function\">in <span class=\"title\">main</span> <span class=\"params\">()</span> at test.c:<span class=\"number\">11</span></span></span><br><span class=\"line\"><span class=\"function\">(gdb) f <span class=\"number\">1</span> // frame <span class=\"number\">1</span> , <span class=\"number\">1</span>为bt列出来的栈帧编号</span></span><br><span class=\"line\"><span class=\"function\">#<span class=\"number\">1</span>  <span class=\"number\">0x00000000004015c2</span> in main () at test.c:<span class=\"number\">11</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"number\">11</span>          result[<span class=\"number\">0</span>] =</span> <span class=\"built_in\">Sum</span>(<span class=\"number\">1</span> , <span class=\"number\">10</span>) ;</span><br><span class=\"line\">(gdb) p result</span><br><span class=\"line\">$<span class=\"number\">1</span> = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">8</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">        sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input=%d\\n&quot;</span>, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上C程序的功能是：输入<code>字符型</code>的数字(<code>最高七位</code>），输出对应的<code>整数</code>，如此循环。</p>\n<p>但又是类似的结果，第一次输出正确，之后的输出错误。(其实一眼能看出sum没有置零)</p>\n<p>接下来进行<code>debug</code>:</p>\n<ul>\n<li><code>display &lt;variable&gt;</code> 设置变量显示 ， <code>undisplay &lt;variable&gt;</code>关闭某个变量显示</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span>           <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">7</span>               <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">(gdb) display sum\t<span class=\"comment\">//显示变量</span></span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">0</span></span><br><span class=\"line\">(gdb) display input[i]</span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">9</span>               sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">9</span>               sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">50</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">50</span> <span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>就这样跟踪了几个循环似乎没有错误。如果我们不像这样重复跟踪，可以设置断点，让程序自然运行到我们想要停止的位置。</strong></p>\n<ul>\n<li><code>b &lt;lineNumber&gt;</code>设置断点 , <code>b</code> :  <code>breakpoint</code> </li>\n<li><code>c</code> 连续执行，直到断点处 <code>continue</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">[New Thread 18408.0x4c14]</span><br><span class=\"line\">input=1234</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Breakpoint 2, main () at test.c:7</span><br><span class=\"line\">7               scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">1: sum = 1234</span><br><span class=\"line\">2: input[i] = 0 &#x27;\\000&#x27;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">5678</span><br><span class=\"line\">8               for (i = 0; input[i] != &#x27;\\0&#x27;; i++)</span><br><span class=\"line\">1: sum = 1234</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               sum = sum*10 + input[i] - &#x27;0&#x27;;</span><br><span class=\"line\">1: sum = 1234</span><br></pre></td></tr></table></figure>\n\n<p><strong>如此便找到问题所在：下一次循环中，sum会在上一次循环输入的基础上进行累加</strong></p>\n<p>只要在每一次输入输出结束后将sum置零即可，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">8</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">        sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input=%d\\n&quot;</span>, sum);</span><br><span class=\"line\">        sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>i b</code> 查看所有断点信息<code>info breakpoints</code></li>\n<li><code>delete breakpoints &lt;num&gt;</code> 删除所指的编号断点</li>\n<li><code>disable breakpoints &lt;num&gt;</code>禁用所指编号断点</li>\n<li><code>enable breakpoints &lt;num&gt;</code></li>\n<li><code>run</code> 从头开始连续而非单步执行程序</li>\n<li><code> b &lt;num&gt; if &lt;command&gt;</code> 设立触发断点的条件，例如<code>b 7 if sum != 0</code></li>\n</ul>\n<h1 id=\"观察点\"><a href=\"#观察点\" class=\"headerlink\" title=\"观察点\"></a>观察点</h1><p>依然是之前的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> input[<span class=\"number\">5</span>] ;</span><br><span class=\"line\">   <span class=\"type\">int</span> sum ;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span> , input) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span> ; i++)&#123;</span><br><span class=\"line\">        sum = sum * <span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input = &quot;</span> &lt;&lt; sum &lt;&lt; endl ;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果我们没有注意到数组长度，输入了长度大于4的字符串，<code>input</code>产生了越界会发生什么</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 6, main () at test.cpp:7</span><br><span class=\"line\">7           sum = 0 ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">input = 123407</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们发现输出也是不对的 ， 但 ：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) p input</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">13 = <span class=\"string\">&quot;12345&quot;</span></span></span><br><span class=\"line\">(gdb) x/8b input # 以byte为单位，打印input后8个byte地址的信息</span><br><span class=\"line\">0x61fe13:       49      50      51      52      53      0       0       0</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们输入<code>12345</code>后，查看input内的值，发现按照程序逻辑，<code>for</code>循环也会在<code>i = 5</code>处结束</strong></p>\n<p><strong>结果应该仍为12345</strong> ,  <strong>莫非<code>input[5]有变化？</code></strong></p>\n<ul>\n<li><code>watch &lt;varible&gt;</code>观察点变量被访问修改时，程序中断</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 11, main () at test.cpp:7</span><br><span class=\"line\">7           sum = 0 ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) i watchpoints</span><br><span class=\"line\">No watchpoints.</span><br><span class=\"line\">(gdb) watch input [5]</span><br><span class=\"line\">Hardware watchpoint 12: input [5]</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 0 &#x27;\\000&#x27;</span><br><span class=\"line\">New value = 1 &#x27;\\001&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 1 &#x27;\\001&#x27;</span><br><span class=\"line\">New value = 2 &#x27;\\002&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 2 &#x27;\\002&#x27;</span><br><span class=\"line\">New value = 3 &#x27;\\003&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们发现每一次for循环运行时<code>input[5]</code>会＋1 ， 可知 i &#x3D; 5 时 ， sum &#x3D; 12345 * 10  + 5 - 48  &#x3D; 123407</strong></p>\n<p><strong>也就是说<code>input[5]对应的就是i</code> , 换句话说，i的地址是 &amp;input[5]</strong></p>\n<p><strong>修改</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> input[<span class=\"number\">5</span>] ;</span><br><span class=\"line\">   <span class=\"type\">int</span> sum ;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span> , input) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span> ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(input[i] &lt; <span class=\"string\">&#x27;0&#x27;</span> || input[i] &gt; <span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;invalid input !&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">            sum = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum = sum * <span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input = &quot;</span> &lt;&lt; sum &lt;&lt; endl ;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":5961,"excerpt":"<p>以前学过一个C的调试工具<code>gdb</code>，重新看了一下资料复习。资料是<code>LinuxC</code>书上的一个章节，当然这本书也是十分推荐。<a href=\"https://link.zhihu.com/?target=http://staff.ustc.edu.cn/~guoyan/os12/LinuxC.pdf\">Download Pdf</a>    <a href=\"https://akaedu.github.io/book/\">View Online</a>  <a href=\"https://www.zhihu.com/question/34069391\">相关讨论</a></p>","more":"<h1 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例程序</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">add_range</span><span class=\"params\">(<span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = low; i &lt;= high; i++)</span><br><span class=\"line\">        sum = sum + i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> result[<span class=\"number\">100</span>];</span><br><span class=\"line\">    result[<span class=\"number\">0</span>] = <span class=\"built_in\">add_range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    result[<span class=\"number\">1</span>] = <span class=\"built_in\">add_range</span>(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;result[0]=%d\\nresult[1]=%d\\n&quot;</span>, result[<span class=\"number\">0</span>], result[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>生成并进入<code>gdb</code></strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">g++ -g test.cpp -o main</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gdb main</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>单步执行</strong><ul>\n<li><code>list</code>列出源程序. <code>list 23</code>表示从第23行开始列出源程序。简写为<code>l</code></li>\n<li><code>回车</code>重复执行上一次的指令</li>\n<li><code>n</code> 表示<code>next</code>下一步</li>\n<li><code>s</code> ， <code>step</code>, 进入被调用函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">start <span class=\"comment\"># 开始运行程序</span></span></span><br><span class=\"line\">Thread 1 hit Temporary breakpoint 1, main () at test.cpp:12</span><br><span class=\"line\">12          result[0] = add_range(1, 10);</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">n <span class=\"comment\"># next单步运行到下一步</span></span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">13          result[1] = add_range(1, 100);</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果我们要进入子函数add_range查看运行过程呢  -&gt; `s`表示step</span></span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">add_range (low=1, high=100) at test.cpp:5</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>打印参数值</strong><ul>\n<li><code>i locals</code>显示当前栈帧变量信息</li>\n<li><code>p &lt;variable&gt;</code> 打印变量</li>\n<li><code>set var &lt;variable&gt; = &lt;data&gt;</code>修改变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 1, main () at test.cpp:12</span><br><span class=\"line\">12          result[0] = add_range(1, 10);</span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">add_range (low=1, high=10) at test.cpp:5</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br><span class=\"line\">(gdb) i locals  # info local 显示当前栈帧中的变量</span><br><span class=\"line\">i = 32760</span><br><span class=\"line\">sum = 501247388</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">此处就可以发现程序的问题：没有赋初值</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">6               sum = sum + i;</span><br><span class=\"line\">(gdb) i locals</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">sum = 501247388</span><br><span class=\"line\">(gdb) set var sum = 0 # 修改sum的值</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">5           for (i = low; i &lt;= high; i++)</span><br><span class=\"line\">(gdb) p sum # print sum</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">1 = 1 <span class=\"comment\"># $1是临时变量，临时显示</span></span></span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>栈帧</strong><ul>\n<li><code>bt</code>显示栈帧</li>\n<li><code>f &lt;numble&gt;</code>选中、进入栈帧</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread <span class=\"number\">1</span> hit Temporary breakpoint <span class=\"number\">1</span>, <span class=\"built_in\">main</span> () at test.c:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>          <span class=\"type\">int</span> result[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">11</span>          result[<span class=\"number\">0</span>] = <span class=\"built_in\">Sum</span>(<span class=\"number\">1</span> , <span class=\"number\">10</span>) ;</span><br><span class=\"line\">(gdb) <span class=\"function\">s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Sum</span> <span class=\"params\">(low=<span class=\"number\">1</span>, high=<span class=\"number\">10</span>)</span> at test.c:<span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"number\">3</span>           int i =</span> <span class=\"number\">0</span> , sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">4</span>           <span class=\"keyword\">for</span>(i = low ; i &lt;= high ; i++)&#123;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">5</span>               sum += i ;</span><br><span class=\"line\">(gdb) p result</span><br><span class=\"line\">No symbol <span class=\"string\">&quot;result&quot;</span> in current context.</span><br><span class=\"line\"><span class=\"comment\">// 当前栈帧没有&quot;result&quot;</span></span><br><span class=\"line\">(gdb) bt <span class=\"comment\">// 显示当前栈帧 backtrace</span></span><br><span class=\"line\">#<span class=\"number\">0</span>  <span class=\"built_in\">Sum</span> (low=<span class=\"number\">1</span>, high=<span class=\"number\">10</span>) at test.c:<span class=\"number\">5</span></span><br><span class=\"line\">#<span class=\"number\">1</span>  <span class=\"number\">0x00000000004015c2</span> <span class=\"function\">in <span class=\"title\">main</span> <span class=\"params\">()</span> at test.c:<span class=\"number\">11</span></span></span><br><span class=\"line\"><span class=\"function\">(gdb) f <span class=\"number\">1</span> // frame <span class=\"number\">1</span> , <span class=\"number\">1</span>为bt列出来的栈帧编号</span></span><br><span class=\"line\"><span class=\"function\">#<span class=\"number\">1</span>  <span class=\"number\">0x00000000004015c2</span> in main () at test.c:<span class=\"number\">11</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"number\">11</span>          result[<span class=\"number\">0</span>] =</span> <span class=\"built_in\">Sum</span>(<span class=\"number\">1</span> , <span class=\"number\">10</span>) ;</span><br><span class=\"line\">(gdb) p result</span><br><span class=\"line\">$<span class=\"number\">1</span> = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"断点调试\"><a href=\"#断点调试\" class=\"headerlink\" title=\"断点调试\"></a>断点调试</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">8</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">        sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input=%d\\n&quot;</span>, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上C程序的功能是：输入<code>字符型</code>的数字(<code>最高七位</code>），输出对应的<code>整数</code>，如此循环。</p>\n<p>但又是类似的结果，第一次输出正确，之后的输出错误。(其实一眼能看出sum没有置零)</p>\n<p>接下来进行<code>debug</code>:</p>\n<ul>\n<li><code>display &lt;variable&gt;</code> 设置变量显示 ， <code>undisplay &lt;variable&gt;</code>关闭某个变量显示</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span>           <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">7</span>               <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">(gdb) display sum\t<span class=\"comment\">//显示变量</span></span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">0</span></span><br><span class=\"line\">(gdb) display input[i]</span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">9</span>               sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">49</span> <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">9</span>               sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">50</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"><span class=\"number\">8</span>               <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\"><span class=\"number\">1</span>: sum = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">2</span>: input[i] = <span class=\"number\">50</span> <span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>就这样跟踪了几个循环似乎没有错误。如果我们不像这样重复跟踪，可以设置断点，让程序自然运行到我们想要停止的位置。</strong></p>\n<ul>\n<li><code>b &lt;lineNumber&gt;</code>设置断点 , <code>b</code> :  <code>breakpoint</code> </li>\n<li><code>c</code> 连续执行，直到断点处 <code>continue</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">[New Thread 18408.0x4c14]</span><br><span class=\"line\">input=1234</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Breakpoint 2, main () at test.c:7</span><br><span class=\"line\">7               scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">1: sum = 1234</span><br><span class=\"line\">2: input[i] = 0 &#x27;\\000&#x27;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">5678</span><br><span class=\"line\">8               for (i = 0; input[i] != &#x27;\\0&#x27;; i++)</span><br><span class=\"line\">1: sum = 1234</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               sum = sum*10 + input[i] - &#x27;0&#x27;;</span><br><span class=\"line\">1: sum = 1234</span><br></pre></td></tr></table></figure>\n\n<p><strong>如此便找到问题所在：下一次循环中，sum会在上一次循环输入的基础上进行累加</strong></p>\n<p>只要在每一次输入输出结束后将sum置零即可，如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> input[<span class=\"number\">8</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++)</span><br><span class=\"line\">        sum = sum*<span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input=%d\\n&quot;</span>, sum);</span><br><span class=\"line\">        sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>i b</code> 查看所有断点信息<code>info breakpoints</code></li>\n<li><code>delete breakpoints &lt;num&gt;</code> 删除所指的编号断点</li>\n<li><code>disable breakpoints &lt;num&gt;</code>禁用所指编号断点</li>\n<li><code>enable breakpoints &lt;num&gt;</code></li>\n<li><code>run</code> 从头开始连续而非单步执行程序</li>\n<li><code> b &lt;num&gt; if &lt;command&gt;</code> 设立触发断点的条件，例如<code>b 7 if sum != 0</code></li>\n</ul>\n<h1 id=\"观察点\"><a href=\"#观察点\" class=\"headerlink\" title=\"观察点\"></a>观察点</h1><p>依然是之前的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> input[<span class=\"number\">5</span>] ;</span><br><span class=\"line\">   <span class=\"type\">int</span> sum ;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span> , input) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span> ; i++)&#123;</span><br><span class=\"line\">        sum = sum * <span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input = &quot;</span> &lt;&lt; sum &lt;&lt; endl ;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果我们没有注意到数组长度，输入了长度大于4的字符串，<code>input</code>产生了越界会发生什么</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 6, main () at test.cpp:7</span><br><span class=\"line\">7           sum = 0 ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">input = 123407</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们发现输出也是不对的 ， 但 ：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) p input</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">13 = <span class=\"string\">&quot;12345&quot;</span></span></span><br><span class=\"line\">(gdb) x/8b input # 以byte为单位，打印input后8个byte地址的信息</span><br><span class=\"line\">0x61fe13:       49      50      51      52      53      0       0       0</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们输入<code>12345</code>后，查看input内的值，发现按照程序逻辑，<code>for</code>循环也会在<code>i = 5</code>处结束</strong></p>\n<p><strong>结果应该仍为12345</strong> ,  <strong>莫非<code>input[5]有变化？</code></strong></p>\n<ul>\n<li><code>watch &lt;varible&gt;</code>观察点变量被访问修改时，程序中断</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 hit Temporary breakpoint 11, main () at test.cpp:7</span><br><span class=\"line\">7           sum = 0 ;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">8           scanf(&quot;%s&quot; , input) ;</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">12345</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) i watchpoints</span><br><span class=\"line\">No watchpoints.</span><br><span class=\"line\">(gdb) watch input [5]</span><br><span class=\"line\">Hardware watchpoint 12: input [5]</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 0 &#x27;\\000&#x27;</span><br><span class=\"line\">New value = 1 &#x27;\\001&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 1 &#x27;\\001&#x27;</span><br><span class=\"line\">New value = 2 &#x27;\\002&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 1 hit Hardware watchpoint 12: input [5]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 2 &#x27;\\002&#x27;</span><br><span class=\"line\">New value = 3 &#x27;\\003&#x27;</span><br><span class=\"line\">0x0000000000401607 in main () at test.cpp:9</span><br><span class=\"line\">9           for(int i = 0 ; input[i] != &#x27;\\0&#x27; ; i++)&#123;</span><br></pre></td></tr></table></figure>\n\n<p><strong>我们发现每一次for循环运行时<code>input[5]</code>会＋1 ， 可知 i &#x3D; 5 时 ， sum &#x3D; 12345 * 10  + 5 - 48  &#x3D; 123407</strong></p>\n<p><strong>也就是说<code>input[5]对应的就是i</code> , 换句话说，i的地址是 &amp;input[5]</strong></p>\n<p><strong>修改</strong>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> input[<span class=\"number\">5</span>] ;</span><br><span class=\"line\">   <span class=\"type\">int</span> sum ;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span> , input) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; input[i] != <span class=\"string\">&#x27;\\0&#x27;</span> ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(input[i] &lt; <span class=\"string\">&#x27;0&#x27;</span> || input[i] &gt; <span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;invalid input !&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">            sum = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum = sum * <span class=\"number\">10</span> + input[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;input = &quot;</span> &lt;&lt; sum &lt;&lt; endl ;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Deploy your website","abbrlink":"f1f00c7b","date":"2021-10-01T08:00:00.000Z","_content":"\n### 摘要\n\n我们在使用[Hexo+NexT搭建](https://benkangpeng.gitee.io/2023/09/18/Hello%20Hexo-NEXT/)好个人博客后,只能在本地端口访问，其他人无法访问(有一种内网穿透的方法可以将电脑端口暴露，从而达到”上线“的功能。尚未了解    找到了:[Here](https://www.bilibili.com/video/BV1z14y1r7Fc/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745))。\n\n我们可以使用`Github pages` 和`Gitee pages` 上线网站从而白嫖一台只能搭载`静态网页`的服务器  （<del>是不是有种白嫖的快乐</del>）以下是上线步骤。\n\n<!-- more -->\n\n### Github pages\n\n#### 主要步骤\n\n* **注册GitHub、新建仓库**\n\n  新建一个仓库，注意仓库名一定是用户名与github.io的组合，例如`benkangpeng.github.io`\n\n* **生成ssh-key**\n\n  如果未配置过git ，未获得`ssh key` 的话，需要配置`git`并获得`ssh key`(我理解为电脑硬件、邮箱对应的编码。通过该编码可以找到唯一的计算机，`GitHub`就是通过`ssh key`与计算机进行加密数据传输的。计算机网络没学 ，一定得补补:cry:)\n\n  ```shell\n  git config --global user.name \"benkangpeng\"\n  git config --global user.email \"benkangpeng@163.com\"\n  ssh-keygen -t rsa -C \"benkangpeng@163.com\"  # 之后三次回车\n  ```\n\n  根据终端输出的信息找到`id_rsa.pub`的位置,或者通过以下命令查看：\n\n  ```shell\n  cat ~/.ssh/id_rsa.pub\n  ```\n\n* **Connect computer with GitHub by ssh-key**\n\n  **将ssh-key加入到github上**：点击`个人头像进入个人空间` → `SSH and GPG keys`→ `New SSH key `,Title随意(最好标明是哪台电脑），`Key`粘上刚才复制的`id_rsa.pub` ，添加成功后会收到Github的邮件。\n\n  **尝试本机与Github通信**：\n\n  ```shell\n  ssh -T git@github.com\n  ```\n\n  > Hi BenkangPeng! You've successfully authenticated, but GitHub does not provide shell access.\n\n  若显示以上结果，则表明通信成功。\n\n* 修改`Hexo` 配置文件\n\n  `_config.yml `文件中找到`deploy`一项，修改为\n\n  ```yml\n  deploy:\n    type: 'git'\n    repository: https://github.com/benkangpeng/benkangpeng.github.io.git\n  ```\n\n  其中，`type`表示`the type of site deploying` , 即网站发布的方式，我们通过`git`发布\n\n  `repository`则填写之前建立的仓库的地址，后加上后缀`.git`\n\n* 安装`hexo部署插件`(最好在根目录安装插件)\n\n  ```shell\n  benkangpeng@DESKTOP-FR84659 MINGW64 /d/Hexo/blog (master)\n  npm install hexo-deployer-git --save\n  ```\n\n* 将文件上传到`Github`\n\n  ```shell\n  hexo clean\n  hexo g  # hexo generate\n  hexo d  # hexo deploy\n  ```\n\n  此时相关文件已上传到对应的仓库中，但如果此时你输入`https:\\\\benkangpeng.github.io`结果是`404`，原因是未将该仓库设置为`GitHub pages` .\n\n  在仓库页面右边的侧边栏中有一个`设置`的齿轮图标，点击→勾选`Use your GitHub Pages website`→`Save Changes`\n\n* **大功告成**，输入`https:\\\\benkangpeng.github.io`查看网页吧！\n\n\n\n### Gitee pages\n\n因为Gitee pages的部署与Github类似(<del>毕竟抄来的</del>)，以下步骤较为简略，可参考着Github的配置步骤进行。\n\n#### 主要步骤:\n\n* **Gitee注册账号**并实名认证(对，就是这么狗:dog:)\n\n* **新建仓库**\n\n  此处一定要注意仓库名与用户名一致，例如我的是`benkangpeng`,与Github不同(GitHub是benkangpeng.github.io)\n\n* **Git全局设置、获取ssh-key**(同上面的Github)\n\n  已经设置过全局设置、获取过ssh-key，则无需进行操作。重复操作会改变计算机的ssh-key，与之前在Github绑定的ssh-key不同了，导致Github与计算机无法通信。最优解：固定计算机的ssh-key不变，Github、Gitee共用一个。此后也不要变更ssh-key.\n\n  ```shell\n  git config --global user.name \"benkangpeng\"\n  git config --global user.email \"benkangpeng@163.com\"\n  ssh-keygen -t rsa -C \"benkangpeng@163.com\"  # 之后三次回车\n  ```\n\n  根据终端输出的信息找到`id_rsa.pub`的位置,或者通过以下命令查看：\n\n  ```shell\n  cat ~/.ssh/id_rsa.pub\n  ```\n\n* **SSH-key填入Gitee**\n\n  点头像→设置→SSH公钥\n\n* **第一次通信**\n\n  ```shell\n  ssh -T git@gitee.com\n  ```\n\n  > Hi BenkangPeng(@benkangpeng)! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n  <del>咱也不懂`does not provide shell access`是啥意思，Gitee垃圾就完事了</del>\n\n* **修改`hexo`  `_config.yml`**\n\n  ```yml\n  deploy:\n    type: 'git'\n    #repository: https://github.com/benkangpeng/benkangpeng.github.io.git\n    repository: https://gitee.com/benkangpeng/benkangpeng.git\n  ```\n\n* **安装hexo部署插件**(安装过的无需重复安装)\n\n  ```shell\n  npm install hexo-deployer-git --save\n  ```\n\n* **部署、上传到Gitee**\n\n  ```shell\n  hexo g\n  hexo d\n  ```\n\n  此时可以看到相关文件已上传到Gitee仓库中。\n\n* **将仓库设置为Gitee Pages**\n\n  ①进入仓库→上面的边框 `管理`→向下滑，勾选`开源`→`保存`\n\n  ②进入仓库→上面的边框 `服务`→`Gitee Pages` → 勾选`强制使用HTTPS`→`启动`\n\n  {% note info %}\n\n  dog东西，今天才发现`gitee pages`不像`github pages` ： `github pages` 仓库中一有更新，延迟一会后便可访问到更新后的网页，而`gitee pages`更新仓库后，还要手动执行上面的第②步更新部署......或者你可以买`gitee pages pro` , ￥99/年......特色……\n\n  {endnote}\n\n  <del>据说强制HTTPS网站要安全一些，没学计算机网络的憨憨不懂</del>\n\n* **大功告成**\n\n  <a href=\"https:\\\\benkangpeng.gitee.io\"></a>\n\n### 参考资料(详细视频)\n\n感谢大佬：[超详细！0成本搭建个人网站！！【建议收藏】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)","source":"_posts/Deploy-your-website.md","raw":"---\ntitle: Deploy your website\nabbrlink: f1f00c7b\ndate: 2021-10-01 16:00:00\ntags: Web\n---\n\n### 摘要\n\n我们在使用[Hexo+NexT搭建](https://benkangpeng.gitee.io/2023/09/18/Hello%20Hexo-NEXT/)好个人博客后,只能在本地端口访问，其他人无法访问(有一种内网穿透的方法可以将电脑端口暴露，从而达到”上线“的功能。尚未了解    找到了:[Here](https://www.bilibili.com/video/BV1z14y1r7Fc/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745))。\n\n我们可以使用`Github pages` 和`Gitee pages` 上线网站从而白嫖一台只能搭载`静态网页`的服务器  （<del>是不是有种白嫖的快乐</del>）以下是上线步骤。\n\n<!-- more -->\n\n### Github pages\n\n#### 主要步骤\n\n* **注册GitHub、新建仓库**\n\n  新建一个仓库，注意仓库名一定是用户名与github.io的组合，例如`benkangpeng.github.io`\n\n* **生成ssh-key**\n\n  如果未配置过git ，未获得`ssh key` 的话，需要配置`git`并获得`ssh key`(我理解为电脑硬件、邮箱对应的编码。通过该编码可以找到唯一的计算机，`GitHub`就是通过`ssh key`与计算机进行加密数据传输的。计算机网络没学 ，一定得补补:cry:)\n\n  ```shell\n  git config --global user.name \"benkangpeng\"\n  git config --global user.email \"benkangpeng@163.com\"\n  ssh-keygen -t rsa -C \"benkangpeng@163.com\"  # 之后三次回车\n  ```\n\n  根据终端输出的信息找到`id_rsa.pub`的位置,或者通过以下命令查看：\n\n  ```shell\n  cat ~/.ssh/id_rsa.pub\n  ```\n\n* **Connect computer with GitHub by ssh-key**\n\n  **将ssh-key加入到github上**：点击`个人头像进入个人空间` → `SSH and GPG keys`→ `New SSH key `,Title随意(最好标明是哪台电脑），`Key`粘上刚才复制的`id_rsa.pub` ，添加成功后会收到Github的邮件。\n\n  **尝试本机与Github通信**：\n\n  ```shell\n  ssh -T git@github.com\n  ```\n\n  > Hi BenkangPeng! You've successfully authenticated, but GitHub does not provide shell access.\n\n  若显示以上结果，则表明通信成功。\n\n* 修改`Hexo` 配置文件\n\n  `_config.yml `文件中找到`deploy`一项，修改为\n\n  ```yml\n  deploy:\n    type: 'git'\n    repository: https://github.com/benkangpeng/benkangpeng.github.io.git\n  ```\n\n  其中，`type`表示`the type of site deploying` , 即网站发布的方式，我们通过`git`发布\n\n  `repository`则填写之前建立的仓库的地址，后加上后缀`.git`\n\n* 安装`hexo部署插件`(最好在根目录安装插件)\n\n  ```shell\n  benkangpeng@DESKTOP-FR84659 MINGW64 /d/Hexo/blog (master)\n  npm install hexo-deployer-git --save\n  ```\n\n* 将文件上传到`Github`\n\n  ```shell\n  hexo clean\n  hexo g  # hexo generate\n  hexo d  # hexo deploy\n  ```\n\n  此时相关文件已上传到对应的仓库中，但如果此时你输入`https:\\\\benkangpeng.github.io`结果是`404`，原因是未将该仓库设置为`GitHub pages` .\n\n  在仓库页面右边的侧边栏中有一个`设置`的齿轮图标，点击→勾选`Use your GitHub Pages website`→`Save Changes`\n\n* **大功告成**，输入`https:\\\\benkangpeng.github.io`查看网页吧！\n\n\n\n### Gitee pages\n\n因为Gitee pages的部署与Github类似(<del>毕竟抄来的</del>)，以下步骤较为简略，可参考着Github的配置步骤进行。\n\n#### 主要步骤:\n\n* **Gitee注册账号**并实名认证(对，就是这么狗:dog:)\n\n* **新建仓库**\n\n  此处一定要注意仓库名与用户名一致，例如我的是`benkangpeng`,与Github不同(GitHub是benkangpeng.github.io)\n\n* **Git全局设置、获取ssh-key**(同上面的Github)\n\n  已经设置过全局设置、获取过ssh-key，则无需进行操作。重复操作会改变计算机的ssh-key，与之前在Github绑定的ssh-key不同了，导致Github与计算机无法通信。最优解：固定计算机的ssh-key不变，Github、Gitee共用一个。此后也不要变更ssh-key.\n\n  ```shell\n  git config --global user.name \"benkangpeng\"\n  git config --global user.email \"benkangpeng@163.com\"\n  ssh-keygen -t rsa -C \"benkangpeng@163.com\"  # 之后三次回车\n  ```\n\n  根据终端输出的信息找到`id_rsa.pub`的位置,或者通过以下命令查看：\n\n  ```shell\n  cat ~/.ssh/id_rsa.pub\n  ```\n\n* **SSH-key填入Gitee**\n\n  点头像→设置→SSH公钥\n\n* **第一次通信**\n\n  ```shell\n  ssh -T git@gitee.com\n  ```\n\n  > Hi BenkangPeng(@benkangpeng)! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n  <del>咱也不懂`does not provide shell access`是啥意思，Gitee垃圾就完事了</del>\n\n* **修改`hexo`  `_config.yml`**\n\n  ```yml\n  deploy:\n    type: 'git'\n    #repository: https://github.com/benkangpeng/benkangpeng.github.io.git\n    repository: https://gitee.com/benkangpeng/benkangpeng.git\n  ```\n\n* **安装hexo部署插件**(安装过的无需重复安装)\n\n  ```shell\n  npm install hexo-deployer-git --save\n  ```\n\n* **部署、上传到Gitee**\n\n  ```shell\n  hexo g\n  hexo d\n  ```\n\n  此时可以看到相关文件已上传到Gitee仓库中。\n\n* **将仓库设置为Gitee Pages**\n\n  ①进入仓库→上面的边框 `管理`→向下滑，勾选`开源`→`保存`\n\n  ②进入仓库→上面的边框 `服务`→`Gitee Pages` → 勾选`强制使用HTTPS`→`启动`\n\n  {% note info %}\n\n  dog东西，今天才发现`gitee pages`不像`github pages` ： `github pages` 仓库中一有更新，延迟一会后便可访问到更新后的网页，而`gitee pages`更新仓库后，还要手动执行上面的第②步更新部署......或者你可以买`gitee pages pro` , ￥99/年......特色……\n\n  {endnote}\n\n  <del>据说强制HTTPS网站要安全一些，没学计算机网络的憨憨不懂</del>\n\n* **大功告成**\n\n  <a href=\"https:\\\\benkangpeng.gitee.io\"></a>\n\n### 参考资料(详细视频)\n\n感谢大佬：[超详细！0成本搭建个人网站！！【建议收藏】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)","slug":"Deploy-your-website","published":1,"updated":"2024-03-15T12:38:50.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dc000d58tee1wvdmxh","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>我们在使用<a href=\"https://benkangpeng.gitee.io/2023/09/18/Hello%20Hexo-NEXT/\">Hexo+NexT搭建</a>好个人博客后,只能在本地端口访问，其他人无法访问(有一种内网穿透的方法可以将电脑端口暴露，从而达到”上线“的功能。尚未了解    找到了:<a href=\"https://www.bilibili.com/video/BV1z14y1r7Fc/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">Here</a>)。</p>\n<p>我们可以使用<code>Github pages</code> 和<code>Gitee pages</code> 上线网站从而白嫖一台只能搭载<code>静态网页</code>的服务器  （<del>是不是有种白嫖的快乐</del>）以下是上线步骤。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Github-pages\"><a href=\"#Github-pages\" class=\"headerlink\" title=\"Github pages\"></a>Github pages</h3><h4 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h4><ul>\n<li><p><strong>注册GitHub、新建仓库</strong></p>\n<p>新建一个仓库，注意仓库名一定是用户名与github.io的组合，例如<code>benkangpeng.github.io</code></p>\n</li>\n<li><p><strong>生成ssh-key</strong></p>\n<p>如果未配置过git ，未获得<code>ssh key</code> 的话，需要配置<code>git</code>并获得<code>ssh key</code>(我理解为电脑硬件、邮箱对应的编码。通过该编码可以找到唯一的计算机，<code>GitHub</code>就是通过<code>ssh key</code>与计算机进行加密数据传输的。计算机网络没学 ，一定得补补:cry:)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>\n\n<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Connect computer with GitHub by ssh-key</strong></p>\n<p><strong>将ssh-key加入到github上</strong>：点击<code>个人头像进入个人空间</code> → <code>SSH and GPG keys</code>→ <code>New SSH key </code>,Title随意(最好标明是哪台电脑），<code>Key</code>粘上刚才复制的<code>id_rsa.pub</code> ，添加成功后会收到Github的邮件。</p>\n<p><strong>尝试本机与Github通信</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Hi BenkangPeng! You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>若显示以上结果，则表明通信成功。</p>\n</li>\n<li><p>修改<code>Hexo</code> 配置文件</p>\n<p><code>_config.yml </code>文件中找到<code>deploy</code>一项，修改为</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>type</code>表示<code>the type of site deploying</code> , 即网站发布的方式，我们通过<code>git</code>发布</p>\n<p><code>repository</code>则填写之前建立的仓库的地址，后加上后缀<code>.git</code></p>\n</li>\n<li><p>安装<code>hexo部署插件</code>(最好在根目录安装插件)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP-FR84659 MINGW64 /d/Hexo/blog (master)</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将文件上传到<code>Github</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g  # hexo generate</span><br><span class=\"line\">hexo d  # hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>此时相关文件已上传到对应的仓库中，但如果此时你输入<code>https:\\\\benkangpeng.github.io</code>结果是<code>404</code>，原因是未将该仓库设置为<code>GitHub pages</code> .</p>\n<p>在仓库页面右边的侧边栏中有一个<code>设置</code>的齿轮图标，点击→勾选<code>Use your GitHub Pages website</code>→<code>Save Changes</code></p>\n</li>\n<li><p><strong>大功告成</strong>，输入<code>https:\\\\benkangpeng.github.io</code>查看网页吧！</p>\n</li>\n</ul>\n<h3 id=\"Gitee-pages\"><a href=\"#Gitee-pages\" class=\"headerlink\" title=\"Gitee pages\"></a>Gitee pages</h3><p>因为Gitee pages的部署与Github类似(<del>毕竟抄来的</del>)，以下步骤较为简略，可参考着Github的配置步骤进行。</p>\n<h4 id=\"主要步骤-1\"><a href=\"#主要步骤-1\" class=\"headerlink\" title=\"主要步骤:\"></a>主要步骤:</h4><ul>\n<li><p><strong>Gitee注册账号</strong>并实名认证(对，就是这么狗:dog:)</p>\n</li>\n<li><p><strong>新建仓库</strong></p>\n<p>此处一定要注意仓库名与用户名一致，例如我的是<code>benkangpeng</code>,与Github不同(GitHub是benkangpeng.github.io)</p>\n</li>\n<li><p><strong>Git全局设置、获取ssh-key</strong>(同上面的Github)</p>\n<p>已经设置过全局设置、获取过ssh-key，则无需进行操作。重复操作会改变计算机的ssh-key，与之前在Github绑定的ssh-key不同了，导致Github与计算机无法通信。最优解：固定计算机的ssh-key不变，Github、Gitee共用一个。此后也不要变更ssh-key.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>\n\n<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>SSH-key填入Gitee</strong></p>\n<p>点头像→设置→SSH公钥</p>\n</li>\n<li><p><strong>第一次通信</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Hi BenkangPeng(@benkangpeng)! You’ve successfully authenticated, but GITEE.COM does not provide shell access.</p>\n</blockquote>\n<p><del>咱也不懂<code>does not provide shell access</code>是啥意思，Gitee垃圾就完事了</del></p>\n</li>\n<li><p><strong>修改<code>hexo</code>  <code>_config.yml</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">#repository: https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://gitee.com/benkangpeng/benkangpeng.git</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装hexo部署插件</strong>(安装过的无需重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>部署、上传到Gitee</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>此时可以看到相关文件已上传到Gitee仓库中。</p>\n</li>\n<li><p><strong>将仓库设置为Gitee Pages</strong></p>\n<p>①进入仓库→上面的边框 <code>管理</code>→向下滑，勾选<code>开源</code>→<code>保存</code></p>\n<p>②进入仓库→上面的边框 <code>服务</code>→<code>Gitee Pages</code> → 勾选<code>强制使用HTTPS</code>→<code>启动</code></p>\n</li>\n</ul>\n","site":{"data":{}},"length":2569,"excerpt":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>我们在使用<a href=\"https://benkangpeng.gitee.io/2023/09/18/Hello%20Hexo-NEXT/\">Hexo+NexT搭建</a>好个人博客后,只能在本地端口访问，其他人无法访问(有一种内网穿透的方法可以将电脑端口暴露，从而达到”上线“的功能。尚未了解    找到了:<a href=\"https://www.bilibili.com/video/BV1z14y1r7Fc/?spm_id_from=333.999.0.0&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">Here</a>)。</p>\n<p>我们可以使用<code>Github pages</code> 和<code>Gitee pages</code> 上线网站从而白嫖一台只能搭载<code>静态网页</code>的服务器  （<del>是不是有种白嫖的快乐</del>）以下是上线步骤。</p>","more":"<h3 id=\"Github-pages\"><a href=\"#Github-pages\" class=\"headerlink\" title=\"Github pages\"></a>Github pages</h3><h4 id=\"主要步骤\"><a href=\"#主要步骤\" class=\"headerlink\" title=\"主要步骤\"></a>主要步骤</h4><ul>\n<li><p><strong>注册GitHub、新建仓库</strong></p>\n<p>新建一个仓库，注意仓库名一定是用户名与github.io的组合，例如<code>benkangpeng.github.io</code></p>\n</li>\n<li><p><strong>生成ssh-key</strong></p>\n<p>如果未配置过git ，未获得<code>ssh key</code> 的话，需要配置<code>git</code>并获得<code>ssh key</code>(我理解为电脑硬件、邮箱对应的编码。通过该编码可以找到唯一的计算机，<code>GitHub</code>就是通过<code>ssh key</code>与计算机进行加密数据传输的。计算机网络没学 ，一定得补补:cry:)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>\n\n<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Connect computer with GitHub by ssh-key</strong></p>\n<p><strong>将ssh-key加入到github上</strong>：点击<code>个人头像进入个人空间</code> → <code>SSH and GPG keys</code>→ <code>New SSH key </code>,Title随意(最好标明是哪台电脑），<code>Key</code>粘上刚才复制的<code>id_rsa.pub</code> ，添加成功后会收到Github的邮件。</p>\n<p><strong>尝试本机与Github通信</strong>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Hi BenkangPeng! You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>若显示以上结果，则表明通信成功。</p>\n</li>\n<li><p>修改<code>Hexo</code> 配置文件</p>\n<p><code>_config.yml </code>文件中找到<code>deploy</code>一项，修改为</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>type</code>表示<code>the type of site deploying</code> , 即网站发布的方式，我们通过<code>git</code>发布</p>\n<p><code>repository</code>则填写之前建立的仓库的地址，后加上后缀<code>.git</code></p>\n</li>\n<li><p>安装<code>hexo部署插件</code>(最好在根目录安装插件)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP-FR84659 MINGW64 /d/Hexo/blog (master)</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将文件上传到<code>Github</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g  # hexo generate</span><br><span class=\"line\">hexo d  # hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>此时相关文件已上传到对应的仓库中，但如果此时你输入<code>https:\\\\benkangpeng.github.io</code>结果是<code>404</code>，原因是未将该仓库设置为<code>GitHub pages</code> .</p>\n<p>在仓库页面右边的侧边栏中有一个<code>设置</code>的齿轮图标，点击→勾选<code>Use your GitHub Pages website</code>→<code>Save Changes</code></p>\n</li>\n<li><p><strong>大功告成</strong>，输入<code>https:\\\\benkangpeng.github.io</code>查看网页吧！</p>\n</li>\n</ul>\n<h3 id=\"Gitee-pages\"><a href=\"#Gitee-pages\" class=\"headerlink\" title=\"Gitee pages\"></a>Gitee pages</h3><p>因为Gitee pages的部署与Github类似(<del>毕竟抄来的</del>)，以下步骤较为简略，可参考着Github的配置步骤进行。</p>\n<h4 id=\"主要步骤-1\"><a href=\"#主要步骤-1\" class=\"headerlink\" title=\"主要步骤:\"></a>主要步骤:</h4><ul>\n<li><p><strong>Gitee注册账号</strong>并实名认证(对，就是这么狗:dog:)</p>\n</li>\n<li><p><strong>新建仓库</strong></p>\n<p>此处一定要注意仓库名与用户名一致，例如我的是<code>benkangpeng</code>,与Github不同(GitHub是benkangpeng.github.io)</p>\n</li>\n<li><p><strong>Git全局设置、获取ssh-key</strong>(同上面的Github)</p>\n<p>已经设置过全局设置、获取过ssh-key，则无需进行操作。重复操作会改变计算机的ssh-key，与之前在Github绑定的ssh-key不同了，导致Github与计算机无法通信。最优解：固定计算机的ssh-key不变，Github、Gitee共用一个。此后也不要变更ssh-key.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;benkangpeng&quot;</span><br><span class=\"line\">git config --global user.email &quot;benkangpeng@163.com&quot;</span><br><span class=\"line\">ssh-keygen -t rsa -C &quot;benkangpeng@163.com&quot;  # 之后三次回车</span><br></pre></td></tr></table></figure>\n\n<p>根据终端输出的信息找到<code>id_rsa.pub</code>的位置,或者通过以下命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>SSH-key填入Gitee</strong></p>\n<p>点头像→设置→SSH公钥</p>\n</li>\n<li><p><strong>第一次通信</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Hi BenkangPeng(@benkangpeng)! You’ve successfully authenticated, but GITEE.COM does not provide shell access.</p>\n</blockquote>\n<p><del>咱也不懂<code>does not provide shell access</code>是啥意思，Gitee垃圾就完事了</del></p>\n</li>\n<li><p><strong>修改<code>hexo</code>  <code>_config.yml</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">#repository: https://github.com/benkangpeng/benkangpeng.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://gitee.com/benkangpeng/benkangpeng.git</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>安装hexo部署插件</strong>(安装过的无需重复安装)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>部署、上传到Gitee</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>此时可以看到相关文件已上传到Gitee仓库中。</p>\n</li>\n<li><p><strong>将仓库设置为Gitee Pages</strong></p>\n<p>①进入仓库→上面的边框 <code>管理</code>→向下滑，勾选<code>开源</code>→<code>保存</code></p>\n<p>②进入仓库→上面的边框 <code>服务</code>→<code>Gitee Pages</code> → 勾选<code>强制使用HTTPS</code>→<code>启动</code></p>\n</li>\n</ul>"},{"title":"Hello Hexo-NexT","abbrlink":"b3bdf13b","date":"2021-10-01T07:00:00.000Z","_content":"\n### Abstract\n\n<strong style=\"color : rgb(128,109,158) ; font-size : 24px\">Hello Hexo and NexT !</strong>\n\n<strong style = \"color : rgb(128,109,158) ; font-size : 24px\"> Hexo and NexT yyds ! </strong>\n\n基于Hexo和NexT主题，我的第一个个人网站诞生啦！\n\n这篇文章记录了建立网站的点点滴滴，并持续更新我对心肝宝贝[My Website](https://benkangpeng.github.io/)的持续美化、修缮。\n\n<!-- more -->\n\n### 建站\n\nHexo对中文的支持十分友好：[Hexo](https://hexo.io/zh-cn/)  ,   直接按照[Hexo官方文档](https://hexo.io/zh-cn/docs/)进行即可。\n\n#### 1. 安装前提\n\n首先确保计算机上已经安装[Node.js](https://nodejs.org/en) 和[Git](https://git-scm.com/download/win)。进不去网站的话，安装包已经屯好了：[百度网盘](https://pan.baidu.com/s/1fJ36mQkLS5qLYJSBXTeb0g?pwd=91bs)   [蓝奏云](https://pbk.lanzoum.com/i0b4O19nlu3i)\n\n#### 2. 建立Hexo初始网站\n\n* **安装Hexo(任意位置)**\n\n```shell\nnpm install -g hexo-cli\n```\n\n* **建立一个文件夹存放所有博客文件：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ pwd\n/d/Hexo\n```\n\n* **在/d/Hexo文件夹使用如下方法创建一个blog(可修改名称) , 并进入：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ hexo init blog\n\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ cd ./blog/\n```\n\nblog文件夹内存放的就是网站blog源文件,如果想再建立一个网站，同样在Hexo文件夹下使用`hexo init blog_2`创建blog_2文件夹……\n\n* **在blog文件夹中加入hexo相关配置：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ npm install\n```\n\n* **查看网页**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ hexo g && hexo s  # 完整写法： hexo generate && hexo server\n```\n\n进入INFO中的端口`http://localhost:4000/`即可看到hexo博客框架:\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">\n    <img src=\"https://pic.imgdb.cn/item/650fe8a2c458853aef63bf52.jpg\" alt = \"hexo初始网页.jpg\" style = \"width : 80% \">\n</div>\n* **写文章**\n\n```shell\n$ hexo new \"第一篇文章\"\n```\n\nHexo即在`/blog/source/_posts/`创建了一个`第一篇文章.md` 。\n\n实时编辑，在`https://localhost:4000`端口中刷新便可实时显示。\n\n设置hexo主题\n\n我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。更多主题可在[Themes | Hexo](https://hexo.io/themes/)找到。\n\n### 配置NexT主题\n\n我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。\n\nNext的最新官网是[NexT - Theme for Hexo (theme-next.js.org)](https://theme-next.js.org/) ， 而不是[Home Page | Theme-Next](https://theme-next.org/) ， 原因详见：[Issue](https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848)\n\n* **安装NexT**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ npm install hexo-theme-next\n```\n\n* **配置网站**\n\n你会发现文件中有两个配置文件，在blog中有一个`_config.yml` ， 即Hexo的配置文件 ， `\\Hexo\\blog_test\\node_modules\\hexo-theme-next`中有一个`_config.yml` ， 即NexT主题的配置文件。\n\n> However, we do not recommend directly modifying the NexT config file. It is quite often running into conflict status when updating NexT theme via `git pull`, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in `node_modules`.\n\nIn order to resolve this issue, we recommend using the [Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration) feature to configure theme NexT.\n\n官网提示我们，在修改NexT配置文件时不要直接修改 `\\Hexo\\blog_test\\node_modules\\hexo-theme-next` ， 否则可能引起冲突。官方提供给我们一个方法[Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration) ， 简而言之将 `\\Hexo\\blog_test\\node_modules\\hexo-theme-next\\_config.yml`复制到`blog\\`下，更名为`_config.next.yml` , 这样直接修改`blog\\`下的两个配置文件即可对Hexo和NexT均进行配置。\n\n可手动配置，也可在相应位置执行命令：\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ cp node_modules/hexo-theme-next/_config.yml _config.next.yml\n```\n\n* **Hexo Configuration**\n\nEdit `_config.yml`\n\n```yml\n# Site\ntitle: Benkang Peng\nsubtitle: 'Personal Website'\ndescription: ''\nkeywords:\nauthor: Benkang Peng\nlanguage: en\ntimezone: 'Asia/Shanghai'\n```\n\n```yml\n# theme: landscape  记得修改主题为NexT\ntheme: next\n```\n\n* **NexT Configuration**\n\nEdit：\n\n```yml\nminify: true\nscheme: Gemini\ndarkmode: true\n```\n\n* **Configuring Favicon**\n\nWe can visit [Favicon.ico图标生成器](https://www.logosc.cn/logo/favicon) to generate our favicon by inputting characters .\n\nPut  the favicon files in `Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images` , then edit `NexT config file ` according to the filename:\n\n```yml\nfavicon:\n  small: /images/favicon-16x16.png\n  medium: /images/favicon-32x32.png\n  apple_touch_icon: /images/apple-touch-icon.png\n  #safari_pinned_tab: /images/logo.svg\n  #android_manifest: /manifest.json\n```\n\n* **Also add the avatar :**\n\nFor example , I add `GNU-Linux-Logo-Penguin-SVG.jpg` to `Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images`\n\nEdit `_config.next.yml`:\n\n```yml\navatar:\n  url: /images/GNU-Linux-Logo-Penguin-SVG.jpg\n```\n\n* **Configuring Menu**\n\nWe can add the `Menu items ` by removing the comments in `_config.next.yml` :\n\n```yml\nmenu:\n  home: / || fa fa-pie-chart\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  #categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\nMenu settings item's format :  `key: /link/ || icon` .    `Key` is the name of menu items(home , tags , etc.) ,  and link is the target link to relative url inside your site .  For example , if the menu item is `other: /other/ || icon` , it will go to `https://benkangpeng.github.io/other/` when you click it . \n\n> Except home and archives, all custom pages under menu section need to be created manually.\n\nTips above means that , when you add new menu items , you should also create relative files except `home and archives` as they can create relative files automatically .\n\nFor example , three steps to add menu item `tags` :\n\n**①Removing the comment of tags :**\n\n```yml\nmenu:\n  home: / || fa fa-pie-chart\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n```\n\n**②Create relative files :**\n\n```yml\n$ hexo new page tags\n```\n\n**③Editting the markdown file `index.md` of `\\blog_test\\source\\tags\\`**\n\n```yml\ntitle: Tags\ndate: 2023-09-18 09:10:10\ntype: \"tags\"\n```\n\nThat's all .  As for the ways of the offical doc ,  I'm  absolutely confused ……\n\n### Beautify\n\n#### Custom pages\n\nIf we want to add a `.html` to the website and don't want NexT to influence that `.html` ' s style , which means `.html` can be displayed on its own style ,  how do we do ?\n\nThe answer is : **Prevent Hexo from rendering my .html files.**\n\n* Now create a new page :\n\n```shell\n$ hexo new page Other\n```\n\n* Edit the `_config.next.yml` to display `Other` in menu\n\n```yml\nmenu:\n  Other: /other/index.html || fa fa-external-link\n```\n\nFind the name of  font-awesome icons from [Font Awesome](https://fontawesome.dashgame.com/)\n\n* Edit the `_config.yml` to make sure folder `/Other` cann't be rendered by Hexo .\n\n```yml\nskip_render:\n - \"Other/**\"\n```\n\n* Delete the `index.md` in `/source/Other` , and create `index.html`\n\nWe can write something in `index.html` , which will keep its style and not be rendered by hexo .\n\n#### Read more\n\nIt's a common need to show some part of article in home page and a `Read more` button to view more .\n\nThe best way is : Use `<!-- more -->` in the article to break the article manually .\n\n#### Post Wordcount\n\nInstall plugin `hexo-word-counter` :\n\n```shell\n$ npm install hexo-word-counter\n```\n\nEdit `_config.yml`:\n\n```yml\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 2    \n  wpm: 275\n  suffix: \"mins.\"\n```\n\n#### Tag Icon\n\nBy default, tags at the bottom of posts have a symbol # at there left side.\n\nIf you prefer icon instead of symbol, edit `_config.next.yml` like following:\n\n#### Codeblock Style\n\nYou can go to [Highlight (theme-next.js.org)](https://theme-next.js.org/highlight/) to choose the theme you like and it will give the way to edit the `.yml` .\n\n```yml\n# _config.yml\nhighlight:\n  enable: true \n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\n\n```yml\n# _config.next.yml\n\ncodeblock:\n  # Code Highlight theme\n  # All available themes: https://theme-next.js.org/highlight/\n  theme:\n    light: atom-one-dark\n    dark: atom-one-dark\n  prism:\n    light: prism\n    dark: prism-dark\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    show_result: true\n    # Available values: default | flat | mac\n    style: mac\n  # Fold code block\n  fold:\n    enable: true\n    height: 500\n```\n\n\n\n#### Back To Top\n\n```yml\n# _config.next.yml\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: false\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n\n#### Reading Progress\n\n```yml\n# _config.next.yml\n# Reading progress bar\nreading_progress:\n  enable: true\n  # Available values: left | right\n  start_at: left\n  # Available values: top | bottom\n  position: top\n  reversed: false\n  color: \"#37c6c0\"\n  height: 3px\n```\n\n#### GitHub Banner\n\nNexT provide `Follow me on GitHub` banner on the right-top corner .\n\n```yml\n# _config.next.yml\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/benkangpeng\n```\n\n\n\n### Tag Plugin\n\n#### Button\n\nNexT provide the tag plugin `button` , which can jump to corresponding link .\n\n* **Usage**\n\n```\n{% button url , text , icon[class] , [title] %}\n```\n\nor\n\n```\n{% btn url, text, icon [class], [title] %}\n```\n\n* * `url` : Absolute or relative path to URL.\n  * `text` : Button text. Required if no icon specified.\n  * `icon` : Font Awesome icon name. Required if no text specified.\n  * `[class]` : *Optional parameter.* Font Awesome class(es): `fa-fw` | `fa-lg` | `fa-2x` | `fa-3x` | `fa-4x` | `fa-5x`\n  * `[title]` : *Optional parameter.* Tooltip at mouseover.\n\neg.\n\n```\n{% btn # , Text , home , mouseover %}{% btn # , Superpowers , fa fa-external-link , mouseon %}\n```\n\n{% btn # , Text , home , mouseover %}{% btn # , Superpowers , fa-superpowers , mouseon %}\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">{% btn https://github.com, GitHub, fab fa-github fa-fw fa-lg, GitHub %}</div>\n\n* **We can also use `Button` inside text , for example :**\n\n```\nFor search engineer , I prefer {% btn https://cn.bing.com , Bing , fa fa-search , Bing %} instead of {% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %}\n```\n\nFor search engineer , I prefer {% btn https://cn.bing.com , Bing , fa fa-search , Bing %} instead of {% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %}.\n\n* **Button margin**\n\n  Well , maybe this feature is useful for me to build a aggregation of commonly used website .\n\n```\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n\t\t<div>{% btn #,, heading %}{% btn #,, fab fa-edge %}{% btn #,, times %}{% btn #,, circle-notch %}</div>\n\t\t<div>{% btn #,, italic %}{% btn #,, fab fa-scribd %}</div>\n\t\t<div>{% btn #,, fab fa-google %}{% btn #,, fab fa-chrome %}{% btn #,, fab fa-opera %}{% btn #,, gem\n\t\t\tfa-rotate-270 %}</div>\n\t</div>\n```\n\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n\t\t<div>{% btn #,, heading %}{% btn #,, fab fa-edge %}{% btn #,, times %}{% btn #,, circle-notch %}</div>\n\t\t<div>{% btn #,, italic %}{% btn #,, fab fa-scribd %}</div>\n\t\t<div>{% btn #,, fab fa-google %}{% btn #,, fab fa-chrome %}{% btn #,, fab fa-opera %}{% btn #,, gem\n\t\t\tfa-rotate-270 %}</div>\n\t</div>\n\n\n\n#### Group Pictures\n\n`Group Pictures` is also an awesome plugin ! Maybe I will use `group picture` to build my photo repo .\n\n* Usage\n\n```\n{% gp [number]-[layout] %}\n{% endgp %}\n```\n\n`[number]` : optional . Total number of pictures .\n\n`[layout]` : optional . The index of the layout, which can be obtained according to the figure below. For example, if you want to apply the second layout to 4 pictures, then use .\n\n```\n{% grouppicture 4-2 %}{% endgrouppicture %}\n```\n\n{% gp 2-2 %}\n\n![group-picture-1.png](https://theme-next.js.org/images/group-picture-1.png)\n\n![group-picture-2.png](https://theme-next.js.org/images/group-picture-2.png)\n\n{% endgp %}\n\n{% gp 5-2 %}\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n\n\n{% endgp %}\n\n{% note info %}\n\nIt's recommended to enable `fancybox` before using `group pictures` .\n\n```yml\n# _config.next.yml\nfancybox: true\n```\n\n{% endnote %}\n\n\n\n#### Link Grid\n\n`Link Grid` is simple to `group pictures` , which may be called \"Group Links\" . It may be really awesome to code a page containing some commonly used links by `link grid` , I think .\n\n* Usage\n\n```\n{% lg [image] [delimiter] [comment] %}\n{% endlg %}\n```\n\n`[image]` : Optional parameter. Default image URL.\n`[delimiter]` : Optional parameter. If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.\n`[comment]` : Optional parameter. If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.\n\n`{% lg [image]  %}`\n\n```\n{% lg %}\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\n{% endlg %}\n```\n\nWell , maybe I get in trouble …… I can't add the code above here , otherwise there are many bugs after running `hexo clean && hexo g && hexo s` .  But in other file , such as `External-link` in menu ,  it works .I can't solve this problem ......\n\n#### Mermaid & WaveDrom\n\nTwo plugins above is useful for flow chart painting .\n\n#### Note\n\n* **Settings**\n\n```yml\n# NexT config file\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: simple\n  icons: false\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n\n* **Usage**\n\n```\n{% note [class] [no-icon] [summary] %}\nContent\n{% endnote %}\n```\n\n`[class]` : Optional . Supported values : `default` | `primary` | `success` | `info` | `warning` | `danger` \n\n`[no-icon]` : Optional . Disable icon in note .\n\n`[summary]` : Optional . Summary of note .\n\n* **Examples**\n\n```\n{% note %}\nwithout define class style\n{% endnote %}\n```\n\n{% note %}\n\nwithout define class style\n{% endnote %}\n\n\n\n\n\n```\n{% note default %}\ndefault style\n{% endnote %}\n```\n\n{% note default %}\n\ndefault style\n\n{% endnote %}\n\n\n\n\n\n```\n{% note primary %}\n#### Primary Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note primary %}\n#### Primary Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n```\n{% note info %}\n#### Info Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note info %}\n#### Info Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n\n\n```\n{% note success %}\n#### Success Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note success %}\n#### Success Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n\n\n```\n{% note danger %}\n#### Danger Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note danger %}\n#### Danger Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n```\n{% note info no-icon %}\n#### No icon note\nNote **without** icon: `note info no-icon`\n{% endnote %}\n```\n\n{% note info no-icon %}\n#### No icon note\nNote **without** icon: `note info no-icon`\n{% endnote %}\n\n\n\n```\n{% note primary This is a summary %}\n#### Details and summary\nNote with summary: `note primary This is a summary`\n{% endnote %}\n```\n\n{% note primary This is a summary %}\n#### Details and summary\nNote with summary: `note primary This is a summary`\n{% endnote %}\n\n#### PDF\n\nNexT also provide the `PDF` plugin which can add the pdf viewer in the website .\n\n\n\n### Third Party Plugins\n\n#### Pjax\n\n> > Easily enable fast AJAX navigation on any website (using pushState() + XHR)\n>\n> Pjax is **a standalone JavaScript module** that uses [AJAX](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX) (XmlHttpRequest) and [pushState()](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history) to deliver a fast browsing experience.\n>\n> *It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.*\n>\n> **No more full page reloads. No more multiple HTTP requests.**\n>\n> *Pjax does not rely on other libraries, like jQuery or similar. It is written entirely in vanilla JS.*\n\n``\"Make users feel like they are browsing an app\" `` ?  True or False ?  Unbelievable !\n\nJust Edit in `_config.next.yml`:\n\n```yml\npjax: true\n```\n\n#### Math Equations\n\nNexT also provide some plugins to render math equations . As I don't plan to write math notes on my blog (It's convient to write them in LaTex , isn't it ?) , so maybe next time !\n\n#### Lazyload\n\nIt delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. \n\n```yml\n# _config.next.yml\nlazyload: true\n```\n\n#### Animation\n\nNexT provide the animation behavoir . But for me , it's unnecessary , and I can close animation function to speed my website .\n\n```yml\nmotion:\n  enable: false\n  async: false\n  transition:\n    # All available transition variants: https://theme-next.js.org/animate/\n    menu_item: fadeInDown\n    post_block: fadeIn\n    post_header: fadeInDown\n    post_body: fadeInDown\n    coll_header: fadeInLeft\n    # Only for Pisces | Gemini.\n    sidebar: fadeInUp\n```\n\n#### Quicklink\n\n[Quicklink](https://github.com/GoogleChromeLabs/quicklink) is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.\n\nYou can enable it by setting value `quicklink.enable` to `true` in NexT config file.\n\n```yml\n# _config.next.yml\nquicklink:\n  enable: true\n\n  # Home page and archive page can be controlled through home and archive options below.\n  # This configuration item is independent of `enable`.\n  home: true\n  archive: false\n  Me: true \n  # \"Me\" is a menu item I add .\n  # Default (true) will initialize quicklink after the load event fires.\n  delay: true\n  # Custom a time in milliseconds by which the browser must execute prefetching.\n  timeout: 3000\n  # Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).\n  priority: true\n```\n\n#### AddToAny\n\nShare your artical to external patform by `AddToAny` .\n\nOn my view , it's useless .........\n\n```yml\n# AddToAny Share. See: https://www.addtoany.com\naddtoany:\n  enable: true\n  buttons:\n    - wechat\n    - facebook\n    - twitter\n```\n\n#### Local Search\n\nPlugin `hexo-generator-searchdb` provide our website with a local search engineer .\n\n* Installation\n\n```shell\n$ npm install hexo-generator-searchdb\n```\n\n* Edit in `_config.yml`\n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n* Edit in `_config.next.yml`\n\n```yml\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n\n\n<strong style=\"color : orange ; font-size : 30px\">All right , it's all about Hexo beautifying !</strong>\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Hello-Hexo-NexT.md","raw":"---\ntitle: Hello Hexo-NexT\ntags: Web\nabbrlink: b3bdf13b\ndate: 2021-10-01 15:00:00\n---\n\n### Abstract\n\n<strong style=\"color : rgb(128,109,158) ; font-size : 24px\">Hello Hexo and NexT !</strong>\n\n<strong style = \"color : rgb(128,109,158) ; font-size : 24px\"> Hexo and NexT yyds ! </strong>\n\n基于Hexo和NexT主题，我的第一个个人网站诞生啦！\n\n这篇文章记录了建立网站的点点滴滴，并持续更新我对心肝宝贝[My Website](https://benkangpeng.github.io/)的持续美化、修缮。\n\n<!-- more -->\n\n### 建站\n\nHexo对中文的支持十分友好：[Hexo](https://hexo.io/zh-cn/)  ,   直接按照[Hexo官方文档](https://hexo.io/zh-cn/docs/)进行即可。\n\n#### 1. 安装前提\n\n首先确保计算机上已经安装[Node.js](https://nodejs.org/en) 和[Git](https://git-scm.com/download/win)。进不去网站的话，安装包已经屯好了：[百度网盘](https://pan.baidu.com/s/1fJ36mQkLS5qLYJSBXTeb0g?pwd=91bs)   [蓝奏云](https://pbk.lanzoum.com/i0b4O19nlu3i)\n\n#### 2. 建立Hexo初始网站\n\n* **安装Hexo(任意位置)**\n\n```shell\nnpm install -g hexo-cli\n```\n\n* **建立一个文件夹存放所有博客文件：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ pwd\n/d/Hexo\n```\n\n* **在/d/Hexo文件夹使用如下方法创建一个blog(可修改名称) , 并进入：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ hexo init blog\n\nbenkangpeng@DESKTOP MINGW64 /d/Hexo\n$ cd ./blog/\n```\n\nblog文件夹内存放的就是网站blog源文件,如果想再建立一个网站，同样在Hexo文件夹下使用`hexo init blog_2`创建blog_2文件夹……\n\n* **在blog文件夹中加入hexo相关配置：**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ npm install\n```\n\n* **查看网页**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ hexo g && hexo s  # 完整写法： hexo generate && hexo server\n```\n\n进入INFO中的端口`http://localhost:4000/`即可看到hexo博客框架:\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">\n    <img src=\"https://pic.imgdb.cn/item/650fe8a2c458853aef63bf52.jpg\" alt = \"hexo初始网页.jpg\" style = \"width : 80% \">\n</div>\n* **写文章**\n\n```shell\n$ hexo new \"第一篇文章\"\n```\n\nHexo即在`/blog/source/_posts/`创建了一个`第一篇文章.md` 。\n\n实时编辑，在`https://localhost:4000`端口中刷新便可实时显示。\n\n设置hexo主题\n\n我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。更多主题可在[Themes | Hexo](https://hexo.io/themes/)找到。\n\n### 配置NexT主题\n\n我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。\n\nNext的最新官网是[NexT - Theme for Hexo (theme-next.js.org)](https://theme-next.js.org/) ， 而不是[Home Page | Theme-Next](https://theme-next.org/) ， 原因详见：[Issue](https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848)\n\n* **安装NexT**\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ npm install hexo-theme-next\n```\n\n* **配置网站**\n\n你会发现文件中有两个配置文件，在blog中有一个`_config.yml` ， 即Hexo的配置文件 ， `\\Hexo\\blog_test\\node_modules\\hexo-theme-next`中有一个`_config.yml` ， 即NexT主题的配置文件。\n\n> However, we do not recommend directly modifying the NexT config file. It is quite often running into conflict status when updating NexT theme via `git pull`, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in `node_modules`.\n\nIn order to resolve this issue, we recommend using the [Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration) feature to configure theme NexT.\n\n官网提示我们，在修改NexT配置文件时不要直接修改 `\\Hexo\\blog_test\\node_modules\\hexo-theme-next` ， 否则可能引起冲突。官方提供给我们一个方法[Alternate Theme Config](https://theme-next.js.org/docs/getting-started/configuration) ， 简而言之将 `\\Hexo\\blog_test\\node_modules\\hexo-theme-next\\_config.yml`复制到`blog\\`下，更名为`_config.next.yml` , 这样直接修改`blog\\`下的两个配置文件即可对Hexo和NexT均进行配置。\n\n可手动配置，也可在相应位置执行命令：\n\n```shell\nbenkangpeng@DESKTOP MINGW64 /d/Hexo/blog\n$ cp node_modules/hexo-theme-next/_config.yml _config.next.yml\n```\n\n* **Hexo Configuration**\n\nEdit `_config.yml`\n\n```yml\n# Site\ntitle: Benkang Peng\nsubtitle: 'Personal Website'\ndescription: ''\nkeywords:\nauthor: Benkang Peng\nlanguage: en\ntimezone: 'Asia/Shanghai'\n```\n\n```yml\n# theme: landscape  记得修改主题为NexT\ntheme: next\n```\n\n* **NexT Configuration**\n\nEdit：\n\n```yml\nminify: true\nscheme: Gemini\ndarkmode: true\n```\n\n* **Configuring Favicon**\n\nWe can visit [Favicon.ico图标生成器](https://www.logosc.cn/logo/favicon) to generate our favicon by inputting characters .\n\nPut  the favicon files in `Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images` , then edit `NexT config file ` according to the filename:\n\n```yml\nfavicon:\n  small: /images/favicon-16x16.png\n  medium: /images/favicon-32x32.png\n  apple_touch_icon: /images/apple-touch-icon.png\n  #safari_pinned_tab: /images/logo.svg\n  #android_manifest: /manifest.json\n```\n\n* **Also add the avatar :**\n\nFor example , I add `GNU-Linux-Logo-Penguin-SVG.jpg` to `Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images`\n\nEdit `_config.next.yml`:\n\n```yml\navatar:\n  url: /images/GNU-Linux-Logo-Penguin-SVG.jpg\n```\n\n* **Configuring Menu**\n\nWe can add the `Menu items ` by removing the comments in `_config.next.yml` :\n\n```yml\nmenu:\n  home: / || fa fa-pie-chart\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  #categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\nMenu settings item's format :  `key: /link/ || icon` .    `Key` is the name of menu items(home , tags , etc.) ,  and link is the target link to relative url inside your site .  For example , if the menu item is `other: /other/ || icon` , it will go to `https://benkangpeng.github.io/other/` when you click it . \n\n> Except home and archives, all custom pages under menu section need to be created manually.\n\nTips above means that , when you add new menu items , you should also create relative files except `home and archives` as they can create relative files automatically .\n\nFor example , three steps to add menu item `tags` :\n\n**①Removing the comment of tags :**\n\n```yml\nmenu:\n  home: / || fa fa-pie-chart\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n```\n\n**②Create relative files :**\n\n```yml\n$ hexo new page tags\n```\n\n**③Editting the markdown file `index.md` of `\\blog_test\\source\\tags\\`**\n\n```yml\ntitle: Tags\ndate: 2023-09-18 09:10:10\ntype: \"tags\"\n```\n\nThat's all .  As for the ways of the offical doc ,  I'm  absolutely confused ……\n\n### Beautify\n\n#### Custom pages\n\nIf we want to add a `.html` to the website and don't want NexT to influence that `.html` ' s style , which means `.html` can be displayed on its own style ,  how do we do ?\n\nThe answer is : **Prevent Hexo from rendering my .html files.**\n\n* Now create a new page :\n\n```shell\n$ hexo new page Other\n```\n\n* Edit the `_config.next.yml` to display `Other` in menu\n\n```yml\nmenu:\n  Other: /other/index.html || fa fa-external-link\n```\n\nFind the name of  font-awesome icons from [Font Awesome](https://fontawesome.dashgame.com/)\n\n* Edit the `_config.yml` to make sure folder `/Other` cann't be rendered by Hexo .\n\n```yml\nskip_render:\n - \"Other/**\"\n```\n\n* Delete the `index.md` in `/source/Other` , and create `index.html`\n\nWe can write something in `index.html` , which will keep its style and not be rendered by hexo .\n\n#### Read more\n\nIt's a common need to show some part of article in home page and a `Read more` button to view more .\n\nThe best way is : Use `<!-- more -->` in the article to break the article manually .\n\n#### Post Wordcount\n\nInstall plugin `hexo-word-counter` :\n\n```shell\n$ npm install hexo-word-counter\n```\n\nEdit `_config.yml`:\n\n```yml\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 2    \n  wpm: 275\n  suffix: \"mins.\"\n```\n\n#### Tag Icon\n\nBy default, tags at the bottom of posts have a symbol # at there left side.\n\nIf you prefer icon instead of symbol, edit `_config.next.yml` like following:\n\n#### Codeblock Style\n\nYou can go to [Highlight (theme-next.js.org)](https://theme-next.js.org/highlight/) to choose the theme you like and it will give the way to edit the `.yml` .\n\n```yml\n# _config.yml\nhighlight:\n  enable: true \n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\n\n```yml\n# _config.next.yml\n\ncodeblock:\n  # Code Highlight theme\n  # All available themes: https://theme-next.js.org/highlight/\n  theme:\n    light: atom-one-dark\n    dark: atom-one-dark\n  prism:\n    light: prism\n    dark: prism-dark\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    show_result: true\n    # Available values: default | flat | mac\n    style: mac\n  # Fold code block\n  fold:\n    enable: true\n    height: 500\n```\n\n\n\n#### Back To Top\n\n```yml\n# _config.next.yml\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: false\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n\n#### Reading Progress\n\n```yml\n# _config.next.yml\n# Reading progress bar\nreading_progress:\n  enable: true\n  # Available values: left | right\n  start_at: left\n  # Available values: top | bottom\n  position: top\n  reversed: false\n  color: \"#37c6c0\"\n  height: 3px\n```\n\n#### GitHub Banner\n\nNexT provide `Follow me on GitHub` banner on the right-top corner .\n\n```yml\n# _config.next.yml\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/benkangpeng\n```\n\n\n\n### Tag Plugin\n\n#### Button\n\nNexT provide the tag plugin `button` , which can jump to corresponding link .\n\n* **Usage**\n\n```\n{% button url , text , icon[class] , [title] %}\n```\n\nor\n\n```\n{% btn url, text, icon [class], [title] %}\n```\n\n* * `url` : Absolute or relative path to URL.\n  * `text` : Button text. Required if no icon specified.\n  * `icon` : Font Awesome icon name. Required if no text specified.\n  * `[class]` : *Optional parameter.* Font Awesome class(es): `fa-fw` | `fa-lg` | `fa-2x` | `fa-3x` | `fa-4x` | `fa-5x`\n  * `[title]` : *Optional parameter.* Tooltip at mouseover.\n\neg.\n\n```\n{% btn # , Text , home , mouseover %}{% btn # , Superpowers , fa fa-external-link , mouseon %}\n```\n\n{% btn # , Text , home , mouseover %}{% btn # , Superpowers , fa-superpowers , mouseon %}\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">{% btn https://github.com, GitHub, fab fa-github fa-fw fa-lg, GitHub %}</div>\n\n* **We can also use `Button` inside text , for example :**\n\n```\nFor search engineer , I prefer {% btn https://cn.bing.com , Bing , fa fa-search , Bing %} instead of {% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %}\n```\n\nFor search engineer , I prefer {% btn https://cn.bing.com , Bing , fa fa-search , Bing %} instead of {% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %}.\n\n* **Button margin**\n\n  Well , maybe this feature is useful for me to build a aggregation of commonly used website .\n\n```\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n\t\t<div>{% btn #,, heading %}{% btn #,, fab fa-edge %}{% btn #,, times %}{% btn #,, circle-notch %}</div>\n\t\t<div>{% btn #,, italic %}{% btn #,, fab fa-scribd %}</div>\n\t\t<div>{% btn #,, fab fa-google %}{% btn #,, fab fa-chrome %}{% btn #,, fab fa-opera %}{% btn #,, gem\n\t\t\tfa-rotate-270 %}</div>\n\t</div>\n```\n\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n\t\t<div>{% btn #,, heading %}{% btn #,, fab fa-edge %}{% btn #,, times %}{% btn #,, circle-notch %}</div>\n\t\t<div>{% btn #,, italic %}{% btn #,, fab fa-scribd %}</div>\n\t\t<div>{% btn #,, fab fa-google %}{% btn #,, fab fa-chrome %}{% btn #,, fab fa-opera %}{% btn #,, gem\n\t\t\tfa-rotate-270 %}</div>\n\t</div>\n\n\n\n#### Group Pictures\n\n`Group Pictures` is also an awesome plugin ! Maybe I will use `group picture` to build my photo repo .\n\n* Usage\n\n```\n{% gp [number]-[layout] %}\n{% endgp %}\n```\n\n`[number]` : optional . Total number of pictures .\n\n`[layout]` : optional . The index of the layout, which can be obtained according to the figure below. For example, if you want to apply the second layout to 4 pictures, then use .\n\n```\n{% grouppicture 4-2 %}{% endgrouppicture %}\n```\n\n{% gp 2-2 %}\n\n![group-picture-1.png](https://theme-next.js.org/images/group-picture-1.png)\n\n![group-picture-2.png](https://theme-next.js.org/images/group-picture-2.png)\n\n{% endgp %}\n\n{% gp 5-2 %}\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n![NEXT.jpg](https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg)\n\n\n\n{% endgp %}\n\n{% note info %}\n\nIt's recommended to enable `fancybox` before using `group pictures` .\n\n```yml\n# _config.next.yml\nfancybox: true\n```\n\n{% endnote %}\n\n\n\n#### Link Grid\n\n`Link Grid` is simple to `group pictures` , which may be called \"Group Links\" . It may be really awesome to code a page containing some commonly used links by `link grid` , I think .\n\n* Usage\n\n```\n{% lg [image] [delimiter] [comment] %}\n{% endlg %}\n```\n\n`[image]` : Optional parameter. Default image URL.\n`[delimiter]` : Optional parameter. If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.\n`[comment]` : Optional parameter. If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.\n\n`{% lg [image]  %}`\n\n```\n{% lg %}\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\nTheme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\n{% endlg %}\n```\n\nWell , maybe I get in trouble …… I can't add the code above here , otherwise there are many bugs after running `hexo clean && hexo g && hexo s` .  But in other file , such as `External-link` in menu ,  it works .I can't solve this problem ......\n\n#### Mermaid & WaveDrom\n\nTwo plugins above is useful for flow chart painting .\n\n#### Note\n\n* **Settings**\n\n```yml\n# NexT config file\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: simple\n  icons: false\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n\n* **Usage**\n\n```\n{% note [class] [no-icon] [summary] %}\nContent\n{% endnote %}\n```\n\n`[class]` : Optional . Supported values : `default` | `primary` | `success` | `info` | `warning` | `danger` \n\n`[no-icon]` : Optional . Disable icon in note .\n\n`[summary]` : Optional . Summary of note .\n\n* **Examples**\n\n```\n{% note %}\nwithout define class style\n{% endnote %}\n```\n\n{% note %}\n\nwithout define class style\n{% endnote %}\n\n\n\n\n\n```\n{% note default %}\ndefault style\n{% endnote %}\n```\n\n{% note default %}\n\ndefault style\n\n{% endnote %}\n\n\n\n\n\n```\n{% note primary %}\n#### Primary Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note primary %}\n#### Primary Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n```\n{% note info %}\n#### Info Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note info %}\n#### Info Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n\n\n```\n{% note success %}\n#### Success Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note success %}\n#### Success Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n\n\n```\n{% note danger %}\n#### Danger Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n```\n\n{% note danger %}\n#### Danger Header\n**Welcome** to [Hexo!](https://hexo.io)\n{% endnote %}\n\n\n\n```\n{% note info no-icon %}\n#### No icon note\nNote **without** icon: `note info no-icon`\n{% endnote %}\n```\n\n{% note info no-icon %}\n#### No icon note\nNote **without** icon: `note info no-icon`\n{% endnote %}\n\n\n\n```\n{% note primary This is a summary %}\n#### Details and summary\nNote with summary: `note primary This is a summary`\n{% endnote %}\n```\n\n{% note primary This is a summary %}\n#### Details and summary\nNote with summary: `note primary This is a summary`\n{% endnote %}\n\n#### PDF\n\nNexT also provide the `PDF` plugin which can add the pdf viewer in the website .\n\n\n\n### Third Party Plugins\n\n#### Pjax\n\n> > Easily enable fast AJAX navigation on any website (using pushState() + XHR)\n>\n> Pjax is **a standalone JavaScript module** that uses [AJAX](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX) (XmlHttpRequest) and [pushState()](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history) to deliver a fast browsing experience.\n>\n> *It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.*\n>\n> **No more full page reloads. No more multiple HTTP requests.**\n>\n> *Pjax does not rely on other libraries, like jQuery or similar. It is written entirely in vanilla JS.*\n\n``\"Make users feel like they are browsing an app\" `` ?  True or False ?  Unbelievable !\n\nJust Edit in `_config.next.yml`:\n\n```yml\npjax: true\n```\n\n#### Math Equations\n\nNexT also provide some plugins to render math equations . As I don't plan to write math notes on my blog (It's convient to write them in LaTex , isn't it ?) , so maybe next time !\n\n#### Lazyload\n\nIt delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. \n\n```yml\n# _config.next.yml\nlazyload: true\n```\n\n#### Animation\n\nNexT provide the animation behavoir . But for me , it's unnecessary , and I can close animation function to speed my website .\n\n```yml\nmotion:\n  enable: false\n  async: false\n  transition:\n    # All available transition variants: https://theme-next.js.org/animate/\n    menu_item: fadeInDown\n    post_block: fadeIn\n    post_header: fadeInDown\n    post_body: fadeInDown\n    coll_header: fadeInLeft\n    # Only for Pisces | Gemini.\n    sidebar: fadeInUp\n```\n\n#### Quicklink\n\n[Quicklink](https://github.com/GoogleChromeLabs/quicklink) is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.\n\nYou can enable it by setting value `quicklink.enable` to `true` in NexT config file.\n\n```yml\n# _config.next.yml\nquicklink:\n  enable: true\n\n  # Home page and archive page can be controlled through home and archive options below.\n  # This configuration item is independent of `enable`.\n  home: true\n  archive: false\n  Me: true \n  # \"Me\" is a menu item I add .\n  # Default (true) will initialize quicklink after the load event fires.\n  delay: true\n  # Custom a time in milliseconds by which the browser must execute prefetching.\n  timeout: 3000\n  # Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).\n  priority: true\n```\n\n#### AddToAny\n\nShare your artical to external patform by `AddToAny` .\n\nOn my view , it's useless .........\n\n```yml\n# AddToAny Share. See: https://www.addtoany.com\naddtoany:\n  enable: true\n  buttons:\n    - wechat\n    - facebook\n    - twitter\n```\n\n#### Local Search\n\nPlugin `hexo-generator-searchdb` provide our website with a local search engineer .\n\n* Installation\n\n```shell\n$ npm install hexo-generator-searchdb\n```\n\n* Edit in `_config.yml`\n\n```yml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n* Edit in `_config.next.yml`\n\n```yml\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n\n\n<strong style=\"color : orange ; font-size : 30px\">All right , it's all about Hexo beautifying !</strong>\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Hello-Hexo-NexT","published":1,"updated":"2024-03-15T12:39:17.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dc000f58te66hv7taw","content":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p><strong style=\"color : rgb(128,109,158) ; font-size : 24px\">Hello Hexo and NexT !</strong></p>\n<p><strong style = \"color : rgb(128,109,158) ; font-size : 24px\"> Hexo and NexT yyds ! </strong></p>\n<p>基于Hexo和NexT主题，我的第一个个人网站诞生啦！</p>\n<p>这篇文章记录了建立网站的点点滴滴，并持续更新我对心肝宝贝<a href=\"https://benkangpeng.github.io/\">My Website</a>的持续美化、修缮。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>Hexo对中文的支持十分友好：<a href=\"https://hexo.io/zh-cn/\">Hexo</a>  ,   直接按照<a href=\"https://hexo.io/zh-cn/docs/\">Hexo官方文档</a>进行即可。</p>\n<h4 id=\"1-安装前提\"><a href=\"#1-安装前提\" class=\"headerlink\" title=\"1. 安装前提\"></a>1. 安装前提</h4><p>首先确保计算机上已经安装<a href=\"https://nodejs.org/en\">Node.js</a> 和<a href=\"https://git-scm.com/download/win\">Git</a>。进不去网站的话，安装包已经屯好了：<a href=\"https://pan.baidu.com/s/1fJ36mQkLS5qLYJSBXTeb0g?pwd=91bs\">百度网盘</a>   <a href=\"https://pbk.lanzoum.com/i0b4O19nlu3i\">蓝奏云</a></p>\n<h4 id=\"2-建立Hexo初始网站\"><a href=\"#2-建立Hexo初始网站\" class=\"headerlink\" title=\"2. 建立Hexo初始网站\"></a>2. 建立Hexo初始网站</h4><ul>\n<li><strong>安装Hexo(任意位置)</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>建立一个文件夹存放所有博客文件：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/d/Hexo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>在&#x2F;d&#x2F;Hexo文件夹使用如下方法创建一个blog(可修改名称) , 并进入：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo init blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> ./blog/</span></span><br></pre></td></tr></table></figure>\n\n<p>blog文件夹内存放的就是网站blog源文件,如果想再建立一个网站，同样在Hexo文件夹下使用<code>hexo init blog_2</code>创建blog_2文件夹……</p>\n<ul>\n<li><strong>在blog文件夹中加入hexo相关配置：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo g &amp;&amp; hexo s  <span class=\"comment\"># 完整写法： hexo generate &amp;&amp; hexo server</span></span></span><br></pre></td></tr></table></figure>\n\n<p>进入INFO中的端口<code>http://localhost:4000/</code>即可看到hexo博客框架:</p>\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">\n    <img src=\"https://pic.imgdb.cn/item/650fe8a2c458853aef63bf52.jpg\" alt = \"hexo初始网页.jpg\" style = \"width : 80% \">\n</div>\n* **写文章**\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new <span class=\"string\">&quot;第一篇文章&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Hexo即在<code>/blog/source/_posts/</code>创建了一个<code>第一篇文章.md</code> 。</p>\n<p>实时编辑，在<code>https://localhost:4000</code>端口中刷新便可实时显示。</p>\n<p>设置hexo主题</p>\n<p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。更多主题可在<a href=\"https://hexo.io/themes/\">Themes | Hexo</a>找到。</p>\n<h3 id=\"配置NexT主题\"><a href=\"#配置NexT主题\" class=\"headerlink\" title=\"配置NexT主题\"></a>配置NexT主题</h3><p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。</p>\n<p>Next的最新官网是<a href=\"https://theme-next.js.org/\">NexT - Theme for Hexo (theme-next.js.org)</a> ， 而不是<a href=\"https://theme-next.org/\">Home Page | Theme-Next</a> ， 原因详见：<a href=\"https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848\">Issue</a></p>\n<ul>\n<li><strong>安装NexT</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>配置网站</strong></li>\n</ul>\n<p>你会发现文件中有两个配置文件，在blog中有一个<code>_config.yml</code> ， 即Hexo的配置文件 ， <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next</code>中有一个<code>_config.yml</code> ， 即NexT主题的配置文件。</p>\n<blockquote>\n<p>However, we do not recommend directly modifying the NexT config file. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in <code>node_modules</code>.</p>\n</blockquote>\n<p>In order to resolve this issue, we recommend using the <a href=\"https://theme-next.js.org/docs/getting-started/configuration\">Alternate Theme Config</a> feature to configure theme NexT.</p>\n<p>官网提示我们，在修改NexT配置文件时不要直接修改 <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next</code> ， 否则可能引起冲突。官方提供给我们一个方法<a href=\"https://theme-next.js.org/docs/getting-started/configuration\">Alternate Theme Config</a> ， 简而言之将 <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next\\_config.yml</code>复制到<code>blog\\</code>下，更名为<code>_config.next.yml</code> , 这样直接修改<code>blog\\</code>下的两个配置文件即可对Hexo和NexT均进行配置。</p>\n<p>可手动配置，也可在相应位置执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Hexo Configuration</strong></li>\n</ul>\n<p>Edit <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Benkang</span> <span class=\"string\">Peng</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;Personal Website&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Benkang</span> <span class=\"string\">Peng</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># theme: landscape  记得修改主题为NexT</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>NexT Configuration</strong></li>\n</ul>\n<p>Edit：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">minify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Configuring Favicon</strong></li>\n</ul>\n<p>We can visit <a href=\"https://www.logosc.cn/logo/favicon\">Favicon.ico图标生成器</a> to generate our favicon by inputting characters .</p>\n<p>Put  the favicon files in <code>Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images</code> , then edit <code>NexT config file </code> according to the filename:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/favicon-16x16.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/favicon-32x32.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon.png</span></span><br><span class=\"line\">  <span class=\"comment\">#safari_pinned_tab: /images/logo.svg</span></span><br><span class=\"line\">  <span class=\"comment\">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Also add the avatar :</strong></li>\n</ul>\n<p>For example , I add <code>GNU-Linux-Logo-Penguin-SVG.jpg</code> to <code>Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images</code></p>\n<p>Edit <code>_config.next.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/images/GNU-Linux-Logo-Penguin-SVG.jpg</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Configuring Menu</strong></li>\n</ul>\n<p>We can add the <code>Menu items </code> by removing the comments in <code>_config.next.yml</code> :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-pie-chart</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p>Menu settings item’s format :  <code>key: /link/ || icon</code> .    <code>Key</code> is the name of menu items(home , tags , etc.) ,  and link is the target link to relative url inside your site .  For example , if the menu item is <code>other: /other/ || icon</code> , it will go to <code>https://benkangpeng.github.io/other/</code> when you click it . </p>\n<blockquote>\n<p>Except home and archives, all custom pages under menu section need to be created manually.</p>\n</blockquote>\n<p>Tips above means that , when you add new menu items , you should also create relative files except <code>home and archives</code> as they can create relative files automatically .</p>\n<p>For example , three steps to add menu item <code>tags</code> :</p>\n<p><strong>①Removing the comment of tags :</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-pie-chart</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>②Create relative files :</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">page</span> <span class=\"string\">tags</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>③Editting the markdown file <code>index.md</code> of <code>\\blog_test\\source\\tags\\</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-18 09:10:10</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>That’s all .  As for the ways of the offical doc ,  I’m  absolutely confused ……</p>\n<h3 id=\"Beautify\"><a href=\"#Beautify\" class=\"headerlink\" title=\"Beautify\"></a>Beautify</h3><h4 id=\"Custom-pages\"><a href=\"#Custom-pages\" class=\"headerlink\" title=\"Custom pages\"></a>Custom pages</h4><p>If we want to add a <code>.html</code> to the website and don’t want NexT to influence that <code>.html</code> ‘ s style , which means <code>.html</code> can be displayed on its own style ,  how do we do ?</p>\n<p>The answer is : <strong>Prevent Hexo from rendering my .html files.</strong></p>\n<ul>\n<li>Now create a new page :</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page Other</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit the <code>_config.next.yml</code> to display <code>Other</code> in menu</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">Other:</span> <span class=\"string\">/other/index.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-external-link</span></span><br></pre></td></tr></table></figure>\n\n<p>Find the name of  font-awesome icons from <a href=\"https://fontawesome.dashgame.com/\">Font Awesome</a></p>\n<ul>\n<li>Edit the <code>_config.yml</code> to make sure folder <code>/Other</code> cann’t be rendered by Hexo .</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">&quot;Other/**&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Delete the <code>index.md</code> in <code>/source/Other</code> , and create <code>index.html</code></li>\n</ul>\n<p>We can write something in <code>index.html</code> , which will keep its style and not be rendered by hexo .</p>\n<h4 id=\"Read-more\"><a href=\"#Read-more\" class=\"headerlink\" title=\"Read more\"></a>Read more</h4><p>It’s a common need to show some part of article in home page and a <code>Read more</code> button to view more .</p>\n<p>The best way is : Use <code>&lt;!-- more --&gt;</code> in the article to break the article manually .</p>\n<h4 id=\"Post-Wordcount\"><a href=\"#Post-Wordcount\" class=\"headerlink\" title=\"Post Wordcount\"></a>Post Wordcount</h4><p>Install plugin <code>hexo-word-counter</code> :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-word-counter</span></span><br></pre></td></tr></table></figure>\n\n<p>Edit <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">exclude_codeblock:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">awl:</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\">  <span class=\"attr\">suffix:</span> <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tag-Icon\"><a href=\"#Tag-Icon\" class=\"headerlink\" title=\"Tag Icon\"></a>Tag Icon</h4><p>By default, tags at the bottom of posts have a symbol # at there left side.</p>\n<p>If you prefer icon instead of symbol, edit <code>_config.next.yml</code> like following:</p>\n<h4 id=\"Codeblock-Style\"><a href=\"#Codeblock-Style\" class=\"headerlink\" title=\"Codeblock Style\"></a>Codeblock Style</h4><p>You can go to <a href=\"https://theme-next.js.org/highlight/\">Highlight (theme-next.js.org)</a> to choose the theme you like and it will give the way to edit the <code>.yml</code> .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hljs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">preprocess:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\">  <span class=\"comment\"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">atom-one-dark</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">atom-one-dark</span></span><br><span class=\"line\">  <span class=\"attr\">prism:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">prism</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">prism-dark</span></span><br><span class=\"line\">  <span class=\"comment\"># Add copy button on codeblock</span></span><br><span class=\"line\">  <span class=\"attr\">copy_button:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">show_result:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Available values: default | flat | mac</span></span><br><span class=\"line\">    <span class=\"attr\">style:</span> <span class=\"string\">mac</span></span><br><span class=\"line\">  <span class=\"comment\"># Fold code block</span></span><br><span class=\"line\">  <span class=\"attr\">fold:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">500</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Back-To-Top\"><a href=\"#Back-To-Top\" class=\"headerlink\" title=\"Back To Top\"></a>Back To Top</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">back2top:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Back to top in sidebar.</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\">  <span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reading-Progress\"><a href=\"#Reading-Progress\" class=\"headerlink\" title=\"Reading Progress\"></a>Reading Progress</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"comment\"># Reading progress bar</span></span><br><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: left | right</span></span><br><span class=\"line\">  <span class=\"attr\">start_at:</span> <span class=\"string\">left</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: top | bottom</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">top</span></span><br><span class=\"line\">  <span class=\"attr\">reversed:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#37c6c0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">3px</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GitHub-Banner\"><a href=\"#GitHub-Banner\" class=\"headerlink\" title=\"GitHub Banner\"></a>GitHub Banner</h4><p>NexT provide <code>Follow me on GitHub</code> banner on the right-top corner .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/benkangpeng</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Tag-Plugin\"><a href=\"#Tag-Plugin\" class=\"headerlink\" title=\"Tag Plugin\"></a>Tag Plugin</h3><h4 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h4><p>NexT provide the tag plugin <code>button</code> , which can jump to corresponding link .</p>\n<ul>\n<li><strong>Usage</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% button url , text , icon[class] , [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><ul>\n<li><code>url</code> : Absolute or relative path to URL.</li>\n<li><code>text</code> : Button text. Required if no icon specified.</li>\n<li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li>\n<li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li>\n<li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li>\n</ul>\n</li>\n</ul>\n<p>eg.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn # , Text , home , mouseover %&#125;&#123;% btn # , Superpowers , fa fa-external-link , mouseon %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"# \" title=\"mouseover\"><i class=\"fa fa-home\"></i>Text</a><a class=\"btn\" href=\"# \" title=\"mouseon\"><i class=\"fa-superpowers\"></i>Superpowers</a>\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\"><a class=\"btn\" href=\"https://github.com\" title=\"GitHub\"><i class=\"fab fa-github fa-fw fa-lg\"></i>GitHub</a></div>\n\n<ul>\n<li><strong>We can also use <code>Button</code> inside text , for example :</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For search engineer , I prefer &#123;% btn https://cn.bing.com , Bing , fa fa-search , Bing %&#125; instead of &#123;% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>For search engineer , I prefer <a class=\"btn\" href=\"https://cn.bing.com \" title=\"Bing\"><i class=\"fa fa-search\"></i>Bing</a> instead of <a class=\"btn\" href=\"https://baidu.com \" title=\"Baidu\"><i class=\"fa fa-bomb\"></i>Baidu</a>.</p>\n<ul>\n<li><p><strong>Button margin</strong></p>\n<p>Well , maybe this feature is useful for me to build a aggregation of commonly used website .</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style = &quot;display : flex ; align-items : center ; justify-content : center&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, heading %&#125;&#123;% btn #,, fab fa-edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-notch %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, italic %&#125;&#123;% btn #,, fab fa-scribd %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, fab fa-google %&#125;&#123;% btn #,, fab fa-chrome %&#125;&#123;% btn #,, fab fa-opera %&#125;&#123;% btn #,, gem</span><br><span class=\"line\">\t\t\tfa-rotate-270 %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n        <div><a class=\"btn\" href=\"#\"><i class=\"fa fa-heading\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-edge\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-times\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-circle-notch\"></i></a></div>\n        <div><a class=\"btn\" href=\"#\"><i class=\"fa fa-italic\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-scribd\"></i></a></div>\n        <div><a class=\"btn\" href=\"#\"><i class=\"fab fa-google\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-chrome\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-opera\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-gem fa-rotate-270\"></i></a></div>\n    </div>\n\n\n\n<h4 id=\"Group-Pictures\"><a href=\"#Group-Pictures\" class=\"headerlink\" title=\"Group Pictures\"></a>Group Pictures</h4><p><code>Group Pictures</code> is also an awesome plugin ! Maybe I will use <code>group picture</code> to build my photo repo .</p>\n<ul>\n<li>Usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gp [number]-[layout] %&#125;</span><br><span class=\"line\">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[number]</code> : optional . Total number of pictures .</p>\n<p><code>[layout]</code> : optional . The index of the layout, which can be obtained according to the figure below. For example, if you want to apply the second layout to 4 pictures, then use .</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% grouppicture 4-2 %&#125;&#123;% endgrouppicture %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://theme-next.js.org/images/group-picture-1.png\" alt=\"group-picture-1.png\"></div><div class=\"group-picture-column\"><img src=\"https://theme-next.js.org/images/group-picture-2.png\" alt=\"group-picture-2.png\"></div></div></div>\n\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div></div>\n\n<div class=\"note info\"><p>It’s recommended to enable <code>fancybox</code> before using <code>group pictures</code> .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\n\n<h4 id=\"Link-Grid\"><a href=\"#Link-Grid\" class=\"headerlink\" title=\"Link Grid\"></a>Link Grid</h4><p><code>Link Grid</code> is simple to <code>group pictures</code> , which may be called “Group Links” . It may be really awesome to code a page containing some commonly used links by <code>link grid</code> , I think .</p>\n<ul>\n<li>Usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lg [image] [delimiter] [comment] %&#125;</span><br><span class=\"line\">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[image]</code> : Optional parameter. Default image URL.<br><code>[delimiter]</code> : Optional parameter. If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.<br><code>[comment]</code> : Optional parameter. If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</p>\n<p><code>&#123;% lg [image]  %&#125;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lg %&#125;</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Well , maybe I get in trouble …… I can’t add the code above here , otherwise there are many bugs after running <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> .  But in other file , such as <code>External-link</code> in menu ,  it works .I can’t solve this problem ……</p>\n<h4 id=\"Mermaid-WaveDrom\"><a href=\"#Mermaid-WaveDrom\" class=\"headerlink\" title=\"Mermaid &amp; WaveDrom\"></a>Mermaid &amp; WaveDrom</h4><p>Two plugins above is useful for flow chart painting .</p>\n<h4 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h4><ul>\n<li><strong>Settings</strong></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT config file</span></span><br><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note tag style values:</span></span><br><span class=\"line\">  <span class=\"comment\">#  - simple    bs-callout old alert style. Default.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">simple</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">light_bg_offset:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Usage</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class=\"line\">Content</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[class]</code> : Optional . Supported values : <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> </p>\n<p><code>[no-icon]</code> : Optional . Disable icon in note .</p>\n<p><code>[summary]</code> : Optional . Summary of note .</p>\n<ul>\n<li><strong>Examples</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note %&#125;</span><br><span class=\"line\">without define class style</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note \"><p>without define class style</p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">default style</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><p>default style</p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note primary %&#125;</span><br><span class=\"line\">#### Primary Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note primary\"><h4 id=\"Primary-Header\"><a href=\"#Primary-Header\" class=\"headerlink\" title=\"Primary Header\"></a>Primary Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note info %&#125;</span><br><span class=\"line\">#### Info Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><h4 id=\"Info-Header\"><a href=\"#Info-Header\" class=\"headerlink\" title=\"Info Header\"></a>Info Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note success %&#125;</span><br><span class=\"line\">#### Success Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><h4 id=\"Success-Header\"><a href=\"#Success-Header\" class=\"headerlink\" title=\"Success Header\"></a>Success Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note danger %&#125;</span><br><span class=\"line\">#### Danger Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><h4 id=\"Danger-Header\"><a href=\"#Danger-Header\" class=\"headerlink\" title=\"Danger Header\"></a>Danger Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note info no-icon %&#125;</span><br><span class=\"line\">#### No icon note</span><br><span class=\"line\">Note **without** icon: `note info no-icon`</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info no-icon\"><h4 id=\"No-icon-note\"><a href=\"#No-icon-note\" class=\"headerlink\" title=\"No icon note\"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note primary This is a summary %&#125;</span><br><span class=\"line\">#### Details and summary</span><br><span class=\"line\">Note with summary: `note primary This is a summary`</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"note primary\"><summary><p>This is a summary</p>\n</summary>\n<h4 id=\"Details-and-summary\"><a href=\"#Details-and-summary\" class=\"headerlink\" title=\"Details and summary\"></a>Details and summary</h4><p>Note with summary: <code>note primary This is a summary</code></p>\n\n</details>\n\n<h4 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h4><p>NexT also provide the <code>PDF</code> plugin which can add the pdf viewer in the website .</p>\n<h3 id=\"Third-Party-Plugins\"><a href=\"#Third-Party-Plugins\" class=\"headerlink\" title=\"Third Party Plugins\"></a>Third Party Plugins</h3><h4 id=\"Pjax\"><a href=\"#Pjax\" class=\"headerlink\" title=\"Pjax\"></a>Pjax</h4><blockquote>\n<blockquote>\n<p>Easily enable fast AJAX navigation on any website (using pushState() + XHR)</p>\n</blockquote>\n<p>Pjax is <strong>a standalone JavaScript module</strong> that uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX</a> (XmlHttpRequest) and <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">pushState()</a> to deliver a fast browsing experience.</p>\n<p><em>It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.</em></p>\n<p><strong>No more full page reloads. No more multiple HTTP requests.</strong></p>\n<p><em>Pjax does not rely on other libraries, like jQuery or similar. It is written entirely in vanilla JS.</em></p>\n</blockquote>\n<p><code>&quot;Make users feel like they are browsing an app&quot; </code> ?  True or False ?  Unbelievable !</p>\n<p>Just Edit in <code>_config.next.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Math-Equations\"><a href=\"#Math-Equations\" class=\"headerlink\" title=\"Math Equations\"></a>Math Equations</h4><p>NexT also provide some plugins to render math equations . As I don’t plan to write math notes on my blog (It’s convient to write them in LaTex , isn’t it ?) , so maybe next time !</p>\n<h4 id=\"Lazyload\"><a href=\"#Lazyload\" class=\"headerlink\" title=\"Lazyload\"></a>Lazyload</h4><p>It delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">lazyload:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p>NexT provide the animation behavoir . But for me , it’s unnecessary , and I can close animation function to speed my website .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">motion:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">async:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span></span><br><span class=\"line\">    <span class=\"comment\"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class=\"line\">    <span class=\"attr\">menu_item:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">post_block:</span> <span class=\"string\">fadeIn</span></span><br><span class=\"line\">    <span class=\"attr\">post_header:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">post_body:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">coll_header:</span> <span class=\"string\">fadeInLeft</span></span><br><span class=\"line\">    <span class=\"comment\"># Only for Pisces | Gemini.</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">fadeInUp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Quicklink\"><a href=\"#Quicklink\" class=\"headerlink\" title=\"Quicklink\"></a>Quicklink</h4><p><a href=\"https://github.com/GoogleChromeLabs/quicklink\">Quicklink</a> is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.</p>\n<p>You can enable it by setting value <code>quicklink.enable</code> to <code>true</code> in NexT config file.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">quicklink:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class=\"line\">  <span class=\"comment\"># This configuration item is independent of `enable`.</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">Me:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"comment\"># &quot;Me&quot; is a menu item I add .</span></span><br><span class=\"line\">  <span class=\"comment\"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class=\"line\">  <span class=\"attr\">delay:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">  <span class=\"comment\"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AddToAny\"><a href=\"#AddToAny\" class=\"headerlink\" title=\"AddToAny\"></a>AddToAny</h4><p>Share your artical to external patform by <code>AddToAny</code> .</p>\n<p>On my view , it’s useless ………</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># AddToAny Share. See: https://www.addtoany.com</span></span><br><span class=\"line\"><span class=\"attr\">addtoany:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">buttons:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">wechat</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">facebook</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">twitter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Local-Search\"><a href=\"#Local-Search\" class=\"headerlink\" title=\"Local Search\"></a>Local Search</h4><p>Plugin <code>hexo-generator-searchdb</code> provide our website with a local search engineer .</p>\n<ul>\n<li>Installation</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit in <code>_config.yml</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit in <code>_config.next.yml</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong style=\"color : orange ; font-size : 30px\">All right , it’s all about Hexo beautifying !</strong></p>\n","site":{"data":{}},"length":13946,"excerpt":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p><strong style=\"color : rgb(128,109,158) ; font-size : 24px\">Hello Hexo and NexT !</strong></p>\n<p><strong style = \"color : rgb(128,109,158) ; font-size : 24px\"> Hexo and NexT yyds ! </strong></p>\n<p>基于Hexo和NexT主题，我的第一个个人网站诞生啦！</p>\n<p>这篇文章记录了建立网站的点点滴滴，并持续更新我对心肝宝贝<a href=\"https://benkangpeng.github.io/\">My Website</a>的持续美化、修缮。</p>","more":"<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>Hexo对中文的支持十分友好：<a href=\"https://hexo.io/zh-cn/\">Hexo</a>  ,   直接按照<a href=\"https://hexo.io/zh-cn/docs/\">Hexo官方文档</a>进行即可。</p>\n<h4 id=\"1-安装前提\"><a href=\"#1-安装前提\" class=\"headerlink\" title=\"1. 安装前提\"></a>1. 安装前提</h4><p>首先确保计算机上已经安装<a href=\"https://nodejs.org/en\">Node.js</a> 和<a href=\"https://git-scm.com/download/win\">Git</a>。进不去网站的话，安装包已经屯好了：<a href=\"https://pan.baidu.com/s/1fJ36mQkLS5qLYJSBXTeb0g?pwd=91bs\">百度网盘</a>   <a href=\"https://pbk.lanzoum.com/i0b4O19nlu3i\">蓝奏云</a></p>\n<h4 id=\"2-建立Hexo初始网站\"><a href=\"#2-建立Hexo初始网站\" class=\"headerlink\" title=\"2. 建立Hexo初始网站\"></a>2. 建立Hexo初始网站</h4><ul>\n<li><strong>安装Hexo(任意位置)</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>建立一个文件夹存放所有博客文件：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/d/Hexo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>在&#x2F;d&#x2F;Hexo文件夹使用如下方法创建一个blog(可修改名称) , 并进入：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo init blog</span></span><br><span class=\"line\"></span><br><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> ./blog/</span></span><br></pre></td></tr></table></figure>\n\n<p>blog文件夹内存放的就是网站blog源文件,如果想再建立一个网站，同样在Hexo文件夹下使用<code>hexo init blog_2</code>创建blog_2文件夹……</p>\n<ul>\n<li><strong>在blog文件夹中加入hexo相关配置：</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>查看网页</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo g &amp;&amp; hexo s  <span class=\"comment\"># 完整写法： hexo generate &amp;&amp; hexo server</span></span></span><br></pre></td></tr></table></figure>\n\n<p>进入INFO中的端口<code>http://localhost:4000/</code>即可看到hexo博客框架:</p>\n<div style = \"display : flex ; align-items : center ; justify-content: center;\">\n    <img src=\"https://pic.imgdb.cn/item/650fe8a2c458853aef63bf52.jpg\" alt = \"hexo初始网页.jpg\" style = \"width : 80% \">\n</div>\n* **写文章**\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new <span class=\"string\">&quot;第一篇文章&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Hexo即在<code>/blog/source/_posts/</code>创建了一个<code>第一篇文章.md</code> 。</p>\n<p>实时编辑，在<code>https://localhost:4000</code>端口中刷新便可实时显示。</p>\n<p>设置hexo主题</p>\n<p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。更多主题可在<a href=\"https://hexo.io/themes/\">Themes | Hexo</a>找到。</p>\n<h3 id=\"配置NexT主题\"><a href=\"#配置NexT主题\" class=\"headerlink\" title=\"配置NexT主题\"></a>配置NexT主题</h3><p>我们选择hexo-NexT主题——一个简洁、使用人数多、插件丰富的主题。</p>\n<p>Next的最新官网是<a href=\"https://theme-next.js.org/\">NexT - Theme for Hexo (theme-next.js.org)</a> ， 而不是<a href=\"https://theme-next.org/\">Home Page | Theme-Next</a> ， 原因详见：<a href=\"https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848\">Issue</a></p>\n<ul>\n<li><strong>安装NexT</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>配置网站</strong></li>\n</ul>\n<p>你会发现文件中有两个配置文件，在blog中有一个<code>_config.yml</code> ， 即Hexo的配置文件 ， <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next</code>中有一个<code>_config.yml</code> ， 即NexT主题的配置文件。</p>\n<blockquote>\n<p>However, we do not recommend directly modifying the NexT config file. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in <code>node_modules</code>.</p>\n</blockquote>\n<p>In order to resolve this issue, we recommend using the <a href=\"https://theme-next.js.org/docs/getting-started/configuration\">Alternate Theme Config</a> feature to configure theme NexT.</p>\n<p>官网提示我们，在修改NexT配置文件时不要直接修改 <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next</code> ， 否则可能引起冲突。官方提供给我们一个方法<a href=\"https://theme-next.js.org/docs/getting-started/configuration\">Alternate Theme Config</a> ， 简而言之将 <code>\\Hexo\\blog_test\\node_modules\\hexo-theme-next\\_config.yml</code>复制到<code>blog\\</code>下，更名为<code>_config.next.yml</code> , 这样直接修改<code>blog\\</code>下的两个配置文件即可对Hexo和NexT均进行配置。</p>\n<p>可手动配置，也可在相应位置执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP MINGW64 /d/Hexo/blog</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Hexo Configuration</strong></li>\n</ul>\n<p>Edit <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Benkang</span> <span class=\"string\">Peng</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;Personal Website&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Benkang</span> <span class=\"string\">Peng</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># theme: landscape  记得修改主题为NexT</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>NexT Configuration</strong></li>\n</ul>\n<p>Edit：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">minify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Configuring Favicon</strong></li>\n</ul>\n<p>We can visit <a href=\"https://www.logosc.cn/logo/favicon\">Favicon.ico图标生成器</a> to generate our favicon by inputting characters .</p>\n<p>Put  the favicon files in <code>Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images</code> , then edit <code>NexT config file </code> according to the filename:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/favicon-16x16.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/favicon-32x32.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon.png</span></span><br><span class=\"line\">  <span class=\"comment\">#safari_pinned_tab: /images/logo.svg</span></span><br><span class=\"line\">  <span class=\"comment\">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Also add the avatar :</strong></li>\n</ul>\n<p>For example , I add <code>GNU-Linux-Logo-Penguin-SVG.jpg</code> to <code>Hexo\\blog_test\\node_modules\\hexo-theme-next\\source\\images</code></p>\n<p>Edit <code>_config.next.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/images/GNU-Linux-Logo-Penguin-SVG.jpg</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Configuring Menu</strong></li>\n</ul>\n<p>We can add the <code>Menu items </code> by removing the comments in <code>_config.next.yml</code> :</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-pie-chart</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p>Menu settings item’s format :  <code>key: /link/ || icon</code> .    <code>Key</code> is the name of menu items(home , tags , etc.) ,  and link is the target link to relative url inside your site .  For example , if the menu item is <code>other: /other/ || icon</code> , it will go to <code>https://benkangpeng.github.io/other/</code> when you click it . </p>\n<blockquote>\n<p>Except home and archives, all custom pages under menu section need to be created manually.</p>\n</blockquote>\n<p>Tips above means that , when you add new menu items , you should also create relative files except <code>home and archives</code> as they can create relative files automatically .</p>\n<p>For example , three steps to add menu item <code>tags</code> :</p>\n<p><strong>①Removing the comment of tags :</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-pie-chart</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>②Create relative files :</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">page</span> <span class=\"string\">tags</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>③Editting the markdown file <code>index.md</code> of <code>\\blog_test\\source\\tags\\</code></strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-09-18 09:10:10</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>That’s all .  As for the ways of the offical doc ,  I’m  absolutely confused ……</p>\n<h3 id=\"Beautify\"><a href=\"#Beautify\" class=\"headerlink\" title=\"Beautify\"></a>Beautify</h3><h4 id=\"Custom-pages\"><a href=\"#Custom-pages\" class=\"headerlink\" title=\"Custom pages\"></a>Custom pages</h4><p>If we want to add a <code>.html</code> to the website and don’t want NexT to influence that <code>.html</code> ‘ s style , which means <code>.html</code> can be displayed on its own style ,  how do we do ?</p>\n<p>The answer is : <strong>Prevent Hexo from rendering my .html files.</strong></p>\n<ul>\n<li>Now create a new page :</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">hexo new page Other</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit the <code>_config.next.yml</code> to display <code>Other</code> in menu</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">Other:</span> <span class=\"string\">/other/index.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-external-link</span></span><br></pre></td></tr></table></figure>\n\n<p>Find the name of  font-awesome icons from <a href=\"https://fontawesome.dashgame.com/\">Font Awesome</a></p>\n<ul>\n<li>Edit the <code>_config.yml</code> to make sure folder <code>/Other</code> cann’t be rendered by Hexo .</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">&quot;Other/**&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Delete the <code>index.md</code> in <code>/source/Other</code> , and create <code>index.html</code></li>\n</ul>\n<p>We can write something in <code>index.html</code> , which will keep its style and not be rendered by hexo .</p>\n<h4 id=\"Read-more\"><a href=\"#Read-more\" class=\"headerlink\" title=\"Read more\"></a>Read more</h4><p>It’s a common need to show some part of article in home page and a <code>Read more</code> button to view more .</p>\n<p>The best way is : Use <code>&lt;!-- more --&gt;</code> in the article to break the article manually .</p>\n<h4 id=\"Post-Wordcount\"><a href=\"#Post-Wordcount\" class=\"headerlink\" title=\"Post Wordcount\"></a>Post Wordcount</h4><p>Install plugin <code>hexo-word-counter</code> :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-word-counter</span></span><br></pre></td></tr></table></figure>\n\n<p>Edit <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">exclude_codeblock:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">awl:</span> <span class=\"number\">2</span>    </span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span></span><br><span class=\"line\">  <span class=\"attr\">suffix:</span> <span class=\"string\">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tag-Icon\"><a href=\"#Tag-Icon\" class=\"headerlink\" title=\"Tag Icon\"></a>Tag Icon</h4><p>By default, tags at the bottom of posts have a symbol # at there left side.</p>\n<p>If you prefer icon instead of symbol, edit <code>_config.next.yml</code> like following:</p>\n<h4 id=\"Codeblock-Style\"><a href=\"#Codeblock-Style\" class=\"headerlink\" title=\"Codeblock Style\"></a>Codeblock Style</h4><p>You can go to <a href=\"https://theme-next.js.org/highlight/\">Highlight (theme-next.js.org)</a> to choose the theme you like and it will give the way to edit the <code>.yml</code> .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hljs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">preprocess:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\">  <span class=\"comment\"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">atom-one-dark</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">atom-one-dark</span></span><br><span class=\"line\">  <span class=\"attr\">prism:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">prism</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">prism-dark</span></span><br><span class=\"line\">  <span class=\"comment\"># Add copy button on codeblock</span></span><br><span class=\"line\">  <span class=\"attr\">copy_button:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">show_result:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Available values: default | flat | mac</span></span><br><span class=\"line\">    <span class=\"attr\">style:</span> <span class=\"string\">mac</span></span><br><span class=\"line\">  <span class=\"comment\"># Fold code block</span></span><br><span class=\"line\">  <span class=\"attr\">fold:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">500</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Back-To-Top\"><a href=\"#Back-To-Top\" class=\"headerlink\" title=\"Back To Top\"></a>Back To Top</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">back2top:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Back to top in sidebar.</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\">  <span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reading-Progress\"><a href=\"#Reading-Progress\" class=\"headerlink\" title=\"Reading Progress\"></a>Reading Progress</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"comment\"># Reading progress bar</span></span><br><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: left | right</span></span><br><span class=\"line\">  <span class=\"attr\">start_at:</span> <span class=\"string\">left</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: top | bottom</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">top</span></span><br><span class=\"line\">  <span class=\"attr\">reversed:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#37c6c0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">3px</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GitHub-Banner\"><a href=\"#GitHub-Banner\" class=\"headerlink\" title=\"GitHub Banner\"></a>GitHub Banner</h4><p>NexT provide <code>Follow me on GitHub</code> banner on the right-top corner .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/benkangpeng</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Tag-Plugin\"><a href=\"#Tag-Plugin\" class=\"headerlink\" title=\"Tag Plugin\"></a>Tag Plugin</h3><h4 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h4><p>NexT provide the tag plugin <code>button</code> , which can jump to corresponding link .</p>\n<ul>\n<li><strong>Usage</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% button url , text , icon[class] , [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><ul>\n<li><code>url</code> : Absolute or relative path to URL.</li>\n<li><code>text</code> : Button text. Required if no icon specified.</li>\n<li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li>\n<li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li>\n<li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li>\n</ul>\n</li>\n</ul>\n<p>eg.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn # , Text , home , mouseover %&#125;&#123;% btn # , Superpowers , fa fa-external-link , mouseon %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"# \" title=\"mouseover\"><i class=\"fa fa-home\"></i>Text</a><a class=\"btn\" href=\"# \" title=\"mouseon\"><i class=\"fa-superpowers\"></i>Superpowers</a>\n\n<div style = \"display : flex ; align-items : center ; justify-content: center;\"><a class=\"btn\" href=\"https://github.com\" title=\"GitHub\"><i class=\"fab fa-github fa-fw fa-lg\"></i>GitHub</a></div>\n\n<ul>\n<li><strong>We can also use <code>Button</code> inside text , for example :</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For search engineer , I prefer &#123;% btn https://cn.bing.com , Bing , fa fa-search , Bing %&#125; instead of &#123;% btn https://baidu.com , Baidu , fa fa-bomb , Baidu %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>For search engineer , I prefer <a class=\"btn\" href=\"https://cn.bing.com \" title=\"Bing\"><i class=\"fa fa-search\"></i>Bing</a> instead of <a class=\"btn\" href=\"https://baidu.com \" title=\"Baidu\"><i class=\"fa fa-bomb\"></i>Baidu</a>.</p>\n<ul>\n<li><p><strong>Button margin</strong></p>\n<p>Well , maybe this feature is useful for me to build a aggregation of commonly used website .</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style = &quot;display : flex ; align-items : center ; justify-content : center&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, heading %&#125;&#123;% btn #,, fab fa-edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-notch %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, italic %&#125;&#123;% btn #,, fab fa-scribd %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;&#123;% btn #,, fab fa-google %&#125;&#123;% btn #,, fab fa-chrome %&#125;&#123;% btn #,, fab fa-opera %&#125;&#123;% btn #,, gem</span><br><span class=\"line\">\t\t\tfa-rotate-270 %&#125;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<div style = \"display : flex ; align-items : center ; justify-content : center\">\n        <div><a class=\"btn\" href=\"#\"><i class=\"fa fa-heading\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-edge\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-times\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-circle-notch\"></i></a></div>\n        <div><a class=\"btn\" href=\"#\"><i class=\"fa fa-italic\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-scribd\"></i></a></div>\n        <div><a class=\"btn\" href=\"#\"><i class=\"fab fa-google\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-chrome\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-opera\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-gem fa-rotate-270\"></i></a></div>\n    </div>\n\n\n\n<h4 id=\"Group-Pictures\"><a href=\"#Group-Pictures\" class=\"headerlink\" title=\"Group Pictures\"></a>Group Pictures</h4><p><code>Group Pictures</code> is also an awesome plugin ! Maybe I will use <code>group picture</code> to build my photo repo .</p>\n<ul>\n<li>Usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gp [number]-[layout] %&#125;</span><br><span class=\"line\">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[number]</code> : optional . Total number of pictures .</p>\n<p><code>[layout]</code> : optional . The index of the layout, which can be obtained according to the figure below. For example, if you want to apply the second layout to 4 pictures, then use .</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% grouppicture 4-2 %&#125;&#123;% endgrouppicture %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://theme-next.js.org/images/group-picture-1.png\" alt=\"group-picture-1.png\"></div><div class=\"group-picture-column\"><img src=\"https://theme-next.js.org/images/group-picture-2.png\" alt=\"group-picture-2.png\"></div></div></div>\n\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div><div class=\"group-picture-column\"><img src=\"https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg\" alt=\"NEXT.jpg\"></div></div></div>\n\n<div class=\"note info\"><p>It’s recommended to enable <code>fancybox</code> before using <code>group pictures</code> .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\n\n<h4 id=\"Link-Grid\"><a href=\"#Link-Grid\" class=\"headerlink\" title=\"Link Grid\"></a>Link Grid</h4><p><code>Link Grid</code> is simple to <code>group pictures</code> , which may be called “Group Links” . It may be really awesome to code a page containing some commonly used links by <code>link grid</code> , I think .</p>\n<ul>\n<li>Usage</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lg [image] [delimiter] [comment] %&#125;</span><br><span class=\"line\">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[image]</code> : Optional parameter. Default image URL.<br><code>[delimiter]</code> : Optional parameter. If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.<br><code>[comment]</code> : Optional parameter. If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</p>\n<p><code>&#123;% lg [image]  %&#125;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lg %&#125;</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | https://pic.imgdb.cn/item/65113dadc458853aef1da094.jpg</span><br><span class=\"line\">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Well , maybe I get in trouble …… I can’t add the code above here , otherwise there are many bugs after running <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> .  But in other file , such as <code>External-link</code> in menu ,  it works .I can’t solve this problem ……</p>\n<h4 id=\"Mermaid-WaveDrom\"><a href=\"#Mermaid-WaveDrom\" class=\"headerlink\" title=\"Mermaid &amp; WaveDrom\"></a>Mermaid &amp; WaveDrom</h4><p>Two plugins above is useful for flow chart painting .</p>\n<h4 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h4><ul>\n<li><strong>Settings</strong></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT config file</span></span><br><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note tag style values:</span></span><br><span class=\"line\">  <span class=\"comment\">#  - simple    bs-callout old alert style. Default.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">simple</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">light_bg_offset:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Usage</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class=\"line\">Content</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[class]</code> : Optional . Supported values : <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> </p>\n<p><code>[no-icon]</code> : Optional . Disable icon in note .</p>\n<p><code>[summary]</code> : Optional . Summary of note .</p>\n<ul>\n<li><strong>Examples</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note %&#125;</span><br><span class=\"line\">without define class style</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note \"><p>without define class style</p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">default style</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><p>default style</p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note primary %&#125;</span><br><span class=\"line\">#### Primary Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note primary\"><h4 id=\"Primary-Header\"><a href=\"#Primary-Header\" class=\"headerlink\" title=\"Primary Header\"></a>Primary Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note info %&#125;</span><br><span class=\"line\">#### Info Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><h4 id=\"Info-Header\"><a href=\"#Info-Header\" class=\"headerlink\" title=\"Info Header\"></a>Info Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note success %&#125;</span><br><span class=\"line\">#### Success Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><h4 id=\"Success-Header\"><a href=\"#Success-Header\" class=\"headerlink\" title=\"Success Header\"></a>Success Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note danger %&#125;</span><br><span class=\"line\">#### Danger Header</span><br><span class=\"line\">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><h4 id=\"Danger-Header\"><a href=\"#Danger-Header\" class=\"headerlink\" title=\"Danger Header\"></a>Danger Header</h4><p><strong>Welcome</strong> to <a href=\"https://hexo.io/\">Hexo!</a></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note info no-icon %&#125;</span><br><span class=\"line\">#### No icon note</span><br><span class=\"line\">Note **without** icon: `note info no-icon`</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info no-icon\"><h4 id=\"No-icon-note\"><a href=\"#No-icon-note\" class=\"headerlink\" title=\"No icon note\"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>\n</div>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note primary This is a summary %&#125;</span><br><span class=\"line\">#### Details and summary</span><br><span class=\"line\">Note with summary: `note primary This is a summary`</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"note primary\"><summary><p>This is a summary</p>\n</summary>\n<h4 id=\"Details-and-summary\"><a href=\"#Details-and-summary\" class=\"headerlink\" title=\"Details and summary\"></a>Details and summary</h4><p>Note with summary: <code>note primary This is a summary</code></p>\n\n</details>\n\n<h4 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h4><p>NexT also provide the <code>PDF</code> plugin which can add the pdf viewer in the website .</p>\n<h3 id=\"Third-Party-Plugins\"><a href=\"#Third-Party-Plugins\" class=\"headerlink\" title=\"Third Party Plugins\"></a>Third Party Plugins</h3><h4 id=\"Pjax\"><a href=\"#Pjax\" class=\"headerlink\" title=\"Pjax\"></a>Pjax</h4><blockquote>\n<blockquote>\n<p>Easily enable fast AJAX navigation on any website (using pushState() + XHR)</p>\n</blockquote>\n<p>Pjax is <strong>a standalone JavaScript module</strong> that uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX\">AJAX</a> (XmlHttpRequest) and <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">pushState()</a> to deliver a fast browsing experience.</p>\n<p><em>It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.</em></p>\n<p><strong>No more full page reloads. No more multiple HTTP requests.</strong></p>\n<p><em>Pjax does not rely on other libraries, like jQuery or similar. It is written entirely in vanilla JS.</em></p>\n</blockquote>\n<p><code>&quot;Make users feel like they are browsing an app&quot; </code> ?  True or False ?  Unbelievable !</p>\n<p>Just Edit in <code>_config.next.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Math-Equations\"><a href=\"#Math-Equations\" class=\"headerlink\" title=\"Math Equations\"></a>Math Equations</h4><p>NexT also provide some plugins to render math equations . As I don’t plan to write math notes on my blog (It’s convient to write them in LaTex , isn’t it ?) , so maybe next time !</p>\n<h4 id=\"Lazyload\"><a href=\"#Lazyload\" class=\"headerlink\" title=\"Lazyload\"></a>Lazyload</h4><p>It delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">lazyload:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p>NexT provide the animation behavoir . But for me , it’s unnecessary , and I can close animation function to speed my website .</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">motion:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">async:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span></span><br><span class=\"line\">    <span class=\"comment\"># All available transition variants: https://theme-next.js.org/animate/</span></span><br><span class=\"line\">    <span class=\"attr\">menu_item:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">post_block:</span> <span class=\"string\">fadeIn</span></span><br><span class=\"line\">    <span class=\"attr\">post_header:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">post_body:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">coll_header:</span> <span class=\"string\">fadeInLeft</span></span><br><span class=\"line\">    <span class=\"comment\"># Only for Pisces | Gemini.</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">fadeInUp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Quicklink\"><a href=\"#Quicklink\" class=\"headerlink\" title=\"Quicklink\"></a>Quicklink</h4><p><a href=\"https://github.com/GoogleChromeLabs/quicklink\">Quicklink</a> is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.</p>\n<p>You can enable it by setting value <code>quicklink.enable</code> to <code>true</code> in NexT config file.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.next.yml</span></span><br><span class=\"line\"><span class=\"attr\">quicklink:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class=\"line\">  <span class=\"comment\"># This configuration item is independent of `enable`.</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">Me:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"comment\"># &quot;Me&quot; is a menu item I add .</span></span><br><span class=\"line\">  <span class=\"comment\"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class=\"line\">  <span class=\"attr\">delay:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">  <span class=\"comment\"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AddToAny\"><a href=\"#AddToAny\" class=\"headerlink\" title=\"AddToAny\"></a>AddToAny</h4><p>Share your artical to external patform by <code>AddToAny</code> .</p>\n<p>On my view , it’s useless ………</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># AddToAny Share. See: https://www.addtoany.com</span></span><br><span class=\"line\"><span class=\"attr\">addtoany:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">buttons:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">wechat</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">facebook</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">twitter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Local-Search\"><a href=\"#Local-Search\" class=\"headerlink\" title=\"Local Search\"></a>Local Search</h4><p>Plugin <code>hexo-generator-searchdb</code> provide our website with a local search engineer .</p>\n<ul>\n<li>Installation</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">npm install hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit in <code>_config.yml</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Edit in <code>_config.next.yml</code></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong style=\"color : orange ; font-size : 30px\">All right , it’s all about Hexo beautifying !</strong></p>"},{"title":"Instruction Of Typora","abbrlink":"bfc69175","date":"2021-10-01T11:00:00.000Z","_content":"\n\n\n<p>Typora是一个基于markdown语法的轻量级软件，以下是我在学习markdown语法时的一些笔记。</p>\n\n<!-- more -->\n\n<a href=\"https://pan.baidu.com/s/1A0PSXm8SgOlyFYxgQ7yaDg?pwd=jwuf#list/path=%2F\">Typora软件分享</a>提取码：jwuf\n\n\n\n\n\n### Living preview\n\nLiving preview(实时预览)这也算是Typora的一个特点吧相当于有道云笔记中的右窗口预览，**可自动隐去格式说明中的格式语句** 。 注意一定要在符号与正文之间**加空格**，目的在于区分内容与格式符。文字换行也与一般不同，要**先加空格再enter**。\n\n### 具体符号\n\n#### headers\n\n随着标题的井字符数量的增加，标题优先级逐渐下降。\n\n> ```\n> # 大标题  （ Ctrl + 1 ） \n> ## 第二号标题 （ Ctrl + 2 ) \n> ### 第三号标题  \n> 一直可以到第六号标题\n> ```\n\n#### Blockquote\n\n> ```\n> 语法 ： > 引用内容  \n> 例如输入下列语句：\n> > 心志要坚，意趣要乐。  \n> 输出结果为\n> ```\n\n> 心志要坚，意趣要乐\n\n#### List\n\n> ```\n> 就如平常一样输入序号就行了，此后换行就会自动排序。  \n> 格式 ：1. 第一点        \n> 2. 第二点\n> 3. * 空圆\n>    - 方形\n> * 实圆\n> ```\n\n1. 第一点\n2. 第二点\n3. - 星号\n     - \n\n- \n\n#### Task List\n\n> ```\n> 格式 \n> - [ ] 未完成任务    - [x] 已完成任务\n> 可点击任务点完成任务  \n> ```\n\n-  未完成任务    \n-  已完成任务\n\n#### Code Block\n\n> ```\n> 格式  \n> ​```language\n> 代码段\n> ​```  \n> 其实后面那三个顿号电脑会自动显示的（注意是顿号，  \n> 英文输入法下的Esc下边那个键）  \n> 代码段也有一个神奇的功能，就是能完整显示Typora的代码符，   \n> 要不然本文的一个个事例又是怎么保留住这些Typora符呢。想想也知道，  \n> 设计一个这样的文本格式，  \n> 当然也要兼顾代码的特殊符号呀，比如代码里的#、*是不能参与Typora的格式符的。  \n> 代码语句的输入  \n> 格式 \n> ```\n\n```\n// Reverse Bits Ordering\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    genvar i ;\n    generate\n        for(i = 0 ; i < 100 ; i++) begin : generate_name\n            assign out[i] = in [99 - i] ;\n        end\n    endgenerate\nendmodule\n```\n\n#### Math Blocks\n\n```\n$ 单行输入 $\n$ \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}  \n$\n\n```\n\n\n\n\n\n#### Table\n\n> ```\n> | A  | B |\n> | C  | D |\n> | E  | F |  \n> 点击表格内有功能选择\n> ```\n\n|  A   |  B   |\n| :--: | :--: |\n|  C   |  D   |\n|  E   |  F   |\n\n\n\n#### 分割线\n\n> ```\n> 格式 \n> --- \n> 或者 \n> *** \n> 例如 \n> 我是分割线 \n> \n> ---\n> \n> 我是分割线 \n> \n> ***\n> ```\n\n我是分割线 \n\n------\n\n我是分割线 \n\n------\n\n\n\n#### 目录\n\n> ```\n> 格式 \n> 输入[toc]再回车就行了 （table of content) \n> 就会生成一个目录，点击相应标记即可跳转 \n> 例如 \n> [toc] \n> ```\n\n\n\n#### Link\n\n> ```\n> 格式 \n> [给链接起个名字](写上具体网址)\n> [知乎](https://www.zhihu.com/) 注意用英文输入法下的括号  \n> 在markdown文件中按住Ctrl键同时点击网址即可直接打开\n> ```\n\n[知乎](www.zhihu.com)\n\n#### Insert Pictures\n\n> ```\n> 格式  \n> ![起个名字](存储位置) \n> 例如 \n> ![思维导图](D:\\desktop\\Typora.png) \n> 当然啦，直接把图片拖过来复制一下不香吗\n> ```\n\n- 可将typora设置如下，可避免图片丢失导致markdown文件中图片无法查看（也可以使用网络图床存储）\n\n  ![img](file://D:/Software/Typora/Pictures/1693142385073.png?lastModify=1695005959)","source":"_posts/Instruction-Of-Typora.md","raw":"---\ntitle: Instruction Of Typora\ntags: Software\nabbrlink: bfc69175\ndate: 2021-10-01 19:00:00\n---\n\n\n\n<p>Typora是一个基于markdown语法的轻量级软件，以下是我在学习markdown语法时的一些笔记。</p>\n\n<!-- more -->\n\n<a href=\"https://pan.baidu.com/s/1A0PSXm8SgOlyFYxgQ7yaDg?pwd=jwuf#list/path=%2F\">Typora软件分享</a>提取码：jwuf\n\n\n\n\n\n### Living preview\n\nLiving preview(实时预览)这也算是Typora的一个特点吧相当于有道云笔记中的右窗口预览，**可自动隐去格式说明中的格式语句** 。 注意一定要在符号与正文之间**加空格**，目的在于区分内容与格式符。文字换行也与一般不同，要**先加空格再enter**。\n\n### 具体符号\n\n#### headers\n\n随着标题的井字符数量的增加，标题优先级逐渐下降。\n\n> ```\n> # 大标题  （ Ctrl + 1 ） \n> ## 第二号标题 （ Ctrl + 2 ) \n> ### 第三号标题  \n> 一直可以到第六号标题\n> ```\n\n#### Blockquote\n\n> ```\n> 语法 ： > 引用内容  \n> 例如输入下列语句：\n> > 心志要坚，意趣要乐。  \n> 输出结果为\n> ```\n\n> 心志要坚，意趣要乐\n\n#### List\n\n> ```\n> 就如平常一样输入序号就行了，此后换行就会自动排序。  \n> 格式 ：1. 第一点        \n> 2. 第二点\n> 3. * 空圆\n>    - 方形\n> * 实圆\n> ```\n\n1. 第一点\n2. 第二点\n3. - 星号\n     - \n\n- \n\n#### Task List\n\n> ```\n> 格式 \n> - [ ] 未完成任务    - [x] 已完成任务\n> 可点击任务点完成任务  \n> ```\n\n-  未完成任务    \n-  已完成任务\n\n#### Code Block\n\n> ```\n> 格式  \n> ​```language\n> 代码段\n> ​```  \n> 其实后面那三个顿号电脑会自动显示的（注意是顿号，  \n> 英文输入法下的Esc下边那个键）  \n> 代码段也有一个神奇的功能，就是能完整显示Typora的代码符，   \n> 要不然本文的一个个事例又是怎么保留住这些Typora符呢。想想也知道，  \n> 设计一个这样的文本格式，  \n> 当然也要兼顾代码的特殊符号呀，比如代码里的#、*是不能参与Typora的格式符的。  \n> 代码语句的输入  \n> 格式 \n> ```\n\n```\n// Reverse Bits Ordering\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    genvar i ;\n    generate\n        for(i = 0 ; i < 100 ; i++) begin : generate_name\n            assign out[i] = in [99 - i] ;\n        end\n    endgenerate\nendmodule\n```\n\n#### Math Blocks\n\n```\n$ 单行输入 $\n$ \\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}  \n$\n\n```\n\n\n\n\n\n#### Table\n\n> ```\n> | A  | B |\n> | C  | D |\n> | E  | F |  \n> 点击表格内有功能选择\n> ```\n\n|  A   |  B   |\n| :--: | :--: |\n|  C   |  D   |\n|  E   |  F   |\n\n\n\n#### 分割线\n\n> ```\n> 格式 \n> --- \n> 或者 \n> *** \n> 例如 \n> 我是分割线 \n> \n> ---\n> \n> 我是分割线 \n> \n> ***\n> ```\n\n我是分割线 \n\n------\n\n我是分割线 \n\n------\n\n\n\n#### 目录\n\n> ```\n> 格式 \n> 输入[toc]再回车就行了 （table of content) \n> 就会生成一个目录，点击相应标记即可跳转 \n> 例如 \n> [toc] \n> ```\n\n\n\n#### Link\n\n> ```\n> 格式 \n> [给链接起个名字](写上具体网址)\n> [知乎](https://www.zhihu.com/) 注意用英文输入法下的括号  \n> 在markdown文件中按住Ctrl键同时点击网址即可直接打开\n> ```\n\n[知乎](www.zhihu.com)\n\n#### Insert Pictures\n\n> ```\n> 格式  \n> ![起个名字](存储位置) \n> 例如 \n> ![思维导图](D:\\desktop\\Typora.png) \n> 当然啦，直接把图片拖过来复制一下不香吗\n> ```\n\n- 可将typora设置如下，可避免图片丢失导致markdown文件中图片无法查看（也可以使用网络图床存储）\n\n  ![img](file://D:/Software/Typora/Pictures/1693142385073.png?lastModify=1695005959)","slug":"Instruction-Of-Typora","published":1,"updated":"2024-03-15T12:39:23.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dd000h58tecaaa9gtv","content":"<p>Typora是一个基于markdown语法的轻量级软件，以下是我在学习markdown语法时的一些笔记。</p>\n\n<span id=\"more\"></span>\n\n<p><a href=\"https://pan.baidu.com/s/1A0PSXm8SgOlyFYxgQ7yaDg?pwd=jwuf#list/path=%2F\">Typora软件分享</a>提取码：jwuf</p>\n<h3 id=\"Living-preview\"><a href=\"#Living-preview\" class=\"headerlink\" title=\"Living preview\"></a>Living preview</h3><p>Living preview(实时预览)这也算是Typora的一个特点吧相当于有道云笔记中的右窗口预览，<strong>可自动隐去格式说明中的格式语句</strong> 。 注意一定要在符号与正文之间<strong>加空格</strong>，目的在于区分内容与格式符。文字换行也与一般不同，要<strong>先加空格再enter</strong>。</p>\n<h3 id=\"具体符号\"><a href=\"#具体符号\" class=\"headerlink\" title=\"具体符号\"></a>具体符号</h3><h4 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h4><p>随着标题的井字符数量的增加，标题优先级逐渐下降。</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 大标题  （ Ctrl + 1 ） </span><br><span class=\"line\">## 第二号标题 （ Ctrl + 2 ) </span><br><span class=\"line\">### 第三号标题  </span><br><span class=\"line\">一直可以到第六号标题</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"Blockquote\"><a href=\"#Blockquote\" class=\"headerlink\" title=\"Blockquote\"></a>Blockquote</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法 ： &gt; 引用内容  </span><br><span class=\"line\">例如输入下列语句：</span><br><span class=\"line\">&gt; 心志要坚，意趣要乐。  </span><br><span class=\"line\">输出结果为</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>心志要坚，意趣要乐</p>\n</blockquote>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就如平常一样输入序号就行了，此后换行就会自动排序。  </span><br><span class=\"line\">格式 ：1. 第一点        </span><br><span class=\"line\">2. 第二点</span><br><span class=\"line\">3. * 空圆</span><br><span class=\"line\">   - 方形</span><br><span class=\"line\">* 实圆</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li>第一点</li>\n<li>第二点</li>\n<li><ul>\n<li><h2 id=\"星号\"><a href=\"#星号\" class=\"headerlink\" title=\"星号\"></a>星号</h2></li>\n</ul>\n</li>\n</ol>\n<p>- </p>\n<h4 id=\"Task-List\"><a href=\"#Task-List\" class=\"headerlink\" title=\"Task List\"></a>Task List</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">- [ ] 未完成任务    - [x] 已完成任务</span><br><span class=\"line\">可点击任务点完成任务  </span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>未完成任务    </li>\n<li>已完成任务</li>\n</ul>\n<h4 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式  </span><br><span class=\"line\">​```language</span><br><span class=\"line\">代码段</span><br><span class=\"line\">​```  </span><br><span class=\"line\">其实后面那三个顿号电脑会自动显示的（注意是顿号，  </span><br><span class=\"line\">英文输入法下的Esc下边那个键）  </span><br><span class=\"line\">代码段也有一个神奇的功能，就是能完整显示Typora的代码符，   </span><br><span class=\"line\">要不然本文的一个个事例又是怎么保留住这些Typora符呢。想想也知道，  </span><br><span class=\"line\">设计一个这样的文本格式，  </span><br><span class=\"line\">当然也要兼顾代码的特殊符号呀，比如代码里的#、*是不能参与Typora的格式符的。  </span><br><span class=\"line\">代码语句的输入  </span><br><span class=\"line\">格式 </span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Reverse Bits Ordering</span><br><span class=\"line\">module top_module(</span><br><span class=\"line\">    input [99:0] in ,</span><br><span class=\"line\">    output [99:0] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    genvar i ;</span><br><span class=\"line\">    generate</span><br><span class=\"line\">        for(i = 0 ; i &lt; 100 ; i++) begin : generate_name</span><br><span class=\"line\">            assign out[i] = in [99 - i] ;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    endgenerate</span><br><span class=\"line\">endmodule</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Math-Blocks\"><a href=\"#Math-Blocks\" class=\"headerlink\" title=\"Math Blocks\"></a>Math Blocks</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 单行输入 $</span><br><span class=\"line\">$ \\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125;</span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;  </span><br><span class=\"line\">$</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table\"></a>Table</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| A  | B |</span><br><span class=\"line\">| C  | D |</span><br><span class=\"line\">| E  | F |  </span><br><span class=\"line\">点击表格内有功能选择</span><br></pre></td></tr></table></figure>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">C</td>\n<td align=\"center\">D</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">F</td>\n</tr>\n</tbody></table>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">--- </span><br><span class=\"line\">或者 </span><br><span class=\"line\">*** </span><br><span class=\"line\">例如 </span><br><span class=\"line\">我是分割线 </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">我是分割线 </span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我是分割线 </p>\n<hr>\n<p>我是分割线 </p>\n<hr>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">输入[toc]再回车就行了 （table of content) </span><br><span class=\"line\">就会生成一个目录，点击相应标记即可跳转 </span><br><span class=\"line\">例如 </span><br><span class=\"line\">[toc] </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">[给链接起个名字](写上具体网址)</span><br><span class=\"line\">[知乎](https://www.zhihu.com/) 注意用英文输入法下的括号  </span><br><span class=\"line\">在markdown文件中按住Ctrl键同时点击网址即可直接打开</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><a href=\"www.zhihu.com\">知乎</a></p>\n<h4 id=\"Insert-Pictures\"><a href=\"#Insert-Pictures\" class=\"headerlink\" title=\"Insert Pictures\"></a>Insert Pictures</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式  </span><br><span class=\"line\">![起个名字](存储位置) </span><br><span class=\"line\">例如 </span><br><span class=\"line\">![思维导图](D:\\desktop\\Typora.png) </span><br><span class=\"line\">当然啦，直接把图片拖过来复制一下不香吗</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>可将typora设置如下，可避免图片丢失导致markdown文件中图片无法查看（也可以使用网络图床存储）</p>\n<p><img src=\"file://D:/Software/Typora/Pictures/1693142385073.png?lastModify=1695005959\" alt=\"img\"></p>\n</li>\n</ul>\n","site":{"data":{}},"length":1673,"excerpt":"<p>Typora是一个基于markdown语法的轻量级软件，以下是我在学习markdown语法时的一些笔记。</p>","more":"<p><a href=\"https://pan.baidu.com/s/1A0PSXm8SgOlyFYxgQ7yaDg?pwd=jwuf#list/path=%2F\">Typora软件分享</a>提取码：jwuf</p>\n<h3 id=\"Living-preview\"><a href=\"#Living-preview\" class=\"headerlink\" title=\"Living preview\"></a>Living preview</h3><p>Living preview(实时预览)这也算是Typora的一个特点吧相当于有道云笔记中的右窗口预览，<strong>可自动隐去格式说明中的格式语句</strong> 。 注意一定要在符号与正文之间<strong>加空格</strong>，目的在于区分内容与格式符。文字换行也与一般不同，要<strong>先加空格再enter</strong>。</p>\n<h3 id=\"具体符号\"><a href=\"#具体符号\" class=\"headerlink\" title=\"具体符号\"></a>具体符号</h3><h4 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h4><p>随着标题的井字符数量的增加，标题优先级逐渐下降。</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 大标题  （ Ctrl + 1 ） </span><br><span class=\"line\">## 第二号标题 （ Ctrl + 2 ) </span><br><span class=\"line\">### 第三号标题  </span><br><span class=\"line\">一直可以到第六号标题</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"Blockquote\"><a href=\"#Blockquote\" class=\"headerlink\" title=\"Blockquote\"></a>Blockquote</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法 ： &gt; 引用内容  </span><br><span class=\"line\">例如输入下列语句：</span><br><span class=\"line\">&gt; 心志要坚，意趣要乐。  </span><br><span class=\"line\">输出结果为</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>心志要坚，意趣要乐</p>\n</blockquote>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就如平常一样输入序号就行了，此后换行就会自动排序。  </span><br><span class=\"line\">格式 ：1. 第一点        </span><br><span class=\"line\">2. 第二点</span><br><span class=\"line\">3. * 空圆</span><br><span class=\"line\">   - 方形</span><br><span class=\"line\">* 实圆</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li>第一点</li>\n<li>第二点</li>\n<li><ul>\n<li><h2 id=\"星号\"><a href=\"#星号\" class=\"headerlink\" title=\"星号\"></a>星号</h2></li>\n</ul>\n</li>\n</ol>\n<p>- </p>\n<h4 id=\"Task-List\"><a href=\"#Task-List\" class=\"headerlink\" title=\"Task List\"></a>Task List</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">- [ ] 未完成任务    - [x] 已完成任务</span><br><span class=\"line\">可点击任务点完成任务  </span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>未完成任务    </li>\n<li>已完成任务</li>\n</ul>\n<h4 id=\"Code-Block\"><a href=\"#Code-Block\" class=\"headerlink\" title=\"Code Block\"></a>Code Block</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式  </span><br><span class=\"line\">​```language</span><br><span class=\"line\">代码段</span><br><span class=\"line\">​```  </span><br><span class=\"line\">其实后面那三个顿号电脑会自动显示的（注意是顿号，  </span><br><span class=\"line\">英文输入法下的Esc下边那个键）  </span><br><span class=\"line\">代码段也有一个神奇的功能，就是能完整显示Typora的代码符，   </span><br><span class=\"line\">要不然本文的一个个事例又是怎么保留住这些Typora符呢。想想也知道，  </span><br><span class=\"line\">设计一个这样的文本格式，  </span><br><span class=\"line\">当然也要兼顾代码的特殊符号呀，比如代码里的#、*是不能参与Typora的格式符的。  </span><br><span class=\"line\">代码语句的输入  </span><br><span class=\"line\">格式 </span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Reverse Bits Ordering</span><br><span class=\"line\">module top_module(</span><br><span class=\"line\">    input [99:0] in ,</span><br><span class=\"line\">    output [99:0] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    genvar i ;</span><br><span class=\"line\">    generate</span><br><span class=\"line\">        for(i = 0 ; i &lt; 100 ; i++) begin : generate_name</span><br><span class=\"line\">            assign out[i] = in [99 - i] ;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    endgenerate</span><br><span class=\"line\">endmodule</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Math-Blocks\"><a href=\"#Math-Blocks\" class=\"headerlink\" title=\"Math Blocks\"></a>Math Blocks</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 单行输入 $</span><br><span class=\"line\">$ \\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125;</span><br><span class=\"line\">\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\</span><br><span class=\"line\">\\end&#123;vmatrix&#125;  </span><br><span class=\"line\">$</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table\"></a>Table</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| A  | B |</span><br><span class=\"line\">| C  | D |</span><br><span class=\"line\">| E  | F |  </span><br><span class=\"line\">点击表格内有功能选择</span><br></pre></td></tr></table></figure>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">C</td>\n<td align=\"center\">D</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">F</td>\n</tr>\n</tbody></table>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">--- </span><br><span class=\"line\">或者 </span><br><span class=\"line\">*** </span><br><span class=\"line\">例如 </span><br><span class=\"line\">我是分割线 </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">我是分割线 </span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我是分割线 </p>\n<hr>\n<p>我是分割线 </p>\n<hr>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">输入[toc]再回车就行了 （table of content) </span><br><span class=\"line\">就会生成一个目录，点击相应标记即可跳转 </span><br><span class=\"line\">例如 </span><br><span class=\"line\">[toc] </span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式 </span><br><span class=\"line\">[给链接起个名字](写上具体网址)</span><br><span class=\"line\">[知乎](https://www.zhihu.com/) 注意用英文输入法下的括号  </span><br><span class=\"line\">在markdown文件中按住Ctrl键同时点击网址即可直接打开</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><a href=\"www.zhihu.com\">知乎</a></p>\n<h4 id=\"Insert-Pictures\"><a href=\"#Insert-Pictures\" class=\"headerlink\" title=\"Insert Pictures\"></a>Insert Pictures</h4><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式  </span><br><span class=\"line\">![起个名字](存储位置) </span><br><span class=\"line\">例如 </span><br><span class=\"line\">![思维导图](D:\\desktop\\Typora.png) </span><br><span class=\"line\">当然啦，直接把图片拖过来复制一下不香吗</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>可将typora设置如下，可避免图片丢失导致markdown文件中图片无法查看（也可以使用网络图床存储）</p>\n<p><img src=\"file://D:/Software/Typora/Pictures/1693142385073.png?lastModify=1695005959\" alt=\"img\"></p>\n</li>\n</ul>"},{"title":"HDLBits Solutions","abbrlink":"4ff0bc03","date":"2021-10-01T12:00:00.000Z","_content":"\n<h3>Abstract</h3>\n\n<p>The solutions and my notes of <a href=\"[Problem sets - HDLBits (01xz.net)](https://hdlbits.01xz.net/wiki/Problem_sets)\">HDLBits</a> are written in this document .</p>\n\n<!-- more -->\n\n[TOC]\n\n\n\n# Getting Started\n\n### Getting Started\n\n```verilog\nmodule top_module( output one );\n\t\n\tassign one = 1'b1;\n\t\nendmodule\n```\n\n### Output Zero\n\n```verilog\nmodule top_module ( output zero );\n\t\n\tassign zero = 1'b0;\n\t\nendmodule\n```\n\n\n\n# Verilog Language\n\n## Basics\n\n### Simple wire\n\n```verilog\nmodule top_module( input in, output out );\n\tassign out = in;\nendmodule\n\n```\n\n### Four wires\n\n```verilog\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n\t\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\n\n\t// If we're certain about the width of each signal, using \n\t// the concatenation operator is equivalent and shorter:\n\t// assign {w,x,y,z} = {a,b,b,c};\n\t\nendmodule\n\n```\n\n### Inverter\n\n```verilog\nmodule top_module(\n\tinput in,\n\toutput out\n);\n\t\n\tassign out = ~in;\n\t\nendmodule\n\n```\n\n### AND gate\n\n```verilog\nmodule top_module( \n    input a, \n    input b, \n    output out );\n\tassign out = a & b ;\nendmodule\n\n```\n\n### NOR gate\n\n```verilog\nmodule top_module( \n    input a, \n    input b, \n    output out );\n    assign out = ! (a | b) ;\nendmodule\n\n```\n\n\n\n### XNOR gate\n\n\n\n### Declaring wires\n\n\n\n### 7458 chip\n\n\n\n## Vectors\n\n### Vectors\n\n\n\n## More Verilog Features\n\n### *Combinational for-loop : Vector reversal 2\n\n> Given a 100-bit input vector [99:0], reverse its bit ordering.\n\n```verilog\n// False Vesion\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    for(int i = 0 ; i < 100 ; i++) begin\n        assign out[i] = in [99 - i] ;\n    end\nendmodule\n```\n\n> ```shell\n> Error (10170): Verilog HDL syntax error at top_module.v(6) near text: \"for\";  expecting \"endmodule\". \n> ```\n\n为什么是这样的报错呢？显示在for循环那一行前缺少一个endmodule\n\n> 在module内部，只能**声明输入**、**输出端口、内部信号以及使用连续赋值**（`assign` 语句）来描述硬件电路的连续逻辑\n\n因此，`verilog`编译器认为，`for`循环前应该有一个`endmodule`以结束该`module`,此后才能开始`for-loop`的声明。\n\n**为什么Verilog规定Module内部不能声明for-loop?**\n\n> 当涉及到硬件描述语言（HDL）如Verilog时，有一些关键的设计原则和语法规则是不同于通用编程语言（如C、Python）的。\n>\n> Verilog 是为硬件设计而设计的，其目的是描述硬件电路的结构和行为，而不是传统意义上的“编程”。在硬件电路中，信号是在不同的时间步长上并行计算的，而不是按顺序执行的像在软件中一样。这导致了一些语法规则的不同。\n>\n> 具体来说，以下是为什么在 Verilog 中不能直接将 `for` 循环放在模块内部的原因：\n>\n> 1. **并行性：** Verilog 中的代码被解释为电路，其中不同的信号在相同的时间步长上并行地计算。这与传统编程语言中的迭代循环不同，后者按顺序执行。在硬件电路中，不同的信号和逻辑是同时计算的，因此 `for` 循环的概念与硬件的并行性不一致。\n> 2. **延迟和时间问题：** 在 Verilog 中，信号的传播和逻辑运算都需要考虑时间延迟。循环的迭代次数可能需要在编译时已知，但在硬件中，延迟可能会影响电路的行为。如果允许在模块内部使用 `for` 循环，编译器就需要处理如何在时间上正确地展开循环和处理延迟的问题。\n>\n> 为了符合硬件的特性，Verilog 引入了生成语句（generate statements），允许在编译时生成不同的硬件结构，这包括使用 `for` 循环来生成多个类似的硬件逻辑。生成语句允许在不同的时间步长上并行生成硬件，而不会引入运行时的顺序问题。\n\n简单说就是：`for-loop`内不同层次(i = 1 , 2 ,3 ……)，体现了顺序的先后，是软件编程的思维；而`verilog`中`assign`描述的各硬件是并行运行的，是硬件编程的思维；二者需要区分开来:smile:\n\n我们使用`generate`来实现(generate生成多个并行计算模块)：[generate介绍]([Verilog中generate的使用 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/107047600))\n\n```verilog\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    genvar i ;//state a variable i \n    generate\n        for(i = 0 ; i < 100 ; i++) begin : generate_name\n            assign out[i] = in [99 - i] ; // type of out is wire\n        end\n    endgenerate\nendmodule\n```\n\n或者将`for-loop`写在`always`中：\n\n```verilog\nmodule top_module(\n    input [99:0] in ,\n    output reg [99:0] out \n) ;\n    always @(*)begin\n        for(int i = 0 ; i < $bits(out) ; i++ ) begin\n            //$bits(signal)获取信号位长\n            out[i] = in [ $bits(out) - 1 - i ] ; \n            //type of out is reg\n        end\n    end\nendmodule\n```\n\n### Combinational for-loop:255-bit population count\n\n> A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\n\n```verilog\nmodule top_module( \n    input [254:0] in,\n    output reg [7:0] out );\n    always @(*) begin\n       out = 0 ;//寄存器型变量在always块中初始化\n        for(int i = 0 ; i < 255 ; i++) begin\n            out = out + in[i] ; \n        end\n    end\nendmodule\n\n```\n\n\n\n### Generate for-loop:1000-bit binary adder 2\n\n> Create a 100-bit binary ripple-carry adder by instantiating 100 [full adders](https://hdlbits.01xz.net/wiki/Fadd). The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from *each* full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.\n\n```verilog\nmodule top_module( \n    input [99:0] a, b,\n    input cin,\n    output [99:0] cout,\n    output [99:0] sum );\n\tgenerate\n        genvar i ;//好像在for循环内声明genvar i 会报错\n        assign sum[0] = a[0] ^ b[0] ^ cin ;\n        assign cout[0] = a[0] & b[0] | a[0] & cin | b[0] & cin ;\n        for (i = 1 ; i < 100 ; i++) begin : generate_name \n            assign sum[i] = a[i] ^ b[i] ^ cout[i-1] ;\n            assign cout[i] = a[i] & b[i] | a[i] & cout[i-1] | b[i] & cout[i-1] ;\n        end\n    endgenerate\nendmodule\n\n```\n\n\n\n### *Generate for-loop:100-digit BCD adder\n\n> You are provided with a BCD one-digit adder named `bcd_fadd` that adds two BCD digits and carry-in, and produces a sum and carry-out.\n>\n> ```\n> module bcd_fadd (\n>     input [3:0] a,\n>     input [3:0] b,\n>     input     cin,\n>     output   cout,\n>     output [3:0] sum );\n> ```\n>\n> Instantiate 100 copies of `bcd_fadd` to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.\n\n```verilog\n//False Verion \nmodule top_module( \n    input [399:0] a, b,\n    input cin,\n    output reg cout,\n    output reg [399:0] sum );\n    genvar i , j ;\n    reg [99:0] temp_cout ;\n    assign cout = temp_cout[99] ;\n    generate\n        bcd_fadd U0( a[3:0] , b[3:0] , cin , temp_cout[0] , sum[3:0]) ;\n        for (i = 7 , j = 0; i < 400 ;  i = i + 4 , j++) begin : name \n            bcd_fadd U1( a[i:i-3] , b[i:i-3] , temp_cout[j] , sum[i:i-3]) ;\n        end\n    endgenerate\nendmodule\n\n```\n\n> 报错信息：Error (10170): Verilog HDL syntax error at top_module.v(12) near text: \",\";  expecting \";\"\n\n没有查到相关信息(先留一个坑)，猜测：`for-loop`中不能有两个`genvar`,于是不能出现`,` ,提示你要用`;`\n\n```verilog\n//Right Verion \nmodule top_module( \n    input [399:0] a, b,\n    input cin,\n    output reg cout,\n    output reg [399:0] sum );\n    genvar i ;\n    reg [99:0] temp_cout ;\n    assign cout = temp_cout[99] ;\n    generate\n        bcd_fadd U0( a[3:0] , b[3:0] , cin , temp_cout[0] , sum[3:0]) ;\n        for (i = 7 ; i < 400 ;  i = i + 4 ) begin : name \n            bcd_fadd U1( a[i:i-3] , b[i:i-3] , temp_cout[(i + 1) / 4 - 2] , temp_cout[(i + 1) / 4 - 1] , sum[i:i-3]) ;\n        end\n    endgenerate\nendmodule\n```\n\n**此处实现一下`bcd_fadd`**\n\n```verilog\nmodule bcd_fadd(\n    input [3 : 0] a , b ,\n    input cin , \n    output cout ,\n    output [3:0] sum\n) ;\n    wire [4:0] temp ;\n    assign temp = a + b + cin ;\n    assign {cout , sum} = (temp>9) ? (temp+6) : temp ; \nendmodule\n```\n\n\n\n# Circuits\n\n## Combinational Logic\n\n### Basic Gates\n\n#### Even longer vectors\n\n> See also the shorter version: [Gates and vectors](https://hdlbits.01xz.net/wiki/gatesv).\n>\n> You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour:\n>\n> - **out_both**: Each bit of this output vector should indicate whether *both* the corresponding input bit and its neighbour to the **left** are '1'. For example, `out_both[98]` should indicate if `in[98]` and `in[99]` are both 1. Since `in[99]` has no neighbour to the left, the answer is obvious so we don't need to know `out_both[99]`.\n> - **out_any**: Each bit of this output vector should indicate whether *any* of the corresponding input bit and its neighbour to the **right** are '1'. For example, `out_any[2]` should indicate if either `in[2]` or `in[1]` are 1. Since `in[0]` has no neighbour to the right, the answer is obvious so we don't need to know `out_any[0]`.\n> - **out_different**: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the **left**. For example, `out_different[98]` should indicate if `in[98]` is different from `in[99]`. For this part, treat the vector as wrapping around, so `in[99]`'s neighbour to the left is `in[0]`.\n\n```verilog\n//My vesion\nmodule top_module( \n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different );\n    genvar i ;\n\tgenerate\n        for( i = 0 ; i < 99 ; i++ ) begin : generate_name\n            assign out_both[i] = in[i] & in[i+1] ;\n            assign out_any[i+1]= in[i+1] | in[i] ;\n            assign out_different[i] = in[i] ^ in[i+1] ;\n        end\n        assign out_different[99] = in[99] ^ in[0] ;\n    endgenerate\nendmodule\n```\n\n```verilog\n//Offical vesion\nmodule top_module( \n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different );\n    assign out_both = in[98:0] & in[99:1] ;\n    assign out_any  = in[99:1] | in[98:0] ;\n    assign out_different = in ^ { in[0] , in[99:1] } ;\nendmodule\n```\n\n### Multiplexers\n\n#### 9-to-1 multiplexer\n\n> Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\n\n```verilog\n//Flase vesion\nmodule top_module( \n    input [15:0] a, b, c, d, e, f, g, h, i,\n    input [3:0] sel,\n    output reg [15:0] out );\n    always @(*)begin \n    case(sel)\n        4'b0000 : out = a ;\n        4'b0001 : out = b ;\n        4'b0010 : out = c ;\n        4'b0011 : out = d ;\n        4'b0100 : out = e ;\n        4'b0101 : out = f ;\n        4'b0110 : out = g ;\n        4'b0111 : out = h ;\n        4'b1000 : out = i ;\n     \tdefault : out = 16'hFFFF ;//十六进制应该为4'hFFFF\n        //踩过的坑 ： out = 1 ; out = 0xFFFF ; out = 4'hFFFF\n        endcase\n    end      \nendmodule\n```\n\n\n\n#### 256-to-1 4-bit multiplexer\n\n> Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits `in[3:0]`, sel=1 selects bits `in[7:4]`, sel=2 selects bits `in[11:8]`, etc.\n\n> Hint\n>\n> - With this many options, a case statement isn't so useful.\n> - Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying \"... is not a constant\" means it couldn't prove that the select width is constant. In particular, `in[ sel*4+3 : sel*4 ]` does not work. // verilog 索引不支持全为变量\n> - Bit slicing (\"Indexed vector part select\", since Verilog-2001) has an even more compact syntax.\n\n\n\n```verilog\nmodule top_module( \n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out );\n  \n    assign out = in[sel * 4 + 3 : sel * 4] ;\n\nendmodule\n\n```\n\n> error : sel is not a constant File ;\n\n```verilog\n//True\nmodule top_module( \n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out );\n    \n    assign out = in[sel * 4  +: 4] ;//从sel*4向上四位\n    \nendmodule\n\n```\n\n### Arithmetic Circuits\n\n#### 3-bit binary adder\n\n> Now that you know how to build a [full adder](https://hdlbits.01xz.net/wiki/Fadd), make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from *each* full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see.\n\n```verilog\nmodule top_module( \n    input [2:0] a, b,\n    input cin,\n    output [2:0] cout,\n    output [2:0] sum );\n    full_adder ripple_adder_1( a[0] , b[0] , cin , cout[0] , sum[0] ) ;\n    full_adder ripple_adder_2( a[1] , b[1] , cout[0] , cout[1] , sum[1] ) ;\n    full_adder ripple_adder_3( a[2] , b[2] , cout[1] , cout[2] , sum[2] ) ;\nendmodule\n\nmodule full_adder(\n    input a , b , cin , \n    output cout , sum\n);\n    assign cout= a & b | a & cin | b & cin ;\n    assign sum = a ^ b ^ cin ;\nendmodule\n```\n\n#### Signed addition overflow\n\n> Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\n\n```verilog\n//Flase vesion\nmodule top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n); \n    assign { overflow , s } = a + b ;\n    //注意题中的signed overflow , 并不等于进位cout\nendmodule\n\n```\n\n如何检测符号溢出(**signed overflow**) : 符号不同，相加不会溢出  ； 符号相同，可能溢出，需要设置检测。\n\n```verilog\n//True vesion\nmodule top_module(\n    input [7:0] a , b ,\n    output [7 : 0] s ,\n    output overflow\n);\n    assign s = a + b ;\n    assign overflow = ( a[7] == b[7] ) ? (a[7] ^ s[7]) : 0 ;\nendmodule\n```\n\n#### 100-bit binary adder\n\n```verilog\nmodule top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput cin,\n\toutput cout,\n\toutput [99:0] sum\n);\n\n\t// The concatenation {cout, sum} is a 101-bit vector.\n\tassign {cout, sum} = a+b+cin;\n\nendmodule\n\n```\n\n#### 4-digit BCD adder\n\n```verilog\nmodule top_module ( \n    input [15:0] a, b,\n    input cin,\n    output cout,\n    output [15:0] sum );\n    wire [2:0] temp_cout ;\n    bcd_fadd U0 ( a[3:0] , b[3:0] , cin ,  temp_cout[0] , sum[3:0] ) ;\n    bcd_fadd U1 ( a[7:4] , b[7:4] , temp_cout[0] ,  temp_cout[1] , sum[7:4] ) ;\n    bcd_fadd U2 ( a[11:8] , b[11:8] , temp_cout[1] ,  temp_cout[2] , sum[11:8] ) ;\n    bcd_fadd U3 ( a[15:12] , b[15:12] , temp_cout[2] ,  cout , sum[15:12] ) ;\nendmodule\n\n```\n\n### Karnaugh Map to Citcuit\n\n#### 3-variable\n\n```verilog\nmodule top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n\n\t// SOP form: Three prime implicants (1 term each), summed.\n\t// POS form: One prime implicant (of 3 terms)\n\t// In this particular case, the result is the same for both SOP and POS.\n    // it's easier by using SOP\n\tassign out = (a | b | c);\n\t\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = (!b & !c) | (!a & !d) | (!a & b & c) | (a & c & d)  ;\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = a | (!b & c) ;\n    //用0去算！f更简单\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\n//Stupid vesion\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = (!a & !b) & (c ^ d) | (!a & b) & !(c ^ d) | a & b & (c ^ d) | (a & !b) & !(c ^ d);\nendmodule\n\n```\n\n```verilog\n// Wise vesion\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n\tassign out = a ^ b ^ c ^ d ;\nendmodule\n```\n\n**如果会奇偶校验便能一眼看出：`abcd`中有奇数个`1`，卡诺图为`1` .反之为`0`.**\n\n#### Minimum SOP and POS\n\n```verilog\nmodule top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n); \n\tassign out_sop = c & d | !a & !b & c ;\n    assign out_pos = c & (!a | b) & (!b | d) ;\nendmodule\n```\n\n#### Karnaugh map\n\n```verilog\nmodule top_module (\n    input [4:1] x, \n    output f );\n    assign f = !x[1] & x[3] | x[1] & x[2] & !x[3] ;\nendmodule\n\n```\n\n#### Karnaugh map\n\n```verilog\nmodule top_module (\n    input [4:1] x,\n    output f\n); \n    assign f = (x[3] | !x[4]) & (!x[2] | x[3] | x[4]) & (!x[1] | x[2] | !x[4]) & (!x[1] | !x[2] | x[4]) ;\nendmodule\n\n```\n\n#### K-map implemented with a multiplexer\n\n```verilog\nmodule top_module (\n    input c,\n    input d,\n    output reg [3:0] mux_in\n); \n    always @(*)begin\n        case( { c , d } )\n            2'b00 : mux_in = 4'b0100 ;\n            2'b01 : mux_in = 4'b0001 ;\n            2'b11 : mux_in = 4'b1001 ;\n            2'b10 : mux_in = 4'b0101 ;\n            default : mux_in = 4'b0000 ;\n        endcase\n    end\nendmodule\n\n```\n\n## Sequential Logic\n\n### Latches and Flip-Flops\n\n#### *DFFs and gates\n\nconcise solution :\n\n```verilog\nmodule top_module (\n    input clk,\n    input x,\n    output z\n); \n    reg [2:0] Q ;\n    always @(posedge clk) begin\n        Q[0] <= x ^ Q[0] ;\n        Q[1] <= x & ~Q[1] ;\n        Q[2] <= x | ~Q[2] ;\n    end\n    assign z = ~ (|Q) ;\nendmodule\n\n```\n\nmy solution\n\n```verilog\nmodule top_module (\n    input clk,\n    input x,\n    output z\n); \n    wire [2:0] Q ;\n    DFF_ U0( .clk(clk) , .d(x ^ Q[0]) , .q(Q[0]) ) ;\n    DFF_ U1( .clk(clk) , .d(x & ~Q[1]) , .q(Q[1]) ) ;\n    DFF_ U2( .clk(clk) , .d(x | ~Q[2]) , .q(Q[2]) ) ;\n    assign z = ~ (| Q ) ;\nendmodule\n\nmodule DFF_(\n    input clk , d ,\n    output reg q\n);\n    always @(posedge clk) begin\n       q <= d ; \n    end\nendmodule\n```\n\n#### *Detect an edge \n\n```verilog\nmodule top_module (\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge\n);\n    reg [7:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n       pedge <= ~last_in & in ;\n    end\nendmodule\n```\n\n#### *Detect both edges\n\n```verilog\nmodule top_module (\n    input clk,\n    input [7:0] in,\n    output [7:0] anyedge\n);\n    reg [7:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n       anyedge <= last_in ^ in ;\n    end\n    \nendmodule\n```\n\n#### *Edge capture register\n\n==Tips== : After clk's change from 1 to 0 , register q = 1 . And then , q is still `1`  until `reset = 1` ; \n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    integer i ;\n    reg [31:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n        if(reset) out <= 0 ;\n        else begin\n            for(i = 0 ; i < 32 ; i++)\n                out[i] <= last_in[i] & ~in[i] ? 1 : out[i] ;\n        end\n    end\nendmodule\n```\n\n==My error solution==\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    integer i ;\n    reg [31:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n        if(reset) out <= 0 ;\n        else begin\n            ////////////////////////\n            out <= last_in & ~in ;\n            ///////////////////////\n        end\n    end\nendmodule\n```\n\n#### *Dual-edge triggered filp-flop\n\n```verilog\nmodule top_module (\n    input clk,\n    input d,\n    output q\n);\n    reg q0 , q1 ;\n    always @(posedge clk) begin\n       q0 <= d ; \n    end\n    always @(negedge clk) begin\n       q1 <= d ;\n    end\n    assign q = clk ? q0 : q1 ;\nendmodule\n```\n\n### \n\n### Counters\n\n#### *Counter 1-12\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input enable,\n    output [3:0] Q,\n    output c_enable,\n    output c_load,\n    output [3:0] c_d\n); //\n\n    count4 the_counter (clk, c_enable, c_load, c_d , Q);\n    assign c_enable = enable ;\n    assign c_load = (Q == 12 && enable) || reset ? 1 : 0 ;\n    assign c_d = 4'b0001 ;\n\nendmodule\n```\n\n**Count4.v **\n\n```verilog\nmodule count4(\n    input clk , \n    input enable ,\n    input load ,\n    input [3:0] d ,\n    output reg [3:0] Q\n);\n    always @(posedge clk) begin\n        if(load)    Q <= d ;\n        else if(enable) Q <= Q + 1 ;\n    end\nendmodule\n```\n\n#### Counter 1000\n\n```verilog\n//make sure OneHertz turn into 1 once time every 1000 clk.即分频器，1000Hz转1Hz\nmodule top_module (\n    input clk,\n    input reset,\n    output OneHertz,\n    output [2:0] c_enable\n); //\n    wire [11:0] Q ;\n    assign {OneHertz , c_enable} = { (Q[11:0] == 12'h999) , (Q[7:0] == 8'h99) ,(Q[3:0] == 4'h9) , 1'b1 } ; \n    bcdcount counter0 (clk, reset, c_enable[0] , Q[3:0]);\n    bcdcount counter1 (clk, reset, c_enable[1] , Q[7:4]);\n    bcdcount counter2 (clk, reset, c_enable[2] , Q[11:8]);\nendmodule\n\n```\n\n#### 4-digit decimal counter\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,   // Synchronous active-high reset\n    output [3:1] ena,\n    output reg [15:0] q);\n\t\n    assign ena = {  (q[11:0] == 12'h999) , (q[7:0] == 8'h99) , (q[3:0] == 4'h9) } ;\n    always @(posedge clk) begin\n        if(reset) q <= 0 ;\n        else begin\n            q[3:0] <= (q[3:0] == 4'h9) ? 0 : (q[3:0] + 1) ;\n            if(ena[1])\tq[7:4] <= (q[7:4] == 4'h9) ? 0 : (q[7:4] + 1 ) ;\n            if(ena[2])\tq[11:8] <= (q[11:8] == 4'h9) ? 0 : (q[11:8] + 1 ) ;\n            if(ena[3])\tq[15:12] <= (q[15:12] == 4'h9) ? 0 : (q[15:12] + 1 ) ;\n        end\n    end\n    \nendmodule \n```\n\n```verilog\n//another solution , Init module\nmodule top_module (\n    input clk,\n    input reset,   // Synchronous active-high reset\n    output [3:1] ena,\n    output reg [15:0] q);\n\nwire en0 ;\n    assign {ena , en0} = { q[11:0] == 12'h999 , q[7:0] == 8'h99 , q[3:0] == 4'h9, 1'b1} ;\n    counter10 U0(clk , reset , en0    , q[3:0]) ;\n    counter10 U1(clk , reset , ena[1] , q[7:4]) ;\n    counter10 U2(clk , reset , ena[2] , q[11:8]) ;\n    counter10 U3(clk , reset , ena[3] , q[15:12]) ;\nendmodule\n\nmodule counter10(\n    input clk ,\n    input reset,\n    input ena ,\n    output [3:0] out \n);\n    //assign reset = (out == 9) ;\n    always@(posedge clk) begin\n        if(reset)\tout <= 0 ;\n        else if(ena) out <= (out == 9) ? 0 : out + 1 ;\n    end\nendmodule\n```\n\n#### 12-hour clock\n\n```verilog\nmodule top_module(\n    input clk ,\n    input reset ,\n    input ena ,\n    output reg pm ,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n    wire [1:0] carry ;\n    counter60 ss0(clk , reset , ena , carry[0] , ss[7:0]) ;\n    counter60 mm0(clk , reset , carry[0] , carry[1] , mm[7:0]) ;\n    counter12 hh0(clk , reset , carry[1] && carry[0] , pm       , hh[7:0]) ;\n    \nendmodule\n\nmodule counter60(\n    input clk ,\n    input reset ,\n    input en ,\n    output carry ,//carry = 1 when Q = 8'h59 , which means carry out .\n    output reg [7:0] Q\n);\n    assign carry = (Q == 8'h59) ;\n    always @(posedge clk)   begin\n        if(reset)   Q <= 0 ;\n        else if(en) begin\n            Q[3:0] <= (Q[3:0] == 4'h9) ? 0 : Q[3:0] + 1 ;\n            if(Q[3:0] == 4'h9)  Q[7:4] <= (Q[7:4] == 4'h5) ? 0 : Q[7:4] + 1 ;\n        end\n    end\nendmodule\n\nmodule counter12(\n    input clk ,\n    input reset ,\n    input en ,\n    output reg pm ,\n    output reg [7:0] Q  \n);\n    always @(posedge clk)   begin\n        if(reset)   Q <= 8'b0001_0010 ;\n        else if(en) begin\n            case(Q[3:0]) \n                4'b1001 : Q[7:0] <= 8'b0001_0000 ;\n                4'b0010 : begin\n                    if(Q[7:4] == 4'h1)  Q <= 8'h01 ;\n                    else    Q[3:0] <= Q[3:0] + 1 ;\n                end\n                default : Q[3:0] <= Q[3:0] + 1 ;\n            endcase\n        end\n    end\n\n    always @(posedge clk)   begin\n        if(reset)   pm <= 0 ;\n        else if(en && Q[7:0] == 8'h11)  pm <= ~pm ;\n        else pm <= pm ;\n    end\n\nendmodule\n```\n\n\n\n\n\n\n\n## Some worthwhile retry practice ;\n\n* [Detect an edge](https://hdlbits.01xz.net/wiki/edgedetect)\n* [Detect both edges](https://hdlbits.01xz.net/wiki/edgedetect2)\n* [Edge capture register](https://hdlbits.01xz.net/wiki/edgecapture)\n* [Dual-edge triggered flip-flop](https://hdlbits.01xz.net/wiki/dualedge)\n* [Slow decade counter](https://hdlbits.01xz.net/wiki/Countslow)\n* [Counter 1-12](https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a)\n* [Counter 1000](https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b)\n* [4-digit decimal counter](https://hdlbits.01xz.net/wiki/Countbcd)\n* [12-hour clock](https://hdlbits.01xz.net/wiki/Count_clock)\n* [3-input LUT](https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q12)","source":"_posts/NotesOfHdlbits.md","raw":"---\ntitle: HDLBits Solutions\ntags: IC\nabbrlink: 4ff0bc03\ndate: 2021-10-01 20:00:00\n---\n\n<h3>Abstract</h3>\n\n<p>The solutions and my notes of <a href=\"[Problem sets - HDLBits (01xz.net)](https://hdlbits.01xz.net/wiki/Problem_sets)\">HDLBits</a> are written in this document .</p>\n\n<!-- more -->\n\n[TOC]\n\n\n\n# Getting Started\n\n### Getting Started\n\n```verilog\nmodule top_module( output one );\n\t\n\tassign one = 1'b1;\n\t\nendmodule\n```\n\n### Output Zero\n\n```verilog\nmodule top_module ( output zero );\n\t\n\tassign zero = 1'b0;\n\t\nendmodule\n```\n\n\n\n# Verilog Language\n\n## Basics\n\n### Simple wire\n\n```verilog\nmodule top_module( input in, output out );\n\tassign out = in;\nendmodule\n\n```\n\n### Four wires\n\n```verilog\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n\t\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\n\n\t// If we're certain about the width of each signal, using \n\t// the concatenation operator is equivalent and shorter:\n\t// assign {w,x,y,z} = {a,b,b,c};\n\t\nendmodule\n\n```\n\n### Inverter\n\n```verilog\nmodule top_module(\n\tinput in,\n\toutput out\n);\n\t\n\tassign out = ~in;\n\t\nendmodule\n\n```\n\n### AND gate\n\n```verilog\nmodule top_module( \n    input a, \n    input b, \n    output out );\n\tassign out = a & b ;\nendmodule\n\n```\n\n### NOR gate\n\n```verilog\nmodule top_module( \n    input a, \n    input b, \n    output out );\n    assign out = ! (a | b) ;\nendmodule\n\n```\n\n\n\n### XNOR gate\n\n\n\n### Declaring wires\n\n\n\n### 7458 chip\n\n\n\n## Vectors\n\n### Vectors\n\n\n\n## More Verilog Features\n\n### *Combinational for-loop : Vector reversal 2\n\n> Given a 100-bit input vector [99:0], reverse its bit ordering.\n\n```verilog\n// False Vesion\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    for(int i = 0 ; i < 100 ; i++) begin\n        assign out[i] = in [99 - i] ;\n    end\nendmodule\n```\n\n> ```shell\n> Error (10170): Verilog HDL syntax error at top_module.v(6) near text: \"for\";  expecting \"endmodule\". \n> ```\n\n为什么是这样的报错呢？显示在for循环那一行前缺少一个endmodule\n\n> 在module内部，只能**声明输入**、**输出端口、内部信号以及使用连续赋值**（`assign` 语句）来描述硬件电路的连续逻辑\n\n因此，`verilog`编译器认为，`for`循环前应该有一个`endmodule`以结束该`module`,此后才能开始`for-loop`的声明。\n\n**为什么Verilog规定Module内部不能声明for-loop?**\n\n> 当涉及到硬件描述语言（HDL）如Verilog时，有一些关键的设计原则和语法规则是不同于通用编程语言（如C、Python）的。\n>\n> Verilog 是为硬件设计而设计的，其目的是描述硬件电路的结构和行为，而不是传统意义上的“编程”。在硬件电路中，信号是在不同的时间步长上并行计算的，而不是按顺序执行的像在软件中一样。这导致了一些语法规则的不同。\n>\n> 具体来说，以下是为什么在 Verilog 中不能直接将 `for` 循环放在模块内部的原因：\n>\n> 1. **并行性：** Verilog 中的代码被解释为电路，其中不同的信号在相同的时间步长上并行地计算。这与传统编程语言中的迭代循环不同，后者按顺序执行。在硬件电路中，不同的信号和逻辑是同时计算的，因此 `for` 循环的概念与硬件的并行性不一致。\n> 2. **延迟和时间问题：** 在 Verilog 中，信号的传播和逻辑运算都需要考虑时间延迟。循环的迭代次数可能需要在编译时已知，但在硬件中，延迟可能会影响电路的行为。如果允许在模块内部使用 `for` 循环，编译器就需要处理如何在时间上正确地展开循环和处理延迟的问题。\n>\n> 为了符合硬件的特性，Verilog 引入了生成语句（generate statements），允许在编译时生成不同的硬件结构，这包括使用 `for` 循环来生成多个类似的硬件逻辑。生成语句允许在不同的时间步长上并行生成硬件，而不会引入运行时的顺序问题。\n\n简单说就是：`for-loop`内不同层次(i = 1 , 2 ,3 ……)，体现了顺序的先后，是软件编程的思维；而`verilog`中`assign`描述的各硬件是并行运行的，是硬件编程的思维；二者需要区分开来:smile:\n\n我们使用`generate`来实现(generate生成多个并行计算模块)：[generate介绍]([Verilog中generate的使用 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/107047600))\n\n```verilog\nmodule top_module(\n    input [99:0] in ,\n    output [99:0] out \n) ;\n    genvar i ;//state a variable i \n    generate\n        for(i = 0 ; i < 100 ; i++) begin : generate_name\n            assign out[i] = in [99 - i] ; // type of out is wire\n        end\n    endgenerate\nendmodule\n```\n\n或者将`for-loop`写在`always`中：\n\n```verilog\nmodule top_module(\n    input [99:0] in ,\n    output reg [99:0] out \n) ;\n    always @(*)begin\n        for(int i = 0 ; i < $bits(out) ; i++ ) begin\n            //$bits(signal)获取信号位长\n            out[i] = in [ $bits(out) - 1 - i ] ; \n            //type of out is reg\n        end\n    end\nendmodule\n```\n\n### Combinational for-loop:255-bit population count\n\n> A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\n\n```verilog\nmodule top_module( \n    input [254:0] in,\n    output reg [7:0] out );\n    always @(*) begin\n       out = 0 ;//寄存器型变量在always块中初始化\n        for(int i = 0 ; i < 255 ; i++) begin\n            out = out + in[i] ; \n        end\n    end\nendmodule\n\n```\n\n\n\n### Generate for-loop:1000-bit binary adder 2\n\n> Create a 100-bit binary ripple-carry adder by instantiating 100 [full adders](https://hdlbits.01xz.net/wiki/Fadd). The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from *each* full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.\n\n```verilog\nmodule top_module( \n    input [99:0] a, b,\n    input cin,\n    output [99:0] cout,\n    output [99:0] sum );\n\tgenerate\n        genvar i ;//好像在for循环内声明genvar i 会报错\n        assign sum[0] = a[0] ^ b[0] ^ cin ;\n        assign cout[0] = a[0] & b[0] | a[0] & cin | b[0] & cin ;\n        for (i = 1 ; i < 100 ; i++) begin : generate_name \n            assign sum[i] = a[i] ^ b[i] ^ cout[i-1] ;\n            assign cout[i] = a[i] & b[i] | a[i] & cout[i-1] | b[i] & cout[i-1] ;\n        end\n    endgenerate\nendmodule\n\n```\n\n\n\n### *Generate for-loop:100-digit BCD adder\n\n> You are provided with a BCD one-digit adder named `bcd_fadd` that adds two BCD digits and carry-in, and produces a sum and carry-out.\n>\n> ```\n> module bcd_fadd (\n>     input [3:0] a,\n>     input [3:0] b,\n>     input     cin,\n>     output   cout,\n>     output [3:0] sum );\n> ```\n>\n> Instantiate 100 copies of `bcd_fadd` to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.\n\n```verilog\n//False Verion \nmodule top_module( \n    input [399:0] a, b,\n    input cin,\n    output reg cout,\n    output reg [399:0] sum );\n    genvar i , j ;\n    reg [99:0] temp_cout ;\n    assign cout = temp_cout[99] ;\n    generate\n        bcd_fadd U0( a[3:0] , b[3:0] , cin , temp_cout[0] , sum[3:0]) ;\n        for (i = 7 , j = 0; i < 400 ;  i = i + 4 , j++) begin : name \n            bcd_fadd U1( a[i:i-3] , b[i:i-3] , temp_cout[j] , sum[i:i-3]) ;\n        end\n    endgenerate\nendmodule\n\n```\n\n> 报错信息：Error (10170): Verilog HDL syntax error at top_module.v(12) near text: \",\";  expecting \";\"\n\n没有查到相关信息(先留一个坑)，猜测：`for-loop`中不能有两个`genvar`,于是不能出现`,` ,提示你要用`;`\n\n```verilog\n//Right Verion \nmodule top_module( \n    input [399:0] a, b,\n    input cin,\n    output reg cout,\n    output reg [399:0] sum );\n    genvar i ;\n    reg [99:0] temp_cout ;\n    assign cout = temp_cout[99] ;\n    generate\n        bcd_fadd U0( a[3:0] , b[3:0] , cin , temp_cout[0] , sum[3:0]) ;\n        for (i = 7 ; i < 400 ;  i = i + 4 ) begin : name \n            bcd_fadd U1( a[i:i-3] , b[i:i-3] , temp_cout[(i + 1) / 4 - 2] , temp_cout[(i + 1) / 4 - 1] , sum[i:i-3]) ;\n        end\n    endgenerate\nendmodule\n```\n\n**此处实现一下`bcd_fadd`**\n\n```verilog\nmodule bcd_fadd(\n    input [3 : 0] a , b ,\n    input cin , \n    output cout ,\n    output [3:0] sum\n) ;\n    wire [4:0] temp ;\n    assign temp = a + b + cin ;\n    assign {cout , sum} = (temp>9) ? (temp+6) : temp ; \nendmodule\n```\n\n\n\n# Circuits\n\n## Combinational Logic\n\n### Basic Gates\n\n#### Even longer vectors\n\n> See also the shorter version: [Gates and vectors](https://hdlbits.01xz.net/wiki/gatesv).\n>\n> You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour:\n>\n> - **out_both**: Each bit of this output vector should indicate whether *both* the corresponding input bit and its neighbour to the **left** are '1'. For example, `out_both[98]` should indicate if `in[98]` and `in[99]` are both 1. Since `in[99]` has no neighbour to the left, the answer is obvious so we don't need to know `out_both[99]`.\n> - **out_any**: Each bit of this output vector should indicate whether *any* of the corresponding input bit and its neighbour to the **right** are '1'. For example, `out_any[2]` should indicate if either `in[2]` or `in[1]` are 1. Since `in[0]` has no neighbour to the right, the answer is obvious so we don't need to know `out_any[0]`.\n> - **out_different**: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the **left**. For example, `out_different[98]` should indicate if `in[98]` is different from `in[99]`. For this part, treat the vector as wrapping around, so `in[99]`'s neighbour to the left is `in[0]`.\n\n```verilog\n//My vesion\nmodule top_module( \n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different );\n    genvar i ;\n\tgenerate\n        for( i = 0 ; i < 99 ; i++ ) begin : generate_name\n            assign out_both[i] = in[i] & in[i+1] ;\n            assign out_any[i+1]= in[i+1] | in[i] ;\n            assign out_different[i] = in[i] ^ in[i+1] ;\n        end\n        assign out_different[99] = in[99] ^ in[0] ;\n    endgenerate\nendmodule\n```\n\n```verilog\n//Offical vesion\nmodule top_module( \n    input [99:0] in,\n    output [98:0] out_both,\n    output [99:1] out_any,\n    output [99:0] out_different );\n    assign out_both = in[98:0] & in[99:1] ;\n    assign out_any  = in[99:1] | in[98:0] ;\n    assign out_different = in ^ { in[0] , in[99:1] } ;\nendmodule\n```\n\n### Multiplexers\n\n#### 9-to-1 multiplexer\n\n> Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\n\n```verilog\n//Flase vesion\nmodule top_module( \n    input [15:0] a, b, c, d, e, f, g, h, i,\n    input [3:0] sel,\n    output reg [15:0] out );\n    always @(*)begin \n    case(sel)\n        4'b0000 : out = a ;\n        4'b0001 : out = b ;\n        4'b0010 : out = c ;\n        4'b0011 : out = d ;\n        4'b0100 : out = e ;\n        4'b0101 : out = f ;\n        4'b0110 : out = g ;\n        4'b0111 : out = h ;\n        4'b1000 : out = i ;\n     \tdefault : out = 16'hFFFF ;//十六进制应该为4'hFFFF\n        //踩过的坑 ： out = 1 ; out = 0xFFFF ; out = 4'hFFFF\n        endcase\n    end      \nendmodule\n```\n\n\n\n#### 256-to-1 4-bit multiplexer\n\n> Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits `in[3:0]`, sel=1 selects bits `in[7:4]`, sel=2 selects bits `in[11:8]`, etc.\n\n> Hint\n>\n> - With this many options, a case statement isn't so useful.\n> - Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It's not always good at this. An error saying \"... is not a constant\" means it couldn't prove that the select width is constant. In particular, `in[ sel*4+3 : sel*4 ]` does not work. // verilog 索引不支持全为变量\n> - Bit slicing (\"Indexed vector part select\", since Verilog-2001) has an even more compact syntax.\n\n\n\n```verilog\nmodule top_module( \n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out );\n  \n    assign out = in[sel * 4 + 3 : sel * 4] ;\n\nendmodule\n\n```\n\n> error : sel is not a constant File ;\n\n```verilog\n//True\nmodule top_module( \n    input [1023:0] in,\n    input [7:0] sel,\n    output [3:0] out );\n    \n    assign out = in[sel * 4  +: 4] ;//从sel*4向上四位\n    \nendmodule\n\n```\n\n### Arithmetic Circuits\n\n#### 3-bit binary adder\n\n> Now that you know how to build a [full adder](https://hdlbits.01xz.net/wiki/Fadd), make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from *each* full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see.\n\n```verilog\nmodule top_module( \n    input [2:0] a, b,\n    input cin,\n    output [2:0] cout,\n    output [2:0] sum );\n    full_adder ripple_adder_1( a[0] , b[0] , cin , cout[0] , sum[0] ) ;\n    full_adder ripple_adder_2( a[1] , b[1] , cout[0] , cout[1] , sum[1] ) ;\n    full_adder ripple_adder_3( a[2] , b[2] , cout[1] , cout[2] , sum[2] ) ;\nendmodule\n\nmodule full_adder(\n    input a , b , cin , \n    output cout , sum\n);\n    assign cout= a & b | a & cin | b & cin ;\n    assign sum = a ^ b ^ cin ;\nendmodule\n```\n\n#### Signed addition overflow\n\n> Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\n\n```verilog\n//Flase vesion\nmodule top_module (\n    input [7:0] a,\n    input [7:0] b,\n    output [7:0] s,\n    output overflow\n); \n    assign { overflow , s } = a + b ;\n    //注意题中的signed overflow , 并不等于进位cout\nendmodule\n\n```\n\n如何检测符号溢出(**signed overflow**) : 符号不同，相加不会溢出  ； 符号相同，可能溢出，需要设置检测。\n\n```verilog\n//True vesion\nmodule top_module(\n    input [7:0] a , b ,\n    output [7 : 0] s ,\n    output overflow\n);\n    assign s = a + b ;\n    assign overflow = ( a[7] == b[7] ) ? (a[7] ^ s[7]) : 0 ;\nendmodule\n```\n\n#### 100-bit binary adder\n\n```verilog\nmodule top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput cin,\n\toutput cout,\n\toutput [99:0] sum\n);\n\n\t// The concatenation {cout, sum} is a 101-bit vector.\n\tassign {cout, sum} = a+b+cin;\n\nendmodule\n\n```\n\n#### 4-digit BCD adder\n\n```verilog\nmodule top_module ( \n    input [15:0] a, b,\n    input cin,\n    output cout,\n    output [15:0] sum );\n    wire [2:0] temp_cout ;\n    bcd_fadd U0 ( a[3:0] , b[3:0] , cin ,  temp_cout[0] , sum[3:0] ) ;\n    bcd_fadd U1 ( a[7:4] , b[7:4] , temp_cout[0] ,  temp_cout[1] , sum[7:4] ) ;\n    bcd_fadd U2 ( a[11:8] , b[11:8] , temp_cout[1] ,  temp_cout[2] , sum[11:8] ) ;\n    bcd_fadd U3 ( a[15:12] , b[15:12] , temp_cout[2] ,  cout , sum[15:12] ) ;\nendmodule\n\n```\n\n### Karnaugh Map to Citcuit\n\n#### 3-variable\n\n```verilog\nmodule top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n\n\t// SOP form: Three prime implicants (1 term each), summed.\n\t// POS form: One prime implicant (of 3 terms)\n\t// In this particular case, the result is the same for both SOP and POS.\n    // it's easier by using SOP\n\tassign out = (a | b | c);\n\t\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = (!b & !c) | (!a & !d) | (!a & b & c) | (a & c & d)  ;\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = a | (!b & c) ;\n    //用0去算！f更简单\nendmodule\n\n```\n\n#### 4-variable\n\n```verilog\n//Stupid vesion\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n    assign out = (!a & !b) & (c ^ d) | (!a & b) & !(c ^ d) | a & b & (c ^ d) | (a & !b) & !(c ^ d);\nendmodule\n\n```\n\n```verilog\n// Wise vesion\nmodule top_module(\n    input a,\n    input b,\n    input c,\n    input d,\n    output out  ); \n\tassign out = a ^ b ^ c ^ d ;\nendmodule\n```\n\n**如果会奇偶校验便能一眼看出：`abcd`中有奇数个`1`，卡诺图为`1` .反之为`0`.**\n\n#### Minimum SOP and POS\n\n```verilog\nmodule top_module (\n    input a,\n    input b,\n    input c,\n    input d,\n    output out_sop,\n    output out_pos\n); \n\tassign out_sop = c & d | !a & !b & c ;\n    assign out_pos = c & (!a | b) & (!b | d) ;\nendmodule\n```\n\n#### Karnaugh map\n\n```verilog\nmodule top_module (\n    input [4:1] x, \n    output f );\n    assign f = !x[1] & x[3] | x[1] & x[2] & !x[3] ;\nendmodule\n\n```\n\n#### Karnaugh map\n\n```verilog\nmodule top_module (\n    input [4:1] x,\n    output f\n); \n    assign f = (x[3] | !x[4]) & (!x[2] | x[3] | x[4]) & (!x[1] | x[2] | !x[4]) & (!x[1] | !x[2] | x[4]) ;\nendmodule\n\n```\n\n#### K-map implemented with a multiplexer\n\n```verilog\nmodule top_module (\n    input c,\n    input d,\n    output reg [3:0] mux_in\n); \n    always @(*)begin\n        case( { c , d } )\n            2'b00 : mux_in = 4'b0100 ;\n            2'b01 : mux_in = 4'b0001 ;\n            2'b11 : mux_in = 4'b1001 ;\n            2'b10 : mux_in = 4'b0101 ;\n            default : mux_in = 4'b0000 ;\n        endcase\n    end\nendmodule\n\n```\n\n## Sequential Logic\n\n### Latches and Flip-Flops\n\n#### *DFFs and gates\n\nconcise solution :\n\n```verilog\nmodule top_module (\n    input clk,\n    input x,\n    output z\n); \n    reg [2:0] Q ;\n    always @(posedge clk) begin\n        Q[0] <= x ^ Q[0] ;\n        Q[1] <= x & ~Q[1] ;\n        Q[2] <= x | ~Q[2] ;\n    end\n    assign z = ~ (|Q) ;\nendmodule\n\n```\n\nmy solution\n\n```verilog\nmodule top_module (\n    input clk,\n    input x,\n    output z\n); \n    wire [2:0] Q ;\n    DFF_ U0( .clk(clk) , .d(x ^ Q[0]) , .q(Q[0]) ) ;\n    DFF_ U1( .clk(clk) , .d(x & ~Q[1]) , .q(Q[1]) ) ;\n    DFF_ U2( .clk(clk) , .d(x | ~Q[2]) , .q(Q[2]) ) ;\n    assign z = ~ (| Q ) ;\nendmodule\n\nmodule DFF_(\n    input clk , d ,\n    output reg q\n);\n    always @(posedge clk) begin\n       q <= d ; \n    end\nendmodule\n```\n\n#### *Detect an edge \n\n```verilog\nmodule top_module (\n    input clk,\n    input [7:0] in,\n    output reg [7:0] pedge\n);\n    reg [7:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n       pedge <= ~last_in & in ;\n    end\nendmodule\n```\n\n#### *Detect both edges\n\n```verilog\nmodule top_module (\n    input clk,\n    input [7:0] in,\n    output [7:0] anyedge\n);\n    reg [7:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n       anyedge <= last_in ^ in ;\n    end\n    \nendmodule\n```\n\n#### *Edge capture register\n\n==Tips== : After clk's change from 1 to 0 , register q = 1 . And then , q is still `1`  until `reset = 1` ; \n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    integer i ;\n    reg [31:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n        if(reset) out <= 0 ;\n        else begin\n            for(i = 0 ; i < 32 ; i++)\n                out[i] <= last_in[i] & ~in[i] ? 1 : out[i] ;\n        end\n    end\nendmodule\n```\n\n==My error solution==\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input [31:0] in,\n    output reg [31:0] out\n);\n    integer i ;\n    reg [31:0] last_in ;\n    always @(posedge clk) begin\n       last_in <= in ;\n        if(reset) out <= 0 ;\n        else begin\n            ////////////////////////\n            out <= last_in & ~in ;\n            ///////////////////////\n        end\n    end\nendmodule\n```\n\n#### *Dual-edge triggered filp-flop\n\n```verilog\nmodule top_module (\n    input clk,\n    input d,\n    output q\n);\n    reg q0 , q1 ;\n    always @(posedge clk) begin\n       q0 <= d ; \n    end\n    always @(negedge clk) begin\n       q1 <= d ;\n    end\n    assign q = clk ? q0 : q1 ;\nendmodule\n```\n\n### \n\n### Counters\n\n#### *Counter 1-12\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,\n    input enable,\n    output [3:0] Q,\n    output c_enable,\n    output c_load,\n    output [3:0] c_d\n); //\n\n    count4 the_counter (clk, c_enable, c_load, c_d , Q);\n    assign c_enable = enable ;\n    assign c_load = (Q == 12 && enable) || reset ? 1 : 0 ;\n    assign c_d = 4'b0001 ;\n\nendmodule\n```\n\n**Count4.v **\n\n```verilog\nmodule count4(\n    input clk , \n    input enable ,\n    input load ,\n    input [3:0] d ,\n    output reg [3:0] Q\n);\n    always @(posedge clk) begin\n        if(load)    Q <= d ;\n        else if(enable) Q <= Q + 1 ;\n    end\nendmodule\n```\n\n#### Counter 1000\n\n```verilog\n//make sure OneHertz turn into 1 once time every 1000 clk.即分频器，1000Hz转1Hz\nmodule top_module (\n    input clk,\n    input reset,\n    output OneHertz,\n    output [2:0] c_enable\n); //\n    wire [11:0] Q ;\n    assign {OneHertz , c_enable} = { (Q[11:0] == 12'h999) , (Q[7:0] == 8'h99) ,(Q[3:0] == 4'h9) , 1'b1 } ; \n    bcdcount counter0 (clk, reset, c_enable[0] , Q[3:0]);\n    bcdcount counter1 (clk, reset, c_enable[1] , Q[7:4]);\n    bcdcount counter2 (clk, reset, c_enable[2] , Q[11:8]);\nendmodule\n\n```\n\n#### 4-digit decimal counter\n\n```verilog\nmodule top_module (\n    input clk,\n    input reset,   // Synchronous active-high reset\n    output [3:1] ena,\n    output reg [15:0] q);\n\t\n    assign ena = {  (q[11:0] == 12'h999) , (q[7:0] == 8'h99) , (q[3:0] == 4'h9) } ;\n    always @(posedge clk) begin\n        if(reset) q <= 0 ;\n        else begin\n            q[3:0] <= (q[3:0] == 4'h9) ? 0 : (q[3:0] + 1) ;\n            if(ena[1])\tq[7:4] <= (q[7:4] == 4'h9) ? 0 : (q[7:4] + 1 ) ;\n            if(ena[2])\tq[11:8] <= (q[11:8] == 4'h9) ? 0 : (q[11:8] + 1 ) ;\n            if(ena[3])\tq[15:12] <= (q[15:12] == 4'h9) ? 0 : (q[15:12] + 1 ) ;\n        end\n    end\n    \nendmodule \n```\n\n```verilog\n//another solution , Init module\nmodule top_module (\n    input clk,\n    input reset,   // Synchronous active-high reset\n    output [3:1] ena,\n    output reg [15:0] q);\n\nwire en0 ;\n    assign {ena , en0} = { q[11:0] == 12'h999 , q[7:0] == 8'h99 , q[3:0] == 4'h9, 1'b1} ;\n    counter10 U0(clk , reset , en0    , q[3:0]) ;\n    counter10 U1(clk , reset , ena[1] , q[7:4]) ;\n    counter10 U2(clk , reset , ena[2] , q[11:8]) ;\n    counter10 U3(clk , reset , ena[3] , q[15:12]) ;\nendmodule\n\nmodule counter10(\n    input clk ,\n    input reset,\n    input ena ,\n    output [3:0] out \n);\n    //assign reset = (out == 9) ;\n    always@(posedge clk) begin\n        if(reset)\tout <= 0 ;\n        else if(ena) out <= (out == 9) ? 0 : out + 1 ;\n    end\nendmodule\n```\n\n#### 12-hour clock\n\n```verilog\nmodule top_module(\n    input clk ,\n    input reset ,\n    input ena ,\n    output reg pm ,\n    output reg [7:0] hh,\n    output reg [7:0] mm,\n    output reg [7:0] ss\n);\n    wire [1:0] carry ;\n    counter60 ss0(clk , reset , ena , carry[0] , ss[7:0]) ;\n    counter60 mm0(clk , reset , carry[0] , carry[1] , mm[7:0]) ;\n    counter12 hh0(clk , reset , carry[1] && carry[0] , pm       , hh[7:0]) ;\n    \nendmodule\n\nmodule counter60(\n    input clk ,\n    input reset ,\n    input en ,\n    output carry ,//carry = 1 when Q = 8'h59 , which means carry out .\n    output reg [7:0] Q\n);\n    assign carry = (Q == 8'h59) ;\n    always @(posedge clk)   begin\n        if(reset)   Q <= 0 ;\n        else if(en) begin\n            Q[3:0] <= (Q[3:0] == 4'h9) ? 0 : Q[3:0] + 1 ;\n            if(Q[3:0] == 4'h9)  Q[7:4] <= (Q[7:4] == 4'h5) ? 0 : Q[7:4] + 1 ;\n        end\n    end\nendmodule\n\nmodule counter12(\n    input clk ,\n    input reset ,\n    input en ,\n    output reg pm ,\n    output reg [7:0] Q  \n);\n    always @(posedge clk)   begin\n        if(reset)   Q <= 8'b0001_0010 ;\n        else if(en) begin\n            case(Q[3:0]) \n                4'b1001 : Q[7:0] <= 8'b0001_0000 ;\n                4'b0010 : begin\n                    if(Q[7:4] == 4'h1)  Q <= 8'h01 ;\n                    else    Q[3:0] <= Q[3:0] + 1 ;\n                end\n                default : Q[3:0] <= Q[3:0] + 1 ;\n            endcase\n        end\n    end\n\n    always @(posedge clk)   begin\n        if(reset)   pm <= 0 ;\n        else if(en && Q[7:0] == 8'h11)  pm <= ~pm ;\n        else pm <= pm ;\n    end\n\nendmodule\n```\n\n\n\n\n\n\n\n## Some worthwhile retry practice ;\n\n* [Detect an edge](https://hdlbits.01xz.net/wiki/edgedetect)\n* [Detect both edges](https://hdlbits.01xz.net/wiki/edgedetect2)\n* [Edge capture register](https://hdlbits.01xz.net/wiki/edgecapture)\n* [Dual-edge triggered flip-flop](https://hdlbits.01xz.net/wiki/dualedge)\n* [Slow decade counter](https://hdlbits.01xz.net/wiki/Countslow)\n* [Counter 1-12](https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a)\n* [Counter 1000](https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b)\n* [4-digit decimal counter](https://hdlbits.01xz.net/wiki/Countbcd)\n* [12-hour clock](https://hdlbits.01xz.net/wiki/Count_clock)\n* [3-input LUT](https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q12)","slug":"NotesOfHdlbits","published":1,"updated":"2024-03-15T12:39:51.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4de000k58teebke93bl","content":"<h3>Abstract</h3>\n\n<p>The solutions and my notes of <a href=\"[Problem sets - HDLBits (01xz.net)](https://hdlbits.01xz.net/wiki/Problem_sets)\">HDLBits</a> are written in this document .</p>\n\n<span id=\"more\"></span>\n\n<p>[TOC]</p>\n<h1 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h1><h3 id=\"Getting-Started-1\"><a href=\"#Getting-Started-1\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( <span class=\"keyword\">output</span> one );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> one = <span class=\"number\">1&#x27;b1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Output-Zero\"><a href=\"#Output-Zero\" class=\"headerlink\" title=\"Output Zero\"></a>Output Zero</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module ( <span class=\"keyword\">output</span> zero );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> zero = <span class=\"number\">1&#x27;b0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Verilog-Language\"><a href=\"#Verilog-Language\" class=\"headerlink\" title=\"Verilog Language\"></a>Verilog Language</h1><h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><h3 id=\"Simple-wire\"><a href=\"#Simple-wire\" class=\"headerlink\" title=\"Simple wire\"></a>Simple wire</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( <span class=\"keyword\">input</span> in, <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = in;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Four-wires\"><a href=\"#Four-wires\" class=\"headerlink\" title=\"Four wires\"></a>Four wires</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> a,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> c,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> w,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> x,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> y,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> z  );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> w = a;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> x = b;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> y = b;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> z = c;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If we&#x27;re certain about the width of each signal, using </span></span><br><span class=\"line\">\t<span class=\"comment\">// the concatenation operator is equivalent and shorter:</span></span><br><span class=\"line\">\t<span class=\"comment\">// assign &#123;w,x,y,z&#125; = &#123;a,b,b,c&#125;;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Inverter\"><a href=\"#Inverter\" class=\"headerlink\" title=\"Inverter\"></a>Inverter</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> in,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> out</span><br><span class=\"line\">);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = ~in;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AND-gate\"><a href=\"#AND-gate\" class=\"headerlink\" title=\"AND gate\"></a>AND gate</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> a, </span><br><span class=\"line\">    <span class=\"keyword\">input</span> b, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = a &amp; b ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NOR-gate\"><a href=\"#NOR-gate\" class=\"headerlink\" title=\"NOR gate\"></a>NOR gate</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> a, </span><br><span class=\"line\">    <span class=\"keyword\">input</span> b, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = ! (a | b) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"XNOR-gate\"><a href=\"#XNOR-gate\" class=\"headerlink\" title=\"XNOR gate\"></a>XNOR gate</h3><h3 id=\"Declaring-wires\"><a href=\"#Declaring-wires\" class=\"headerlink\" title=\"Declaring wires\"></a>Declaring wires</h3><h3 id=\"7458-chip\"><a href=\"#7458-chip\" class=\"headerlink\" title=\"7458 chip\"></a>7458 chip</h3><h2 id=\"Vectors\"><a href=\"#Vectors\" class=\"headerlink\" title=\"Vectors\"></a>Vectors</h2><h3 id=\"Vectors-1\"><a href=\"#Vectors-1\" class=\"headerlink\" title=\"Vectors\"></a>Vectors</h3><h2 id=\"More-Verilog-Features\"><a href=\"#More-Verilog-Features\" class=\"headerlink\" title=\"More Verilog Features\"></a>More Verilog Features</h2><h3 id=\"Combinational-for-loop-Vector-reversal-2\"><a href=\"#Combinational-for-loop-Vector-reversal-2\" class=\"headerlink\" title=\"*Combinational for-loop : Vector reversal 2\"></a>*Combinational for-loop : Vector reversal 2</h3><blockquote>\n<p>Given a 100-bit input vector [99:0], reverse its bit ordering.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// False Vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> out[i] = in [<span class=\"number\">99</span> - i] ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error (10170): Verilog HDL syntax error at top_module.v(6) near text: &quot;for&quot;;  expecting &quot;endmodule&quot;. </span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>为什么是这样的报错呢？显示在for循环那一行前缺少一个endmodule</p>\n<blockquote>\n<p>在module内部，只能<strong>声明输入</strong>、<strong>输出端口、内部信号以及使用连续赋值</strong>（<code>assign</code> 语句）来描述硬件电路的连续逻辑</p>\n</blockquote>\n<p>因此，<code>verilog</code>编译器认为，<code>for</code>循环前应该有一个<code>endmodule</code>以结束该<code>module</code>,此后才能开始<code>for-loop</code>的声明。</p>\n<p><strong>为什么Verilog规定Module内部不能声明for-loop?</strong></p>\n<blockquote>\n<p>当涉及到硬件描述语言（HDL）如Verilog时，有一些关键的设计原则和语法规则是不同于通用编程语言（如C、Python）的。</p>\n<p>Verilog 是为硬件设计而设计的，其目的是描述硬件电路的结构和行为，而不是传统意义上的“编程”。在硬件电路中，信号是在不同的时间步长上并行计算的，而不是按顺序执行的像在软件中一样。这导致了一些语法规则的不同。</p>\n<p>具体来说，以下是为什么在 Verilog 中不能直接将 <code>for</code> 循环放在模块内部的原因：</p>\n<ol>\n<li><strong>并行性：</strong> Verilog 中的代码被解释为电路，其中不同的信号在相同的时间步长上并行地计算。这与传统编程语言中的迭代循环不同，后者按顺序执行。在硬件电路中，不同的信号和逻辑是同时计算的，因此 <code>for</code> 循环的概念与硬件的并行性不一致。</li>\n<li><strong>延迟和时间问题：</strong> 在 Verilog 中，信号的传播和逻辑运算都需要考虑时间延迟。循环的迭代次数可能需要在编译时已知，但在硬件中，延迟可能会影响电路的行为。如果允许在模块内部使用 <code>for</code> 循环，编译器就需要处理如何在时间上正确地展开循环和处理延迟的问题。</li>\n</ol>\n<p>为了符合硬件的特性，Verilog 引入了生成语句（generate statements），允许在编译时生成不同的硬件结构，这包括使用 <code>for</code> 循环来生成多个类似的硬件逻辑。生成语句允许在不同的时间步长上并行生成硬件，而不会引入运行时的顺序问题。</p>\n</blockquote>\n<p>简单说就是：<code>for-loop</code>内不同层次(i &#x3D; 1 , 2 ,3 ……)，体现了顺序的先后，是软件编程的思维；而<code>verilog</code>中<code>assign</code>描述的各硬件是并行运行的，是硬件编程的思维；二者需要区分开来:smile:</p>\n<p>我们使用<code>generate</code>来实现(generate生成多个并行计算模块)：[generate介绍](<a href=\"https://zhuanlan.zhihu.com/p/107047600\">Verilog中generate的使用 - 知乎 (zhihu.com)</a>)</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;<span class=\"comment\">//state a variable i </span></span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span> : generate_name</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out[i] = in [<span class=\"number\">99</span> - i] ; <span class=\"comment\">// type of out is wire</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>或者将<code>for-loop</code>写在<code>always</code>中：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">$bits</span>(out) ; i++ ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"comment\">//$bits(signal)获取信号位长</span></span><br><span class=\"line\">            out[i] = in [ <span class=\"built_in\">$bits</span>(out) - <span class=\"number\">1</span> - i ] ; </span><br><span class=\"line\">            <span class=\"comment\">//type of out is reg</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Combinational-for-loop-255-bit-population-count\"><a href=\"#Combinational-for-loop-255-bit-population-count\" class=\"headerlink\" title=\"Combinational for-loop:255-bit population count\"></a>Combinational for-loop:255-bit population count</h3><blockquote>\n<p>A “population count” circuit counts the number of ‘1’s in an input vector. Build a population count circuit for a 255-bit input vector.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">254</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       out = <span class=\"number\">0</span> ;<span class=\"comment\">//寄存器型变量在always块中初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">255</span> ; i++) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            out = out + in[i] ; </span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generate-for-loop-1000-bit-binary-adder-2\"><a href=\"#Generate-for-loop-1000-bit-binary-adder-2\" class=\"headerlink\" title=\"Generate for-loop:1000-bit binary adder 2\"></a>Generate for-loop:1000-bit binary adder 2</h3><blockquote>\n<p>Create a 100-bit binary ripple-carry adder by instantiating 100 <a href=\"https://hdlbits.01xz.net/wiki/Fadd\">full adders</a>. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">\t<span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">genvar</span> i ;<span class=\"comment\">//好像在for循环内声明genvar i 会报错</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> sum[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] ^ b[<span class=\"number\">0</span>] ^ cin ;</span><br><span class=\"line\">        <span class=\"keyword\">assign</span> cout[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] &amp; b[<span class=\"number\">0</span>] | a[<span class=\"number\">0</span>] &amp; cin | b[<span class=\"number\">0</span>] &amp; cin ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span> : generate_name </span><br><span class=\"line\">            <span class=\"keyword\">assign</span> sum[i] = a[i] ^ b[i] ^ cout[i-<span class=\"number\">1</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> cout[i] = a[i] &amp; b[i] | a[i] &amp; cout[i-<span class=\"number\">1</span>] | b[i] &amp; cout[i-<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generate-for-loop-100-digit-BCD-adder\"><a href=\"#Generate-for-loop-100-digit-BCD-adder\" class=\"headerlink\" title=\"*Generate for-loop:100-digit BCD adder\"></a>*Generate for-loop:100-digit BCD adder</h3><blockquote>\n<p>You are provided with a BCD one-digit adder named <code>bcd_fadd</code> that adds two BCD digits and carry-in, and produces a sum and carry-out.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module bcd_fadd (</span><br><span class=\"line\">    input [3:0] a,</span><br><span class=\"line\">    input [3:0] b,</span><br><span class=\"line\">    input     cin,</span><br><span class=\"line\">    output   cout,</span><br><span class=\"line\">    output [3:0] sum );</span><br></pre></td></tr></table></figure>\n\n<p>Instantiate 100 copies of <code>bcd_fadd</code> to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//False Verion </span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i , j ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout = temp_cout[<span class=\"number\">99</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        bcd_fadd U0( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin , temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">7</span> , j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">400</span> ;  i = i + <span class=\"number\">4</span> , j++) <span class=\"keyword\">begin</span> : name </span><br><span class=\"line\">            bcd_fadd U1( a[i:i-<span class=\"number\">3</span>] , b[i:i-<span class=\"number\">3</span>] , temp_cout[j] , sum[i:i-<span class=\"number\">3</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>报错信息：Error (10170): Verilog HDL syntax error at top_module.v(12) near text: “,”;  expecting “;”</p>\n</blockquote>\n<p>没有查到相关信息(先留一个坑)，猜测：<code>for-loop</code>中不能有两个<code>genvar</code>,于是不能出现<code>,</code> ,提示你要用<code>;</code></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Right Verion </span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout = temp_cout[<span class=\"number\">99</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        bcd_fadd U0( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin , temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">7</span> ; i &lt; <span class=\"number\">400</span> ;  i = i + <span class=\"number\">4</span> ) <span class=\"keyword\">begin</span> : name </span><br><span class=\"line\">            bcd_fadd U1( a[i:i-<span class=\"number\">3</span>] , b[i:i-<span class=\"number\">3</span>] , temp_cout[(i + <span class=\"number\">1</span>) / <span class=\"number\">4</span> - <span class=\"number\">2</span>] , temp_cout[(i + <span class=\"number\">1</span>) / <span class=\"number\">4</span> - <span class=\"number\">1</span>] , sum[i:i-<span class=\"number\">3</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>此处实现一下<code>bcd_fadd</code></strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> bcd_fadd(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span> : <span class=\"number\">0</span>] a , b ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin , </span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] sum</span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] temp ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> temp = a + b + cin ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;cout , sum&#125; = (temp&gt;<span class=\"number\">9</span>) ? (temp+<span class=\"number\">6</span>) : temp ; </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Circuits\"><a href=\"#Circuits\" class=\"headerlink\" title=\"Circuits\"></a>Circuits</h1><h2 id=\"Combinational-Logic\"><a href=\"#Combinational-Logic\" class=\"headerlink\" title=\"Combinational Logic\"></a>Combinational Logic</h2><h3 id=\"Basic-Gates\"><a href=\"#Basic-Gates\" class=\"headerlink\" title=\"Basic Gates\"></a>Basic Gates</h3><h4 id=\"Even-longer-vectors\"><a href=\"#Even-longer-vectors\" class=\"headerlink\" title=\"Even longer vectors\"></a>Even longer vectors</h4><blockquote>\n<p>See also the shorter version: <a href=\"https://hdlbits.01xz.net/wiki/gatesv\">Gates and vectors</a>.</p>\n<p>You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour:</p>\n<ul>\n<li><strong>out_both</strong>: Each bit of this output vector should indicate whether <em>both</em> the corresponding input bit and its neighbour to the <strong>left</strong> are ‘1’. For example, <code>out_both[98]</code> should indicate if <code>in[98]</code> and <code>in[99]</code> are both 1. Since <code>in[99]</code> has no neighbour to the left, the answer is obvious so we don’t need to know <code>out_both[99]</code>.</li>\n<li><strong>out_any</strong>: Each bit of this output vector should indicate whether <em>any</em> of the corresponding input bit and its neighbour to the <strong>right</strong> are ‘1’. For example, <code>out_any[2]</code> should indicate if either <code>in[2]</code> or <code>in[1]</code> are 1. Since <code>in[0]</code> has no neighbour to the right, the answer is obvious so we don’t need to know <code>out_any[0]</code>.</li>\n<li><strong>out_different</strong>: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the <strong>left</strong>. For example, <code>out_different[98]</code> should indicate if <code>in[98]</code> is different from <code>in[99]</code>. For this part, treat the vector as wrapping around, so <code>in[99]</code>‘s neighbour to the left is <code>in[0]</code>.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//My vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">98</span>:<span class=\"number\">0</span>] out_both,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">1</span>] out_any,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out_different );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;</span><br><span class=\"line\">\t<span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">99</span> ; i++ ) <span class=\"keyword\">begin</span> : generate_name</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_both[i] = in[i] &amp; in[i+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_any[i+<span class=\"number\">1</span>]= in[i+<span class=\"number\">1</span>] | in[i] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_different[i] = in[i] ^ in[i+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> out_different[<span class=\"number\">99</span>] = in[<span class=\"number\">99</span>] ^ in[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Offical vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">98</span>:<span class=\"number\">0</span>] out_both,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">1</span>] out_any,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out_different );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_both = in[<span class=\"number\">98</span>:<span class=\"number\">0</span>] &amp; in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_any  = in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] | in[<span class=\"number\">98</span>:<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_different = in ^ &#123; in[<span class=\"number\">0</span>] , in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] &#125; ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Multiplexers\"><a href=\"#Multiplexers\" class=\"headerlink\" title=\"Multiplexers\"></a>Multiplexers</h3><h4 id=\"9-to-1-multiplexer\"><a href=\"#9-to-1-multiplexer\" class=\"headerlink\" title=\"9-to-1 multiplexer\"></a>9-to-1 multiplexer</h4><blockquote>\n<p>Create a 16-bit wide, 9-to-1 multiplexer. sel&#x3D;0 chooses a, sel&#x3D;1 chooses b, etc. For the unused cases (sel&#x3D;9 to 15), set all output bits to ‘1’.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Flase vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] a, b, c, d, e, f, g, h, i,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span> </span><br><span class=\"line\">    <span class=\"keyword\">case</span>(sel)</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0000</span> : out = a ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0001</span> : out = b ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0010</span> : out = c ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0011</span> : out = d ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0100</span> : out = e ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0101</span> : out = f ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0110</span> : out = g ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0111</span> : out = h ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1000</span> : out = i ;</span><br><span class=\"line\">     \t<span class=\"keyword\">default</span> : out = <span class=\"number\">16&#x27;hFFFF</span> ;<span class=\"comment\">//十六进制应该为4&#x27;hFFFF</span></span><br><span class=\"line\">        <span class=\"comment\">//踩过的坑 ： out = 1 ; out = 0xFFFF ; out = 4&#x27;hFFFF</span></span><br><span class=\"line\">        <span class=\"keyword\">endcase</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>      </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"256-to-1-4-bit-multiplexer\"><a href=\"#256-to-1-4-bit-multiplexer\" class=\"headerlink\" title=\"256-to-1 4-bit multiplexer\"></a>256-to-1 4-bit multiplexer</h4><blockquote>\n<p>Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel&#x3D;0 should select bits <code>in[3:0]</code>, sel&#x3D;1 selects bits <code>in[7:4]</code>, sel&#x3D;2 selects bits <code>in[11:8]</code>, etc.</p>\n</blockquote>\n<blockquote>\n<p>Hint</p>\n<ul>\n<li>With this many options, a case statement isn’t so useful.</li>\n<li>Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It’s not always good at this. An error saying “… is not a constant” means it couldn’t prove that the select width is constant. In particular, <code>in[ sel*4+3 : sel*4 ]</code> does not work. &#x2F;&#x2F; verilog 索引不支持全为变量</li>\n<li>Bit slicing (“Indexed vector part select”, since Verilog-2001) has an even more compact syntax.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1023</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = in[sel * <span class=\"number\">4</span> + <span class=\"number\">3</span> : sel * <span class=\"number\">4</span>] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>error : sel is not a constant File ;</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//True</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1023</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = in[sel * <span class=\"number\">4</span>  +: <span class=\"number\">4</span>] ;<span class=\"comment\">//从sel*4向上四位</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Arithmetic-Circuits\"><a href=\"#Arithmetic-Circuits\" class=\"headerlink\" title=\"Arithmetic Circuits\"></a>Arithmetic Circuits</h3><h4 id=\"3-bit-binary-adder\"><a href=\"#3-bit-binary-adder\" class=\"headerlink\" title=\"3-bit binary adder\"></a>3-bit binary adder</h4><blockquote>\n<p>Now that you know how to build a <a href=\"https://hdlbits.01xz.net/wiki/Fadd\">full adder</a>, make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    full_adder ripple_adder_1( a[<span class=\"number\">0</span>] , b[<span class=\"number\">0</span>] , cin , cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">0</span>] ) ;</span><br><span class=\"line\">    full_adder ripple_adder_2( a[<span class=\"number\">1</span>] , b[<span class=\"number\">1</span>] , cout[<span class=\"number\">0</span>] , cout[<span class=\"number\">1</span>] , sum[<span class=\"number\">1</span>] ) ;</span><br><span class=\"line\">    full_adder ripple_adder_3( a[<span class=\"number\">2</span>] , b[<span class=\"number\">2</span>] , cout[<span class=\"number\">1</span>] , cout[<span class=\"number\">2</span>] , sum[<span class=\"number\">2</span>] ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> full_adder(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a , b , cin , </span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout , sum</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout= a &amp; b | a &amp; cin | b &amp; cin ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> sum = a ^ b ^ cin ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Signed-addition-overflow\"><a href=\"#Signed-addition-overflow\" class=\"headerlink\" title=\"Signed addition overflow\"></a>Signed addition overflow</h4><blockquote>\n<p>Assume that you have two 8-bit 2’s complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Flase vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] b,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] s,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> overflow</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123; overflow , s &#125; = a + b ;</span><br><span class=\"line\">    <span class=\"comment\">//注意题中的signed overflow , 并不等于进位cout</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如何检测符号溢出(<strong>signed overflow</strong>) : 符号不同，相加不会溢出  ； 符号相同，可能溢出，需要设置检测。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//True vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] a , b ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span> : <span class=\"number\">0</span>] s ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> overflow</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> s = a + b ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> overflow = ( a[<span class=\"number\">7</span>] == b[<span class=\"number\">7</span>] ) ? (a[<span class=\"number\">7</span>] ^ s[<span class=\"number\">7</span>]) : <span class=\"number\">0</span> ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"100-bit-binary-adder\"><a href=\"#100-bit-binary-adder\" class=\"headerlink\" title=\"100-bit binary adder\"></a>100-bit binary adder</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] a,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> cout,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] sum</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The concatenation &#123;cout, sum&#125; is a 101-bit vector.</span></span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> &#123;cout, sum&#125; = a+b+cin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-digit-BCD-adder\"><a href=\"#4-digit-BCD-adder\" class=\"headerlink\" title=\"4-digit BCD adder\"></a>4-digit BCD adder</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module ( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    bcd_fadd U0 ( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin ,  temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U1 ( a[<span class=\"number\">7</span>:<span class=\"number\">4</span>] , b[<span class=\"number\">7</span>:<span class=\"number\">4</span>] , temp_cout[<span class=\"number\">0</span>] ,  temp_cout[<span class=\"number\">1</span>] , sum[<span class=\"number\">7</span>:<span class=\"number\">4</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U2 ( a[<span class=\"number\">11</span>:<span class=\"number\">8</span>] , b[<span class=\"number\">11</span>:<span class=\"number\">8</span>] , temp_cout[<span class=\"number\">1</span>] ,  temp_cout[<span class=\"number\">2</span>] , sum[<span class=\"number\">11</span>:<span class=\"number\">8</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U3 ( a[<span class=\"number\">15</span>:<span class=\"number\">12</span>] , b[<span class=\"number\">15</span>:<span class=\"number\">12</span>] , temp_cout[<span class=\"number\">2</span>] ,  cout , sum[<span class=\"number\">15</span>:<span class=\"number\">12</span>] ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Karnaugh-Map-to-Citcuit\"><a href=\"#Karnaugh-Map-to-Citcuit\" class=\"headerlink\" title=\"Karnaugh Map to Citcuit\"></a>Karnaugh Map to Citcuit</h3><h4 id=\"3-variable\"><a href=\"#3-variable\" class=\"headerlink\" title=\"3-variable\"></a>3-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> a, </span><br><span class=\"line\">\t<span class=\"keyword\">input</span> b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> c,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> out</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SOP form: Three prime implicants (1 term each), summed.</span></span><br><span class=\"line\">\t<span class=\"comment\">// POS form: One prime implicant (of 3 terms)</span></span><br><span class=\"line\">\t<span class=\"comment\">// In this particular case, the result is the same for both SOP and POS.</span></span><br><span class=\"line\">    <span class=\"comment\">// it&#x27;s easier by using SOP</span></span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = (a | b | c);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable\"><a href=\"#4-variable\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = (!b &amp; !c) | (!a &amp; !d) | (!a &amp; b &amp; c) | (a &amp; c &amp; d)  ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable-1\"><a href=\"#4-variable-1\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = a | (!b &amp; c) ;</span><br><span class=\"line\">    <span class=\"comment\">//用0去算！f更简单</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable-2\"><a href=\"#4-variable-2\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Stupid vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = (!a &amp; !b) &amp; (c ^ d) | (!a &amp; b) &amp; !(c ^ d) | a &amp; b &amp; (c ^ d) | (a &amp; !b) &amp; !(c ^ d);</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wise vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = a ^ b ^ c ^ d ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果会奇偶校验便能一眼看出：<code>abcd</code>中有奇数个<code>1</code>，卡诺图为<code>1</code> .反之为<code>0</code>.</strong></p>\n<h4 id=\"Minimum-SOP-and-POS\"><a href=\"#Minimum-SOP-and-POS\" class=\"headerlink\" title=\"Minimum SOP and POS\"></a>Minimum SOP and POS</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out_sop,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out_pos</span><br><span class=\"line\">); </span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out_sop = c &amp; d | !a &amp; !b &amp; c ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_pos = c &amp; (!a | b) &amp; (!b | d) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Karnaugh-map\"><a href=\"#Karnaugh-map\" class=\"headerlink\" title=\"Karnaugh map\"></a>Karnaugh map</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">1</span>] x, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> f );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> f = !x[<span class=\"number\">1</span>] &amp; x[<span class=\"number\">3</span>] | x[<span class=\"number\">1</span>] &amp; x[<span class=\"number\">2</span>] &amp; !x[<span class=\"number\">3</span>] ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Karnaugh-map-1\"><a href=\"#Karnaugh-map-1\" class=\"headerlink\" title=\"Karnaugh map\"></a>Karnaugh map</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">1</span>] x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> f</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> f = (x[<span class=\"number\">3</span>] | !x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">2</span>] | x[<span class=\"number\">3</span>] | x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">1</span>] | x[<span class=\"number\">2</span>] | !x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">1</span>] | !x[<span class=\"number\">2</span>] | x[<span class=\"number\">4</span>]) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"K-map-implemented-with-a-multiplexer\"><a href=\"#K-map-implemented-with-a-multiplexer\" class=\"headerlink\" title=\"K-map implemented with a multiplexer\"></a>K-map implemented with a multiplexer</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] mux_in</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span>( &#123; c , d &#125; )</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b00</span> : mux_in = <span class=\"number\">4&#x27;b0100</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b01</span> : mux_in = <span class=\"number\">4&#x27;b0001</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b11</span> : mux_in = <span class=\"number\">4&#x27;b1001</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b10</span> : mux_in = <span class=\"number\">4&#x27;b0101</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> : mux_in = <span class=\"number\">4&#x27;b0000</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">endcase</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sequential-Logic\"><a href=\"#Sequential-Logic\" class=\"headerlink\" title=\"Sequential Logic\"></a>Sequential Logic</h2><h3 id=\"Latches-and-Flip-Flops\"><a href=\"#Latches-and-Flip-Flops\" class=\"headerlink\" title=\"Latches and Flip-Flops\"></a>Latches and Flip-Flops</h3><h4 id=\"DFFs-and-gates\"><a href=\"#DFFs-and-gates\" class=\"headerlink\" title=\"*DFFs and gates\"></a>*DFFs and gates</h4><p>concise solution :</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> z</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        Q[<span class=\"number\">0</span>] &lt;= x ^ Q[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">        Q[<span class=\"number\">1</span>] &lt;= x &amp; ~Q[<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        Q[<span class=\"number\">2</span>] &lt;= x | ~Q[<span class=\"number\">2</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> z = ~ (|Q) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>my solution</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> z</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    DFF_ U0( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x ^ Q[<span class=\"number\">0</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">0</span>]) ) ;</span><br><span class=\"line\">    DFF_ U1( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x &amp; ~Q[<span class=\"number\">1</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">1</span>]) ) ;</span><br><span class=\"line\">    DFF_ U2( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x | ~Q[<span class=\"number\">2</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">2</span>]) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> z = ~ (| Q ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> DFF_(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk , d ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q &lt;= d ; </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Detect-an-edge\"><a href=\"#Detect-an-edge\" class=\"headerlink\" title=\"*Detect an edge\"></a>*Detect an edge</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] pedge</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">       pedge &lt;= ~last_in &amp; in ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Detect-both-edges\"><a href=\"#Detect-both-edges\" class=\"headerlink\" title=\"*Detect both edges\"></a>*Detect both edges</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] anyedge</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">       anyedge &lt;= last_in ^ in ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Edge-capture-register\"><a href=\"#Edge-capture-register\" class=\"headerlink\" title=\"*Edge capture register\"></a>*Edge capture register</h4><p>&#x3D;&#x3D;Tips&#x3D;&#x3D; : After clk’s change from 1 to 0 , register q &#x3D; 1 . And then , q is still <code>1</code>  until <code>reset = 1</code> ; </p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] out</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">integer</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) out &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">32</span> ; i++)</span><br><span class=\"line\">                out[i] &lt;= last_in[i] &amp; ~in[i] ? <span class=\"number\">1</span> : out[i] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;My error solution&#x3D;&#x3D;</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] out</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">integer</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) out &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"comment\">////////////////////////</span></span><br><span class=\"line\">            out &lt;= last_in &amp; ~in ;</span><br><span class=\"line\">            <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dual-edge-triggered-filp-flop\"><a href=\"#Dual-edge-triggered-filp-flop\" class=\"headerlink\" title=\"*Dual-edge triggered filp-flop\"></a>*Dual-edge triggered filp-flop</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> q0 , q1 ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q0 &lt;= d ; </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q1 &lt;= d ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> q = clk ? q0 : q1 ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h3><h4 id=\"Counter-1-12\"><a href=\"#Counter-1-12\" class=\"headerlink\" title=\"*Counter 1-12\"></a>*Counter 1-12</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] Q,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_load,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] c_d</span><br><span class=\"line\">); <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    count4 the_counter (clk, c_enable, c_load, c_d , Q);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_enable = enable ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_load = (Q == <span class=\"number\">12</span> &amp;&amp; enable) || reset ? <span class=\"number\">1</span> : <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_d = <span class=\"number\">4&#x27;b0001</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>**Count4.v **</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> count4(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk , </span><br><span class=\"line\">    <span class=\"keyword\">input</span> enable ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> load ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] d ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] Q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(load)    Q &lt;= d ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(enable) Q &lt;= Q + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counter-1000\"><a href=\"#Counter-1000\" class=\"headerlink\" title=\"Counter 1000\"></a>Counter 1000</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//make sure OneHertz turn into 1 once time every 1000 clk.即分频器，1000Hz转1Hz</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> OneHertz,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] c_enable</span><br><span class=\"line\">); <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">11</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;OneHertz , c_enable&#125; = &#123; (Q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span>) , (Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span>) ,(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) , <span class=\"number\">1&#x27;b1</span> &#125; ; </span><br><span class=\"line\">    bcdcount counter0 (clk, reset, c_enable[<span class=\"number\">0</span>] , Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]);</span><br><span class=\"line\">    bcdcount counter1 (clk, reset, c_enable[<span class=\"number\">1</span>] , Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>]);</span><br><span class=\"line\">    bcdcount counter2 (clk, reset, c_enable[<span class=\"number\">2</span>] , Q[<span class=\"number\">11</span>:<span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-digit-decimal-counter\"><a href=\"#4-digit-decimal-counter\" class=\"headerlink\" title=\"4-digit decimal counter\"></a>4-digit decimal counter</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,   <span class=\"comment\">// Synchronous active-high reset</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">1</span>] ena,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] q);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> ena = &#123;  (q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span>) , (q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span>) , (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) &#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) q &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">1</span>])\tq[<span class=\"number\">7</span>:<span class=\"number\">4</span>] &lt;= (q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">2</span>])\tq[<span class=\"number\">11</span>:<span class=\"number\">8</span>] &lt;= (q[<span class=\"number\">11</span>:<span class=\"number\">8</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">11</span>:<span class=\"number\">8</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">3</span>])\tq[<span class=\"number\">15</span>:<span class=\"number\">12</span>] &lt;= (q[<span class=\"number\">15</span>:<span class=\"number\">12</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">15</span>:<span class=\"number\">12</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//another solution , Init module</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,   <span class=\"comment\">// Synchronous active-high reset</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">1</span>] ena,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] q);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">wire</span> en0 ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;ena , en0&#125; = &#123; q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span> , q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span> , q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>, <span class=\"number\">1&#x27;b1</span>&#125; ;</span><br><span class=\"line\">    counter10 U0(clk , reset , en0    , q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter10 U1(clk , reset , ena[<span class=\"number\">1</span>] , q[<span class=\"number\">7</span>:<span class=\"number\">4</span>]) ;</span><br><span class=\"line\">    counter10 U2(clk , reset , ena[<span class=\"number\">2</span>] , q[<span class=\"number\">11</span>:<span class=\"number\">8</span>]) ;</span><br><span class=\"line\">    counter10 U3(clk , reset , ena[<span class=\"number\">3</span>] , q[<span class=\"number\">15</span>:<span class=\"number\">12</span>]) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter10(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> ena ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"comment\">//assign reset = (out == 9) ;</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)\tout &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ena) out &lt;= (out == <span class=\"number\">9</span>) ? <span class=\"number\">0</span> : out + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-hour-clock\"><a href=\"#12-hour-clock\" class=\"headerlink\" title=\"12-hour clock\"></a>12-hour clock</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> ena ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> pm ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] hh,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] mm,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] ss</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] carry ;</span><br><span class=\"line\">    counter60 ss0(clk , reset , ena , carry[<span class=\"number\">0</span>] , ss[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter60 mm0(clk , reset , carry[<span class=\"number\">0</span>] , carry[<span class=\"number\">1</span>] , mm[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter12 hh0(clk , reset , carry[<span class=\"number\">1</span>] &amp;&amp; carry[<span class=\"number\">0</span>] , pm       , hh[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter60(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> en ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> carry ,<span class=\"comment\">//carry = 1 when Q = 8&#x27;h59 , which means carry out .</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] Q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> carry = (Q == <span class=\"number\">8&#x27;h59</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   Q &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= (Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>)  Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] &lt;= (Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h5</span>) ? <span class=\"number\">0</span> : Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter12(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> en ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> pm ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] Q  </span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   Q &lt;= <span class=\"number\">8&#x27;b0001_0010</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span>(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) </span><br><span class=\"line\">                <span class=\"number\">4&#x27;b1001</span> : Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] &lt;= <span class=\"number\">8&#x27;b0001_0000</span> ;</span><br><span class=\"line\">                <span class=\"number\">4&#x27;b0010</span> : <span class=\"keyword\">begin</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h1</span>)  Q &lt;= <span class=\"number\">8&#x27;h01</span> ;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>    Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span> : Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">endcase</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   pm &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en &amp;&amp; Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h11</span>)  pm &lt;= ~pm ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pm &lt;= pm ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Some-worthwhile-retry-practice\"><a href=\"#Some-worthwhile-retry-practice\" class=\"headerlink\" title=\"Some worthwhile retry practice ;\"></a>Some worthwhile retry practice ;</h2><ul>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgedetect\">Detect an edge</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgedetect2\">Detect both edges</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgecapture\">Edge capture register</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/dualedge\">Dual-edge triggered flip-flop</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Countslow\">Slow decade counter</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a\">Counter 1-12</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b\">Counter 1000</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Countbcd\">4-digit decimal counter</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Count_clock\">12-hour clock</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q12\">3-input LUT</a></li>\n</ul>\n","site":{"data":{}},"length":16986,"excerpt":"<h3>Abstract</h3>\n\n<p>The solutions and my notes of <a href=\"[Problem sets - HDLBits (01xz.net)](https://hdlbits.01xz.net/wiki/Problem_sets)\">HDLBits</a> are written in this document .</p>","more":"<p>[TOC]</p>\n<h1 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h1><h3 id=\"Getting-Started-1\"><a href=\"#Getting-Started-1\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( <span class=\"keyword\">output</span> one );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> one = <span class=\"number\">1&#x27;b1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Output-Zero\"><a href=\"#Output-Zero\" class=\"headerlink\" title=\"Output Zero\"></a>Output Zero</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module ( <span class=\"keyword\">output</span> zero );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> zero = <span class=\"number\">1&#x27;b0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Verilog-Language\"><a href=\"#Verilog-Language\" class=\"headerlink\" title=\"Verilog Language\"></a>Verilog Language</h1><h2 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h2><h3 id=\"Simple-wire\"><a href=\"#Simple-wire\" class=\"headerlink\" title=\"Simple wire\"></a>Simple wire</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( <span class=\"keyword\">input</span> in, <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = in;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Four-wires\"><a href=\"#Four-wires\" class=\"headerlink\" title=\"Four wires\"></a>Four wires</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> a,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> c,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> w,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> x,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> y,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> z  );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> w = a;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> x = b;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> y = b;</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> z = c;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If we&#x27;re certain about the width of each signal, using </span></span><br><span class=\"line\">\t<span class=\"comment\">// the concatenation operator is equivalent and shorter:</span></span><br><span class=\"line\">\t<span class=\"comment\">// assign &#123;w,x,y,z&#125; = &#123;a,b,b,c&#125;;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Inverter\"><a href=\"#Inverter\" class=\"headerlink\" title=\"Inverter\"></a>Inverter</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> in,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> out</span><br><span class=\"line\">);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = ~in;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AND-gate\"><a href=\"#AND-gate\" class=\"headerlink\" title=\"AND gate\"></a>AND gate</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> a, </span><br><span class=\"line\">    <span class=\"keyword\">input</span> b, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = a &amp; b ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NOR-gate\"><a href=\"#NOR-gate\" class=\"headerlink\" title=\"NOR gate\"></a>NOR gate</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> a, </span><br><span class=\"line\">    <span class=\"keyword\">input</span> b, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> out );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = ! (a | b) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"XNOR-gate\"><a href=\"#XNOR-gate\" class=\"headerlink\" title=\"XNOR gate\"></a>XNOR gate</h3><h3 id=\"Declaring-wires\"><a href=\"#Declaring-wires\" class=\"headerlink\" title=\"Declaring wires\"></a>Declaring wires</h3><h3 id=\"7458-chip\"><a href=\"#7458-chip\" class=\"headerlink\" title=\"7458 chip\"></a>7458 chip</h3><h2 id=\"Vectors\"><a href=\"#Vectors\" class=\"headerlink\" title=\"Vectors\"></a>Vectors</h2><h3 id=\"Vectors-1\"><a href=\"#Vectors-1\" class=\"headerlink\" title=\"Vectors\"></a>Vectors</h3><h2 id=\"More-Verilog-Features\"><a href=\"#More-Verilog-Features\" class=\"headerlink\" title=\"More Verilog Features\"></a>More Verilog Features</h2><h3 id=\"Combinational-for-loop-Vector-reversal-2\"><a href=\"#Combinational-for-loop-Vector-reversal-2\" class=\"headerlink\" title=\"*Combinational for-loop : Vector reversal 2\"></a>*Combinational for-loop : Vector reversal 2</h3><blockquote>\n<p>Given a 100-bit input vector [99:0], reverse its bit ordering.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// False Vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> out[i] = in [<span class=\"number\">99</span> - i] ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error (10170): Verilog HDL syntax error at top_module.v(6) near text: &quot;for&quot;;  expecting &quot;endmodule&quot;. </span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>为什么是这样的报错呢？显示在for循环那一行前缺少一个endmodule</p>\n<blockquote>\n<p>在module内部，只能<strong>声明输入</strong>、<strong>输出端口、内部信号以及使用连续赋值</strong>（<code>assign</code> 语句）来描述硬件电路的连续逻辑</p>\n</blockquote>\n<p>因此，<code>verilog</code>编译器认为，<code>for</code>循环前应该有一个<code>endmodule</code>以结束该<code>module</code>,此后才能开始<code>for-loop</code>的声明。</p>\n<p><strong>为什么Verilog规定Module内部不能声明for-loop?</strong></p>\n<blockquote>\n<p>当涉及到硬件描述语言（HDL）如Verilog时，有一些关键的设计原则和语法规则是不同于通用编程语言（如C、Python）的。</p>\n<p>Verilog 是为硬件设计而设计的，其目的是描述硬件电路的结构和行为，而不是传统意义上的“编程”。在硬件电路中，信号是在不同的时间步长上并行计算的，而不是按顺序执行的像在软件中一样。这导致了一些语法规则的不同。</p>\n<p>具体来说，以下是为什么在 Verilog 中不能直接将 <code>for</code> 循环放在模块内部的原因：</p>\n<ol>\n<li><strong>并行性：</strong> Verilog 中的代码被解释为电路，其中不同的信号在相同的时间步长上并行地计算。这与传统编程语言中的迭代循环不同，后者按顺序执行。在硬件电路中，不同的信号和逻辑是同时计算的，因此 <code>for</code> 循环的概念与硬件的并行性不一致。</li>\n<li><strong>延迟和时间问题：</strong> 在 Verilog 中，信号的传播和逻辑运算都需要考虑时间延迟。循环的迭代次数可能需要在编译时已知，但在硬件中，延迟可能会影响电路的行为。如果允许在模块内部使用 <code>for</code> 循环，编译器就需要处理如何在时间上正确地展开循环和处理延迟的问题。</li>\n</ol>\n<p>为了符合硬件的特性，Verilog 引入了生成语句（generate statements），允许在编译时生成不同的硬件结构，这包括使用 <code>for</code> 循环来生成多个类似的硬件逻辑。生成语句允许在不同的时间步长上并行生成硬件，而不会引入运行时的顺序问题。</p>\n</blockquote>\n<p>简单说就是：<code>for-loop</code>内不同层次(i &#x3D; 1 , 2 ,3 ……)，体现了顺序的先后，是软件编程的思维；而<code>verilog</code>中<code>assign</code>描述的各硬件是并行运行的，是硬件编程的思维；二者需要区分开来:smile:</p>\n<p>我们使用<code>generate</code>来实现(generate生成多个并行计算模块)：[generate介绍](<a href=\"https://zhuanlan.zhihu.com/p/107047600\">Verilog中generate的使用 - 知乎 (zhihu.com)</a>)</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;<span class=\"comment\">//state a variable i </span></span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span> : generate_name</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out[i] = in [<span class=\"number\">99</span> - i] ; <span class=\"comment\">// type of out is wire</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>或者将<code>for-loop</code>写在<code>always</code>中：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">$bits</span>(out) ; i++ ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"comment\">//$bits(signal)获取信号位长</span></span><br><span class=\"line\">            out[i] = in [ <span class=\"built_in\">$bits</span>(out) - <span class=\"number\">1</span> - i ] ; </span><br><span class=\"line\">            <span class=\"comment\">//type of out is reg</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Combinational-for-loop-255-bit-population-count\"><a href=\"#Combinational-for-loop-255-bit-population-count\" class=\"headerlink\" title=\"Combinational for-loop:255-bit population count\"></a>Combinational for-loop:255-bit population count</h3><blockquote>\n<p>A “population count” circuit counts the number of ‘1’s in an input vector. Build a population count circuit for a 255-bit input vector.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">254</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       out = <span class=\"number\">0</span> ;<span class=\"comment\">//寄存器型变量在always块中初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">255</span> ; i++) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            out = out + in[i] ; </span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generate-for-loop-1000-bit-binary-adder-2\"><a href=\"#Generate-for-loop-1000-bit-binary-adder-2\" class=\"headerlink\" title=\"Generate for-loop:1000-bit binary adder 2\"></a>Generate for-loop:1000-bit binary adder 2</h3><blockquote>\n<p>Create a 100-bit binary ripple-carry adder by instantiating 100 <a href=\"https://hdlbits.01xz.net/wiki/Fadd\">full adders</a>. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">\t<span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">genvar</span> i ;<span class=\"comment\">//好像在for循环内声明genvar i 会报错</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> sum[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] ^ b[<span class=\"number\">0</span>] ^ cin ;</span><br><span class=\"line\">        <span class=\"keyword\">assign</span> cout[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>] &amp; b[<span class=\"number\">0</span>] | a[<span class=\"number\">0</span>] &amp; cin | b[<span class=\"number\">0</span>] &amp; cin ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span> ; i &lt; <span class=\"number\">100</span> ; i++) <span class=\"keyword\">begin</span> : generate_name </span><br><span class=\"line\">            <span class=\"keyword\">assign</span> sum[i] = a[i] ^ b[i] ^ cout[i-<span class=\"number\">1</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> cout[i] = a[i] &amp; b[i] | a[i] &amp; cout[i-<span class=\"number\">1</span>] | b[i] &amp; cout[i-<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Generate-for-loop-100-digit-BCD-adder\"><a href=\"#Generate-for-loop-100-digit-BCD-adder\" class=\"headerlink\" title=\"*Generate for-loop:100-digit BCD adder\"></a>*Generate for-loop:100-digit BCD adder</h3><blockquote>\n<p>You are provided with a BCD one-digit adder named <code>bcd_fadd</code> that adds two BCD digits and carry-in, and produces a sum and carry-out.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module bcd_fadd (</span><br><span class=\"line\">    input [3:0] a,</span><br><span class=\"line\">    input [3:0] b,</span><br><span class=\"line\">    input     cin,</span><br><span class=\"line\">    output   cout,</span><br><span class=\"line\">    output [3:0] sum );</span><br></pre></td></tr></table></figure>\n\n<p>Instantiate 100 copies of <code>bcd_fadd</code> to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//False Verion </span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i , j ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout = temp_cout[<span class=\"number\">99</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        bcd_fadd U0( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin , temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">7</span> , j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">400</span> ;  i = i + <span class=\"number\">4</span> , j++) <span class=\"keyword\">begin</span> : name </span><br><span class=\"line\">            bcd_fadd U1( a[i:i-<span class=\"number\">3</span>] , b[i:i-<span class=\"number\">3</span>] , temp_cout[j] , sum[i:i-<span class=\"number\">3</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>报错信息：Error (10170): Verilog HDL syntax error at top_module.v(12) near text: “,”;  expecting “;”</p>\n</blockquote>\n<p>没有查到相关信息(先留一个坑)，猜测：<code>for-loop</code>中不能有两个<code>genvar</code>,于是不能出现<code>,</code> ,提示你要用<code>;</code></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Right Verion </span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">399</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout = temp_cout[<span class=\"number\">99</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">generate</span></span><br><span class=\"line\">        bcd_fadd U0( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin , temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">7</span> ; i &lt; <span class=\"number\">400</span> ;  i = i + <span class=\"number\">4</span> ) <span class=\"keyword\">begin</span> : name </span><br><span class=\"line\">            bcd_fadd U1( a[i:i-<span class=\"number\">3</span>] , b[i:i-<span class=\"number\">3</span>] , temp_cout[(i + <span class=\"number\">1</span>) / <span class=\"number\">4</span> - <span class=\"number\">2</span>] , temp_cout[(i + <span class=\"number\">1</span>) / <span class=\"number\">4</span> - <span class=\"number\">1</span>] , sum[i:i-<span class=\"number\">3</span>]) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>此处实现一下<code>bcd_fadd</code></strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> bcd_fadd(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span> : <span class=\"number\">0</span>] a , b ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin , </span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] sum</span><br><span class=\"line\">) ;</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] temp ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> temp = a + b + cin ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;cout , sum&#125; = (temp&gt;<span class=\"number\">9</span>) ? (temp+<span class=\"number\">6</span>) : temp ; </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Circuits\"><a href=\"#Circuits\" class=\"headerlink\" title=\"Circuits\"></a>Circuits</h1><h2 id=\"Combinational-Logic\"><a href=\"#Combinational-Logic\" class=\"headerlink\" title=\"Combinational Logic\"></a>Combinational Logic</h2><h3 id=\"Basic-Gates\"><a href=\"#Basic-Gates\" class=\"headerlink\" title=\"Basic Gates\"></a>Basic Gates</h3><h4 id=\"Even-longer-vectors\"><a href=\"#Even-longer-vectors\" class=\"headerlink\" title=\"Even longer vectors\"></a>Even longer vectors</h4><blockquote>\n<p>See also the shorter version: <a href=\"https://hdlbits.01xz.net/wiki/gatesv\">Gates and vectors</a>.</p>\n<p>You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour:</p>\n<ul>\n<li><strong>out_both</strong>: Each bit of this output vector should indicate whether <em>both</em> the corresponding input bit and its neighbour to the <strong>left</strong> are ‘1’. For example, <code>out_both[98]</code> should indicate if <code>in[98]</code> and <code>in[99]</code> are both 1. Since <code>in[99]</code> has no neighbour to the left, the answer is obvious so we don’t need to know <code>out_both[99]</code>.</li>\n<li><strong>out_any</strong>: Each bit of this output vector should indicate whether <em>any</em> of the corresponding input bit and its neighbour to the <strong>right</strong> are ‘1’. For example, <code>out_any[2]</code> should indicate if either <code>in[2]</code> or <code>in[1]</code> are 1. Since <code>in[0]</code> has no neighbour to the right, the answer is obvious so we don’t need to know <code>out_any[0]</code>.</li>\n<li><strong>out_different</strong>: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the <strong>left</strong>. For example, <code>out_different[98]</code> should indicate if <code>in[98]</code> is different from <code>in[99]</code>. For this part, treat the vector as wrapping around, so <code>in[99]</code>‘s neighbour to the left is <code>in[0]</code>.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//My vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">98</span>:<span class=\"number\">0</span>] out_both,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">1</span>] out_any,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out_different );</span><br><span class=\"line\">    <span class=\"keyword\">genvar</span> i ;</span><br><span class=\"line\">\t<span class=\"keyword\">generate</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">99</span> ; i++ ) <span class=\"keyword\">begin</span> : generate_name</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_both[i] = in[i] &amp; in[i+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_any[i+<span class=\"number\">1</span>]= in[i+<span class=\"number\">1</span>] | in[i] ;</span><br><span class=\"line\">            <span class=\"keyword\">assign</span> out_different[i] = in[i] ^ in[i+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">assign</span> out_different[<span class=\"number\">99</span>] = in[<span class=\"number\">99</span>] ^ in[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">endgenerate</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Offical vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">98</span>:<span class=\"number\">0</span>] out_both,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">1</span>] out_any,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] out_different );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_both = in[<span class=\"number\">98</span>:<span class=\"number\">0</span>] &amp; in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_any  = in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] | in[<span class=\"number\">98</span>:<span class=\"number\">0</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_different = in ^ &#123; in[<span class=\"number\">0</span>] , in[<span class=\"number\">99</span>:<span class=\"number\">1</span>] &#125; ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Multiplexers\"><a href=\"#Multiplexers\" class=\"headerlink\" title=\"Multiplexers\"></a>Multiplexers</h3><h4 id=\"9-to-1-multiplexer\"><a href=\"#9-to-1-multiplexer\" class=\"headerlink\" title=\"9-to-1 multiplexer\"></a>9-to-1 multiplexer</h4><blockquote>\n<p>Create a 16-bit wide, 9-to-1 multiplexer. sel&#x3D;0 chooses a, sel&#x3D;1 chooses b, etc. For the unused cases (sel&#x3D;9 to 15), set all output bits to ‘1’.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Flase vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] a, b, c, d, e, f, g, h, i,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span> </span><br><span class=\"line\">    <span class=\"keyword\">case</span>(sel)</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0000</span> : out = a ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0001</span> : out = b ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0010</span> : out = c ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0011</span> : out = d ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0100</span> : out = e ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0101</span> : out = f ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0110</span> : out = g ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0111</span> : out = h ;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1000</span> : out = i ;</span><br><span class=\"line\">     \t<span class=\"keyword\">default</span> : out = <span class=\"number\">16&#x27;hFFFF</span> ;<span class=\"comment\">//十六进制应该为4&#x27;hFFFF</span></span><br><span class=\"line\">        <span class=\"comment\">//踩过的坑 ： out = 1 ; out = 0xFFFF ; out = 4&#x27;hFFFF</span></span><br><span class=\"line\">        <span class=\"keyword\">endcase</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>      </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"256-to-1-4-bit-multiplexer\"><a href=\"#256-to-1-4-bit-multiplexer\" class=\"headerlink\" title=\"256-to-1 4-bit multiplexer\"></a>256-to-1 4-bit multiplexer</h4><blockquote>\n<p>Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel&#x3D;0 should select bits <code>in[3:0]</code>, sel&#x3D;1 selects bits <code>in[7:4]</code>, sel&#x3D;2 selects bits <code>in[11:8]</code>, etc.</p>\n</blockquote>\n<blockquote>\n<p>Hint</p>\n<ul>\n<li>With this many options, a case statement isn’t so useful.</li>\n<li>Vector indices can be variable, as long as the synthesizer can figure out that the width of the bits being selected is constant. It’s not always good at this. An error saying “… is not a constant” means it couldn’t prove that the select width is constant. In particular, <code>in[ sel*4+3 : sel*4 ]</code> does not work. &#x2F;&#x2F; verilog 索引不支持全为变量</li>\n<li>Bit slicing (“Indexed vector part select”, since Verilog-2001) has an even more compact syntax.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1023</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = in[sel * <span class=\"number\">4</span> + <span class=\"number\">3</span> : sel * <span class=\"number\">4</span>] ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>error : sel is not a constant File ;</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//True</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1023</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = in[sel * <span class=\"number\">4</span>  +: <span class=\"number\">4</span>] ;<span class=\"comment\">//从sel*4向上四位</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Arithmetic-Circuits\"><a href=\"#Arithmetic-Circuits\" class=\"headerlink\" title=\"Arithmetic Circuits\"></a>Arithmetic Circuits</h3><h4 id=\"3-bit-binary-adder\"><a href=\"#3-bit-binary-adder\" class=\"headerlink\" title=\"3-bit binary adder\"></a>3-bit binary adder</h4><blockquote>\n<p>Now that you know how to build a <a href=\"https://hdlbits.01xz.net/wiki/Fadd\">full adder</a>, make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from <em>each</em> full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    full_adder ripple_adder_1( a[<span class=\"number\">0</span>] , b[<span class=\"number\">0</span>] , cin , cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">0</span>] ) ;</span><br><span class=\"line\">    full_adder ripple_adder_2( a[<span class=\"number\">1</span>] , b[<span class=\"number\">1</span>] , cout[<span class=\"number\">0</span>] , cout[<span class=\"number\">1</span>] , sum[<span class=\"number\">1</span>] ) ;</span><br><span class=\"line\">    full_adder ripple_adder_3( a[<span class=\"number\">2</span>] , b[<span class=\"number\">2</span>] , cout[<span class=\"number\">1</span>] , cout[<span class=\"number\">2</span>] , sum[<span class=\"number\">2</span>] ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> full_adder(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a , b , cin , </span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout , sum</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> cout= a &amp; b | a &amp; cin | b &amp; cin ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> sum = a ^ b ^ cin ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Signed-addition-overflow\"><a href=\"#Signed-addition-overflow\" class=\"headerlink\" title=\"Signed addition overflow\"></a>Signed addition overflow</h4><blockquote>\n<p>Assume that you have two 8-bit 2’s complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.</p>\n</blockquote>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Flase vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] b,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] s,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> overflow</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123; overflow , s &#125; = a + b ;</span><br><span class=\"line\">    <span class=\"comment\">//注意题中的signed overflow , 并不等于进位cout</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如何检测符号溢出(<strong>signed overflow</strong>) : 符号不同，相加不会溢出  ； 符号相同，可能溢出，需要设置检测。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//True vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] a , b ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span> : <span class=\"number\">0</span>] s ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> overflow</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> s = a + b ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> overflow = ( a[<span class=\"number\">7</span>] == b[<span class=\"number\">7</span>] ) ? (a[<span class=\"number\">7</span>] ^ s[<span class=\"number\">7</span>]) : <span class=\"number\">0</span> ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"100-bit-binary-adder\"><a href=\"#100-bit-binary-adder\" class=\"headerlink\" title=\"100-bit binary adder\"></a>100-bit binary adder</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] a,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> cout,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> [<span class=\"number\">99</span>:<span class=\"number\">0</span>] sum</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The concatenation &#123;cout, sum&#125; is a 101-bit vector.</span></span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> &#123;cout, sum&#125; = a+b+cin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-digit-BCD-adder\"><a href=\"#4-digit-BCD-adder\" class=\"headerlink\" title=\"4-digit BCD adder\"></a>4-digit BCD adder</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module ( </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] a, b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> cin,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> cout,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] sum );</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] temp_cout ;</span><br><span class=\"line\">    bcd_fadd U0 ( a[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , b[<span class=\"number\">3</span>:<span class=\"number\">0</span>] , cin ,  temp_cout[<span class=\"number\">0</span>] , sum[<span class=\"number\">3</span>:<span class=\"number\">0</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U1 ( a[<span class=\"number\">7</span>:<span class=\"number\">4</span>] , b[<span class=\"number\">7</span>:<span class=\"number\">4</span>] , temp_cout[<span class=\"number\">0</span>] ,  temp_cout[<span class=\"number\">1</span>] , sum[<span class=\"number\">7</span>:<span class=\"number\">4</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U2 ( a[<span class=\"number\">11</span>:<span class=\"number\">8</span>] , b[<span class=\"number\">11</span>:<span class=\"number\">8</span>] , temp_cout[<span class=\"number\">1</span>] ,  temp_cout[<span class=\"number\">2</span>] , sum[<span class=\"number\">11</span>:<span class=\"number\">8</span>] ) ;</span><br><span class=\"line\">    bcd_fadd U3 ( a[<span class=\"number\">15</span>:<span class=\"number\">12</span>] , b[<span class=\"number\">15</span>:<span class=\"number\">12</span>] , temp_cout[<span class=\"number\">2</span>] ,  cout , sum[<span class=\"number\">15</span>:<span class=\"number\">12</span>] ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Karnaugh-Map-to-Citcuit\"><a href=\"#Karnaugh-Map-to-Citcuit\" class=\"headerlink\" title=\"Karnaugh Map to Citcuit\"></a>Karnaugh Map to Citcuit</h3><h4 id=\"3-variable\"><a href=\"#3-variable\" class=\"headerlink\" title=\"3-variable\"></a>3-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> a, </span><br><span class=\"line\">\t<span class=\"keyword\">input</span> b,</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> c,</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> out</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SOP form: Three prime implicants (1 term each), summed.</span></span><br><span class=\"line\">\t<span class=\"comment\">// POS form: One prime implicant (of 3 terms)</span></span><br><span class=\"line\">\t<span class=\"comment\">// In this particular case, the result is the same for both SOP and POS.</span></span><br><span class=\"line\">    <span class=\"comment\">// it&#x27;s easier by using SOP</span></span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = (a | b | c);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable\"><a href=\"#4-variable\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = (!b &amp; !c) | (!a &amp; !d) | (!a &amp; b &amp; c) | (a &amp; c &amp; d)  ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable-1\"><a href=\"#4-variable-1\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = a | (!b &amp; c) ;</span><br><span class=\"line\">    <span class=\"comment\">//用0去算！f更简单</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-variable-2\"><a href=\"#4-variable-2\" class=\"headerlink\" title=\"4-variable\"></a>4-variable</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Stupid vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out = (!a &amp; !b) &amp; (c ^ d) | (!a &amp; b) &amp; !(c ^ d) | a &amp; b &amp; (c ^ d) | (a &amp; !b) &amp; !(c ^ d);</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wise vesion</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out  ); </span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out = a ^ b ^ c ^ d ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果会奇偶校验便能一眼看出：<code>abcd</code>中有奇数个<code>1</code>，卡诺图为<code>1</code> .反之为<code>0</code>.</strong></p>\n<h4 id=\"Minimum-SOP-and-POS\"><a href=\"#Minimum-SOP-and-POS\" class=\"headerlink\" title=\"Minimum SOP and POS\"></a>Minimum SOP and POS</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> b,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out_sop,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> out_pos</span><br><span class=\"line\">); </span><br><span class=\"line\">\t<span class=\"keyword\">assign</span> out_sop = c &amp; d | !a &amp; !b &amp; c ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> out_pos = c &amp; (!a | b) &amp; (!b | d) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Karnaugh-map\"><a href=\"#Karnaugh-map\" class=\"headerlink\" title=\"Karnaugh map\"></a>Karnaugh map</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">1</span>] x, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> f );</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> f = !x[<span class=\"number\">1</span>] &amp; x[<span class=\"number\">3</span>] | x[<span class=\"number\">1</span>] &amp; x[<span class=\"number\">2</span>] &amp; !x[<span class=\"number\">3</span>] ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Karnaugh-map-1\"><a href=\"#Karnaugh-map-1\" class=\"headerlink\" title=\"Karnaugh map\"></a>Karnaugh map</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">1</span>] x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> f</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> f = (x[<span class=\"number\">3</span>] | !x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">2</span>] | x[<span class=\"number\">3</span>] | x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">1</span>] | x[<span class=\"number\">2</span>] | !x[<span class=\"number\">4</span>]) &amp; (!x[<span class=\"number\">1</span>] | !x[<span class=\"number\">2</span>] | x[<span class=\"number\">4</span>]) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"K-map-implemented-with-a-multiplexer\"><a href=\"#K-map-implemented-with-a-multiplexer\" class=\"headerlink\" title=\"K-map implemented with a multiplexer\"></a>K-map implemented with a multiplexer</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] mux_in</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span>( &#123; c , d &#125; )</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b00</span> : mux_in = <span class=\"number\">4&#x27;b0100</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b01</span> : mux_in = <span class=\"number\">4&#x27;b0001</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b11</span> : mux_in = <span class=\"number\">4&#x27;b1001</span> ;</span><br><span class=\"line\">            <span class=\"number\">2&#x27;b10</span> : mux_in = <span class=\"number\">4&#x27;b0101</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> : mux_in = <span class=\"number\">4&#x27;b0000</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">endcase</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sequential-Logic\"><a href=\"#Sequential-Logic\" class=\"headerlink\" title=\"Sequential Logic\"></a>Sequential Logic</h2><h3 id=\"Latches-and-Flip-Flops\"><a href=\"#Latches-and-Flip-Flops\" class=\"headerlink\" title=\"Latches and Flip-Flops\"></a>Latches and Flip-Flops</h3><h4 id=\"DFFs-and-gates\"><a href=\"#DFFs-and-gates\" class=\"headerlink\" title=\"*DFFs and gates\"></a>*DFFs and gates</h4><p>concise solution :</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> z</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        Q[<span class=\"number\">0</span>] &lt;= x ^ Q[<span class=\"number\">0</span>] ;</span><br><span class=\"line\">        Q[<span class=\"number\">1</span>] &lt;= x &amp; ~Q[<span class=\"number\">1</span>] ;</span><br><span class=\"line\">        Q[<span class=\"number\">2</span>] &lt;= x | ~Q[<span class=\"number\">2</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> z = ~ (|Q) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>my solution</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> x,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> z</span><br><span class=\"line\">); </span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    DFF_ U0( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x ^ Q[<span class=\"number\">0</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">0</span>]) ) ;</span><br><span class=\"line\">    DFF_ U1( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x &amp; ~Q[<span class=\"number\">1</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">1</span>]) ) ;</span><br><span class=\"line\">    DFF_ U2( <span class=\"variable\">.clk</span>(clk) , <span class=\"variable\">.d</span>(x | ~Q[<span class=\"number\">2</span>]) , <span class=\"variable\">.q</span>(Q[<span class=\"number\">2</span>]) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> z = ~ (| Q ) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> DFF_(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk , d ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q &lt;= d ; </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Detect-an-edge\"><a href=\"#Detect-an-edge\" class=\"headerlink\" title=\"*Detect an edge\"></a>*Detect an edge</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] pedge</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">       pedge &lt;= ~last_in &amp; in ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Detect-both-edges\"><a href=\"#Detect-both-edges\" class=\"headerlink\" title=\"*Detect both edges\"></a>*Detect both edges</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] anyedge</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">       anyedge &lt;= last_in ^ in ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Edge-capture-register\"><a href=\"#Edge-capture-register\" class=\"headerlink\" title=\"*Edge capture register\"></a>*Edge capture register</h4><p>&#x3D;&#x3D;Tips&#x3D;&#x3D; : After clk’s change from 1 to 0 , register q &#x3D; 1 . And then , q is still <code>1</code>  until <code>reset = 1</code> ; </p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] out</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">integer</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) out &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">32</span> ; i++)</span><br><span class=\"line\">                out[i] &lt;= last_in[i] &amp; ~in[i] ? <span class=\"number\">1</span> : out[i] ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;My error solution&#x3D;&#x3D;</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] out</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">integer</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] last_in ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       last_in &lt;= in ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) out &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"comment\">////////////////////////</span></span><br><span class=\"line\">            out &lt;= last_in &amp; ~in ;</span><br><span class=\"line\">            <span class=\"comment\">///////////////////////</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dual-edge-triggered-filp-flop\"><a href=\"#Dual-edge-triggered-filp-flop\" class=\"headerlink\" title=\"*Dual-edge triggered filp-flop\"></a>*Dual-edge triggered filp-flop</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> q0 , q1 ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q0 &lt;= d ; </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">       q1 &lt;= d ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> q = clk ? q0 : q1 ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h3><h4 id=\"Counter-1-12\"><a href=\"#Counter-1-12\" class=\"headerlink\" title=\"*Counter 1-12\"></a>*Counter 1-12</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] Q,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_load,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] c_d</span><br><span class=\"line\">); <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    count4 the_counter (clk, c_enable, c_load, c_d , Q);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_enable = enable ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_load = (Q == <span class=\"number\">12</span> &amp;&amp; enable) || reset ? <span class=\"number\">1</span> : <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_d = <span class=\"number\">4&#x27;b0001</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<p>**Count4.v **</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> count4(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk , </span><br><span class=\"line\">    <span class=\"keyword\">input</span> enable ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> load ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] d ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] Q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(load)    Q &lt;= d ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(enable) Q &lt;= Q + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counter-1000\"><a href=\"#Counter-1000\" class=\"headerlink\" title=\"Counter 1000\"></a>Counter 1000</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//make sure OneHertz turn into 1 once time every 1000 clk.即分频器，1000Hz转1Hz</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> OneHertz,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] c_enable</span><br><span class=\"line\">); <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">11</span>:<span class=\"number\">0</span>] Q ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;OneHertz , c_enable&#125; = &#123; (Q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span>) , (Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span>) ,(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) , <span class=\"number\">1&#x27;b1</span> &#125; ; </span><br><span class=\"line\">    bcdcount counter0 (clk, reset, c_enable[<span class=\"number\">0</span>] , Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]);</span><br><span class=\"line\">    bcdcount counter1 (clk, reset, c_enable[<span class=\"number\">1</span>] , Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>]);</span><br><span class=\"line\">    bcdcount counter2 (clk, reset, c_enable[<span class=\"number\">2</span>] , Q[<span class=\"number\">11</span>:<span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-digit-decimal-counter\"><a href=\"#4-digit-decimal-counter\" class=\"headerlink\" title=\"4-digit decimal counter\"></a>4-digit decimal counter</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,   <span class=\"comment\">// Synchronous active-high reset</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">1</span>] ena,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] q);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> ena = &#123;  (q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span>) , (q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span>) , (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) &#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) q &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">1</span>])\tq[<span class=\"number\">7</span>:<span class=\"number\">4</span>] &lt;= (q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">2</span>])\tq[<span class=\"number\">11</span>:<span class=\"number\">8</span>] &lt;= (q[<span class=\"number\">11</span>:<span class=\"number\">8</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">11</span>:<span class=\"number\">8</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ena[<span class=\"number\">3</span>])\tq[<span class=\"number\">15</span>:<span class=\"number\">12</span>] &lt;= (q[<span class=\"number\">15</span>:<span class=\"number\">12</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : (q[<span class=\"number\">15</span>:<span class=\"number\">12</span>] + <span class=\"number\">1</span> ) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//another solution , Init module</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,   <span class=\"comment\">// Synchronous active-high reset</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">1</span>] ena,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] q);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">wire</span> en0 ;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> &#123;ena , en0&#125; = &#123; q[<span class=\"number\">11</span>:<span class=\"number\">0</span>] == <span class=\"number\">12&#x27;h999</span> , q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h99</span> , q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>, <span class=\"number\">1&#x27;b1</span>&#125; ;</span><br><span class=\"line\">    counter10 U0(clk , reset , en0    , q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter10 U1(clk , reset , ena[<span class=\"number\">1</span>] , q[<span class=\"number\">7</span>:<span class=\"number\">4</span>]) ;</span><br><span class=\"line\">    counter10 U2(clk , reset , ena[<span class=\"number\">2</span>] , q[<span class=\"number\">11</span>:<span class=\"number\">8</span>]) ;</span><br><span class=\"line\">    counter10 U3(clk , reset , ena[<span class=\"number\">3</span>] , q[<span class=\"number\">15</span>:<span class=\"number\">12</span>]) ;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter10(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> ena ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] out </span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"comment\">//assign reset = (out == 9) ;</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)\tout &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ena) out &lt;= (out == <span class=\"number\">9</span>) ? <span class=\"number\">0</span> : out + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-hour-clock\"><a href=\"#12-hour-clock\" class=\"headerlink\" title=\"12-hour clock\"></a>12-hour clock</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> ena ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> pm ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] hh,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] mm,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] ss</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] carry ;</span><br><span class=\"line\">    counter60 ss0(clk , reset , ena , carry[<span class=\"number\">0</span>] , ss[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter60 mm0(clk , reset , carry[<span class=\"number\">0</span>] , carry[<span class=\"number\">1</span>] , mm[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    counter12 hh0(clk , reset , carry[<span class=\"number\">1</span>] &amp;&amp; carry[<span class=\"number\">0</span>] , pm       , hh[<span class=\"number\">7</span>:<span class=\"number\">0</span>]) ;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter60(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> en ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> carry ,<span class=\"comment\">//carry = 1 when Q = 8&#x27;h59 , which means carry out .</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] Q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> carry = (Q == <span class=\"number\">8&#x27;h59</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   Q &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= (Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>) ? <span class=\"number\">0</span> : Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4&#x27;h9</span>)  Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] &lt;= (Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h5</span>) ? <span class=\"number\">0</span> : Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> counter12(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset ,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> en ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> pm ,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] Q  </span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   Q &lt;= <span class=\"number\">8&#x27;b0001_0010</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span>(Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>]) </span><br><span class=\"line\">                <span class=\"number\">4&#x27;b1001</span> : Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] &lt;= <span class=\"number\">8&#x27;b0001_0000</span> ;</span><br><span class=\"line\">                <span class=\"number\">4&#x27;b0010</span> : <span class=\"keyword\">begin</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(Q[<span class=\"number\">7</span>:<span class=\"number\">4</span>] == <span class=\"number\">4&#x27;h1</span>)  Q &lt;= <span class=\"number\">8&#x27;h01</span> ;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>    Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span> : Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= Q[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">endcase</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk)   <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset)   pm &lt;= <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(en &amp;&amp; Q[<span class=\"number\">7</span>:<span class=\"number\">0</span>] == <span class=\"number\">8&#x27;h11</span>)  pm &lt;= ~pm ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pm &lt;= pm ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Some-worthwhile-retry-practice\"><a href=\"#Some-worthwhile-retry-practice\" class=\"headerlink\" title=\"Some worthwhile retry practice ;\"></a>Some worthwhile retry practice ;</h2><ul>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgedetect\">Detect an edge</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgedetect2\">Detect both edges</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/edgecapture\">Edge capture register</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/dualedge\">Dual-edge triggered flip-flop</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Countslow\">Slow decade counter</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a\">Counter 1-12</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7b\">Counter 1000</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Countbcd\">4-digit decimal counter</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Count_clock\">12-hour clock</a></li>\n<li><a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2013_q12\">3-input LUT</a></li>\n</ul>"},{"title":"centos学习笔记","abbrlink":"d2783502","date":"2021-03-06T00:37:02.000Z","_content":"\n......\n\n<!-- more -->\n\n### 强制修改密码\n\n如果将密码修改得很简单，`centos`会拒绝修改，可以如下强制修改：\n\n```bash\n$ sudo su\n# echo <password> | passwd --stdin <username> \n```\n\n[Link](https://blog.csdn.net/chy555chy/article/details/112258353#:~:text=1%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%9A%20useradd,%3C%E7%94%A8%E6%88%B7%E5%90%8D%3E%202%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%EF%BC%88%E5%AD%98%E5%9C%A8%E5%AE%89%E5%85%A8%E6%80%A7%E6%A0%A1%E9%AA%8C%EF%BC%89%EF%BC%9A%20passwd)\n\n### 重定向cd\n\n在 CentOS 系统中，如果您希望在每次使用 `cd` 命令进入目录后不自动列出所有文件，可以通过修改 Bash 配置文件来实现。\n\n您可以通过编辑用户的 `.bashrc` 或全局的 `/etc/profile` 文件来达到目的。请按照以下步骤操作：\n\n1. 打开终端。\n\n2. 输入 `vi ~/.bashrc` 来编辑当前用户的 `.bashrc` 文件；或者使用 `vi /etc/profile` 来编辑全局的配置文件，这需要管理员权限（sudo）。\n\n3. 在文件末尾添加以下行：\n\n   ```shell\n   alias cd='cd >/dev/null 2>&1'\n   ```\n\n4. 保存并退出编辑器。如果是编辑的 `/etc/profile`，为了使更改立即生效，需要运行 `source /etc/profile` 或重新登录。**有时`etc/profile`未生效，cd进入目录仍会`ls` , 这时重新`source /etc/profile`即可。**\n\n这样设置后，每次使用 `cd` 命令切换目录时，不会自动执行 `ls` 命令，从而不会显示目录下的文件列表。\n\n请注意，上述方法会将 `cd` 命令的输出重定向到 `/dev/null`，这意味着即使 `cd` 命令有输出（通常不会有），也不会在终端上显示。如果您希望恢复默认的行为，只需删除或者注释掉 `.bashrc` 或 `/etc/profile` 文件中添加的那行别名配置即可。\n\n### CentOS 7安装最新版git\n\n安装[ius-release](https://ius.io/setup) \n\n```shell\n$ yum install \\\nhttps://repo.ius.io/ius-release-el7.rpm \\\nhttps://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n```\n\n查看git版本：\n\n```shell\n$yum provides git\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirror.nyist.edu.cn\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\ngit-1.8.3.1-23.el7_8.x86_64 : Fast Version Control System\nRepo        : base\n\n\n\ngit-1.8.3.1-24.el7_9.x86_64 : Fast Version Control System\nRepo        : updates\n\n\n\ngit-1.8.3.1-25.el7_9.x86_64 : Fast Version Control System\nRepo        : updates\n\n\n\ngit236-2.36.5-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : ius\nMatched from:\nProvides    : git = 2.36.5-1.el7.ius\n\n\n\ngit236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : ius\nMatched from:\nProvides    : git = 2.36.6-1.el7.ius\n\n\n\ngit236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : @ius\nMatched from:\nProvides    : git = 2.36.6-1.el7.ius\n\n```\n\n安装git2.36:\n\n```shell\n$ yum remove git -y #卸载老版本\n$ yum install git236 -y\n```\n\n查看新版本\n\n```shell\n$ git --version\ngit version 2.36.6\n```\n\n### CentOS 7 多版本gcc\n\n担心`VCS`,`verdi`不兼容高版本`gcc` (现在vcs,verdi使用gcc-4.8编译) ， 想在centos上安装多个版本gcc，查询资料，决定用`Software Collections (SCL)`来管理多版本gcc。(SCL类似于anaconda)\n\n1. 安装centos-release-scl\n\n   ```shell\n   $ sudo yum install centos-release-scl \n   ```\n\n2. 安装特定版本的`devtoolset`\n\n   ```shell\n   sudo yum install devtoolset-10-gcc*\n   ```\n\n   这里安装的是gcc-10.x版本，如果要安装其他版本的GCC，只需将`devtoolset-10`替换为相应的版本号，如`devtoolset-7`。\n\n3. 激活特定的devtoolset版本\n\n   ```shell\n   $ gcc -v 2>&1 | tail -n 1 #激活前版本\n   gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) \n   $ scl enable devtoolset-10 bash #激活\n   $ gcc -v 2>&1 | tail -n 1\n   gcc version 10.2.1 20210130 (Red Hat 10.2.1-11) (GCC) \n   $ exit #退出当前版本\n   $ gcc -v 2>&1 | tail -n 1 \n   gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) \n   \n   ```\n\n   注意，scl激活只对当前终端有效，其他终端仍是默认版本。这种方法不需要手动下载源码编译，而是通过SCL来提供和管理系统范围内的不同版本的工具链。\n\n\n\n### pip安装太慢\n\npip安装太慢，使用其他镜像安装：\n\n```shell\n$ pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy\n\n```\n\n### CentOS7 美化\n\n参考[文章](https://zhuanlan.zhihu.com/p/68845973)\n\n### 初试Tmux\n\n参考链接[Tmux新手教学](https://www.bilibili.com/video/BV1Mj411N7xS/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)       [bryant-video/tmux-tutorial](https://github.com/bryant-video/tmux-tutorial)\n\n配置文件`~/.tmux.conf`:\n\n```shell\nunbind %\nbind | split-window -h -c \"#{pane_current_path}\"\n\nunbind '\"'\nbind - split-window -v -c \"#{pane_current_path}\"\n\nunbind r\nbind r source-file ~/.tmux.conf\n\nbind -r j resize-pane -D 5\nbind -r k resize-pane -U 5\nbind -r l resize-pane -R 5\nbind -r h resize-pane -L 5\nbind -r m resize-pane -Z\n\n\nset -g mouse on\nset -g mode-keys vi\nset -sg escape-time 10 # make delay shorter\n\n### Copy Mode\nbind-key -T copy-mode-vi 'v' send -X begin-selection # start selecting text with \"v\"\nbind-key -T copy-mode-vi 'y' send -X copy-selection # copy text with \"y\"\n\n\n### Plugins \nset -g @plugin 'tmux-plugins/tpm'\n\nset -g @plugin 'christoomey/vim-tmux-navigator'\nset -g @plugin 'jimeh/tmux-themepack'\nset -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart\nset -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes\n\nset -g @resurrect-capture-pane-contents 'on'\nset -g @continuum-restore 'on'\nrun '~/.tmux/plugins/tpm/tpm' # Initialize TPM\n\n```\n\n|                 命令                  |               功能               |\n| :-----------------------------------: | :------------------------------: |\n|     `tmux new -s <session name>`      |    create a new tmux session     |\n|      tmux a -t `[Session Name]`       |  attach to an existing session   |\n| tmux kill-session -t `[Session Name]` |    Delete a specific Session     |\n|              tmux detach              |      detach current session      |\n|            `prefix` + `|`             |   Split windows left and right   |\n|            `prefix` + `-`             |    Split windows up and down     |\n|           `prefix` + `↑↓←→`           |           switch panne           |\n|           `prefix` + `jkhl`           |           Resize pane            |\n|            `prefix` + `m`             | Maximize/Unmaximize current pane |\n|            `prefix` + `c`             |          create window           |\n|            `prefix` + `,`             |   Rename current active window   |\n|            `prefix` + `&`             |       Kill current window        |\n|         `prefix` + `n` or `p`         |       Next/Previous window       |\n|            `prefix` + `w`             |  List all Sessions and windows   |\n|            `prefix` + `,`             |   Rename current active window   |\n|             `prefix`+`x`              |       delete current pane        |\n|                                       |                                  |\n|                                       |                                  |\n|                                       |                                  |\n|                                       |                                  |\n\n\n\n在`tmux`中，选择文本时需要按住`shift` , 用`ctrl+shift+c`复制，`ctrl+shift+v`粘贴\n\n```\n# Character\nYou are a scientist who is proficient in computer science, physics, and is able to explain all relevant problems in detail, with pictures and texts\n\n## Skills\n### Skill 1: Proficient in Computer Science\n- Proficient in all programming languages such as C/C++, Rust,Python,Systemverilog,Java, etc\n- You can search for information from Github and stackoverflow to answer programming related questions\n\n### Skill 2: Proficient in physics\n- Proficient in solid state physics, semiconductor physics, semiconductor device physics, and quantum mechanics\n- Able to combine formulas and graphs to explain physics problems\n\n.\n\n## Constraints:\n- Output your answers in markdown format\n\n```\n\n\n\n#linux","source":"_posts/centos学习笔记.md","raw":"---\ntitle: centos学习笔记\ntags: linux\nabbrlink: d2783502\ndate: 2021-03-06 08:37:02\n---\n\n......\n\n<!-- more -->\n\n### 强制修改密码\n\n如果将密码修改得很简单，`centos`会拒绝修改，可以如下强制修改：\n\n```bash\n$ sudo su\n# echo <password> | passwd --stdin <username> \n```\n\n[Link](https://blog.csdn.net/chy555chy/article/details/112258353#:~:text=1%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%9A%20useradd,%3C%E7%94%A8%E6%88%B7%E5%90%8D%3E%202%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%EF%BC%88%E5%AD%98%E5%9C%A8%E5%AE%89%E5%85%A8%E6%80%A7%E6%A0%A1%E9%AA%8C%EF%BC%89%EF%BC%9A%20passwd)\n\n### 重定向cd\n\n在 CentOS 系统中，如果您希望在每次使用 `cd` 命令进入目录后不自动列出所有文件，可以通过修改 Bash 配置文件来实现。\n\n您可以通过编辑用户的 `.bashrc` 或全局的 `/etc/profile` 文件来达到目的。请按照以下步骤操作：\n\n1. 打开终端。\n\n2. 输入 `vi ~/.bashrc` 来编辑当前用户的 `.bashrc` 文件；或者使用 `vi /etc/profile` 来编辑全局的配置文件，这需要管理员权限（sudo）。\n\n3. 在文件末尾添加以下行：\n\n   ```shell\n   alias cd='cd >/dev/null 2>&1'\n   ```\n\n4. 保存并退出编辑器。如果是编辑的 `/etc/profile`，为了使更改立即生效，需要运行 `source /etc/profile` 或重新登录。**有时`etc/profile`未生效，cd进入目录仍会`ls` , 这时重新`source /etc/profile`即可。**\n\n这样设置后，每次使用 `cd` 命令切换目录时，不会自动执行 `ls` 命令，从而不会显示目录下的文件列表。\n\n请注意，上述方法会将 `cd` 命令的输出重定向到 `/dev/null`，这意味着即使 `cd` 命令有输出（通常不会有），也不会在终端上显示。如果您希望恢复默认的行为，只需删除或者注释掉 `.bashrc` 或 `/etc/profile` 文件中添加的那行别名配置即可。\n\n### CentOS 7安装最新版git\n\n安装[ius-release](https://ius.io/setup) \n\n```shell\n$ yum install \\\nhttps://repo.ius.io/ius-release-el7.rpm \\\nhttps://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n```\n\n查看git版本：\n\n```shell\n$yum provides git\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirror.nyist.edu.cn\n * extras: mirrors.aliyun.com\n * updates: mirrors.aliyun.com\ngit-1.8.3.1-23.el7_8.x86_64 : Fast Version Control System\nRepo        : base\n\n\n\ngit-1.8.3.1-24.el7_9.x86_64 : Fast Version Control System\nRepo        : updates\n\n\n\ngit-1.8.3.1-25.el7_9.x86_64 : Fast Version Control System\nRepo        : updates\n\n\n\ngit236-2.36.5-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : ius\nMatched from:\nProvides    : git = 2.36.5-1.el7.ius\n\n\n\ngit236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : ius\nMatched from:\nProvides    : git = 2.36.6-1.el7.ius\n\n\n\ngit236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System\nRepo        : @ius\nMatched from:\nProvides    : git = 2.36.6-1.el7.ius\n\n```\n\n安装git2.36:\n\n```shell\n$ yum remove git -y #卸载老版本\n$ yum install git236 -y\n```\n\n查看新版本\n\n```shell\n$ git --version\ngit version 2.36.6\n```\n\n### CentOS 7 多版本gcc\n\n担心`VCS`,`verdi`不兼容高版本`gcc` (现在vcs,verdi使用gcc-4.8编译) ， 想在centos上安装多个版本gcc，查询资料，决定用`Software Collections (SCL)`来管理多版本gcc。(SCL类似于anaconda)\n\n1. 安装centos-release-scl\n\n   ```shell\n   $ sudo yum install centos-release-scl \n   ```\n\n2. 安装特定版本的`devtoolset`\n\n   ```shell\n   sudo yum install devtoolset-10-gcc*\n   ```\n\n   这里安装的是gcc-10.x版本，如果要安装其他版本的GCC，只需将`devtoolset-10`替换为相应的版本号，如`devtoolset-7`。\n\n3. 激活特定的devtoolset版本\n\n   ```shell\n   $ gcc -v 2>&1 | tail -n 1 #激活前版本\n   gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) \n   $ scl enable devtoolset-10 bash #激活\n   $ gcc -v 2>&1 | tail -n 1\n   gcc version 10.2.1 20210130 (Red Hat 10.2.1-11) (GCC) \n   $ exit #退出当前版本\n   $ gcc -v 2>&1 | tail -n 1 \n   gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) \n   \n   ```\n\n   注意，scl激活只对当前终端有效，其他终端仍是默认版本。这种方法不需要手动下载源码编译，而是通过SCL来提供和管理系统范围内的不同版本的工具链。\n\n\n\n### pip安装太慢\n\npip安装太慢，使用其他镜像安装：\n\n```shell\n$ pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy\n\n```\n\n### CentOS7 美化\n\n参考[文章](https://zhuanlan.zhihu.com/p/68845973)\n\n### 初试Tmux\n\n参考链接[Tmux新手教学](https://www.bilibili.com/video/BV1Mj411N7xS/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745)       [bryant-video/tmux-tutorial](https://github.com/bryant-video/tmux-tutorial)\n\n配置文件`~/.tmux.conf`:\n\n```shell\nunbind %\nbind | split-window -h -c \"#{pane_current_path}\"\n\nunbind '\"'\nbind - split-window -v -c \"#{pane_current_path}\"\n\nunbind r\nbind r source-file ~/.tmux.conf\n\nbind -r j resize-pane -D 5\nbind -r k resize-pane -U 5\nbind -r l resize-pane -R 5\nbind -r h resize-pane -L 5\nbind -r m resize-pane -Z\n\n\nset -g mouse on\nset -g mode-keys vi\nset -sg escape-time 10 # make delay shorter\n\n### Copy Mode\nbind-key -T copy-mode-vi 'v' send -X begin-selection # start selecting text with \"v\"\nbind-key -T copy-mode-vi 'y' send -X copy-selection # copy text with \"y\"\n\n\n### Plugins \nset -g @plugin 'tmux-plugins/tpm'\n\nset -g @plugin 'christoomey/vim-tmux-navigator'\nset -g @plugin 'jimeh/tmux-themepack'\nset -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart\nset -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes\n\nset -g @resurrect-capture-pane-contents 'on'\nset -g @continuum-restore 'on'\nrun '~/.tmux/plugins/tpm/tpm' # Initialize TPM\n\n```\n\n|                 命令                  |               功能               |\n| :-----------------------------------: | :------------------------------: |\n|     `tmux new -s <session name>`      |    create a new tmux session     |\n|      tmux a -t `[Session Name]`       |  attach to an existing session   |\n| tmux kill-session -t `[Session Name]` |    Delete a specific Session     |\n|              tmux detach              |      detach current session      |\n|            `prefix` + `|`             |   Split windows left and right   |\n|            `prefix` + `-`             |    Split windows up and down     |\n|           `prefix` + `↑↓←→`           |           switch panne           |\n|           `prefix` + `jkhl`           |           Resize pane            |\n|            `prefix` + `m`             | Maximize/Unmaximize current pane |\n|            `prefix` + `c`             |          create window           |\n|            `prefix` + `,`             |   Rename current active window   |\n|            `prefix` + `&`             |       Kill current window        |\n|         `prefix` + `n` or `p`         |       Next/Previous window       |\n|            `prefix` + `w`             |  List all Sessions and windows   |\n|            `prefix` + `,`             |   Rename current active window   |\n|             `prefix`+`x`              |       delete current pane        |\n|                                       |                                  |\n|                                       |                                  |\n|                                       |                                  |\n|                                       |                                  |\n\n\n\n在`tmux`中，选择文本时需要按住`shift` , 用`ctrl+shift+c`复制，`ctrl+shift+v`粘贴\n\n```\n# Character\nYou are a scientist who is proficient in computer science, physics, and is able to explain all relevant problems in detail, with pictures and texts\n\n## Skills\n### Skill 1: Proficient in Computer Science\n- Proficient in all programming languages such as C/C++, Rust,Python,Systemverilog,Java, etc\n- You can search for information from Github and stackoverflow to answer programming related questions\n\n### Skill 2: Proficient in physics\n- Proficient in solid state physics, semiconductor physics, semiconductor device physics, and quantum mechanics\n- Able to combine formulas and graphs to explain physics problems\n\n.\n\n## Constraints:\n- Output your answers in markdown format\n\n```\n\n\n\n#linux","slug":"centos学习笔记","published":1,"updated":"2024-03-15T12:37:55.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4df000m58tecevr9qil","content":"<p>……</p>\n<span id=\"more\"></span>\n\n<h3 id=\"强制修改密码\"><a href=\"#强制修改密码\" class=\"headerlink\" title=\"强制修改密码\"></a>强制修改密码</h3><p>如果将密码修改得很简单，<code>centos</code>会拒绝修改，可以如下强制修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su</span><br><span class=\"line\"><span class=\"comment\"># echo &lt;password&gt; | passwd --stdin &lt;username&gt; </span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/chy555chy/article/details/112258353#:~:text=1%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%9A%20useradd,%3C%E7%94%A8%E6%88%B7%E5%90%8D%3E%202%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%EF%BC%88%E5%AD%98%E5%9C%A8%E5%AE%89%E5%85%A8%E6%80%A7%E6%A0%A1%E9%AA%8C%EF%BC%89%EF%BC%9A%20passwd\">Link</a></p>\n<h3 id=\"重定向cd\"><a href=\"#重定向cd\" class=\"headerlink\" title=\"重定向cd\"></a>重定向cd</h3><p>在 CentOS 系统中，如果您希望在每次使用 <code>cd</code> 命令进入目录后不自动列出所有文件，可以通过修改 Bash 配置文件来实现。</p>\n<p>您可以通过编辑用户的 <code>.bashrc</code> 或全局的 <code>/etc/profile</code> 文件来达到目的。请按照以下步骤操作：</p>\n<ol>\n<li><p>打开终端。</p>\n</li>\n<li><p>输入 <code>vi ~/.bashrc</code> 来编辑当前用户的 <code>.bashrc</code> 文件；或者使用 <code>vi /etc/profile</code> 来编辑全局的配置文件，这需要管理员权限（sudo）。</p>\n</li>\n<li><p>在文件末尾添加以下行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias cd=&#x27;cd &gt;/dev/null 2&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出编辑器。如果是编辑的 <code>/etc/profile</code>，为了使更改立即生效，需要运行 <code>source /etc/profile</code> 或重新登录。<strong>有时<code>etc/profile</code>未生效，cd进入目录仍会<code>ls</code> , 这时重新<code>source /etc/profile</code>即可。</strong></p>\n</li>\n</ol>\n<p>这样设置后，每次使用 <code>cd</code> 命令切换目录时，不会自动执行 <code>ls</code> 命令，从而不会显示目录下的文件列表。</p>\n<p>请注意，上述方法会将 <code>cd</code> 命令的输出重定向到 <code>/dev/null</code>，这意味着即使 <code>cd</code> 命令有输出（通常不会有），也不会在终端上显示。如果您希望恢复默认的行为，只需删除或者注释掉 <code>.bashrc</code> 或 <code>/etc/profile</code> 文件中添加的那行别名配置即可。</p>\n<h3 id=\"CentOS-7安装最新版git\"><a href=\"#CentOS-7安装最新版git\" class=\"headerlink\" title=\"CentOS 7安装最新版git\"></a>CentOS 7安装最新版git</h3><p>安装<a href=\"https://ius.io/setup\">ius-release</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum install \\</span></span><br><span class=\"line\"><span class=\"language-bash\">https://repo.ius.io/ius-release-el7.rpm \\</span></span><br><span class=\"line\"><span class=\"language-bash\">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n\n<p>查看git版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">yum provides git</span></span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirror.nyist.edu.cn</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">git-1.8.3.1-23.el7_8.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git-1.8.3.1-24.el7_9.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : updates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git-1.8.3.1-25.el7_9.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : updates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.5-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.5-1.el7.ius</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.6-1.el7.ius</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : @ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.6-1.el7.ius</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装git2.36:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum remove git -y <span class=\"comment\">#卸载老版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum install git236 -y</span></span><br></pre></td></tr></table></figure>\n\n<p>查看新版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git --version</span></span><br><span class=\"line\">git version 2.36.6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS-7-多版本gcc\"><a href=\"#CentOS-7-多版本gcc\" class=\"headerlink\" title=\"CentOS 7 多版本gcc\"></a>CentOS 7 多版本gcc</h3><p>担心<code>VCS</code>,<code>verdi</code>不兼容高版本<code>gcc</code> (现在vcs,verdi使用gcc-4.8编译) ， 想在centos上安装多个版本gcc，查询资料，决定用<code>Software Collections (SCL)</code>来管理多版本gcc。(SCL类似于anaconda)</p>\n<ol>\n<li><p>安装centos-release-scl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum install centos-release-scl</span> </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装特定版本的<code>devtoolset</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-10-gcc*</span><br></pre></td></tr></table></figure>\n\n<p>这里安装的是gcc-10.x版本，如果要安装其他版本的GCC，只需将<code>devtoolset-10</code>替换为相应的版本号，如<code>devtoolset-7</code>。</p>\n</li>\n<li><p>激活特定的devtoolset版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1 <span class=\"comment\">#激活前版本</span></span></span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">scl <span class=\"built_in\">enable</span> devtoolset-10 bash <span class=\"comment\">#激活</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1</span></span><br><span class=\"line\">gcc version 10.2.1 20210130 (Red Hat 10.2.1-11) (GCC) </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">exit</span> <span class=\"comment\">#退出当前版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1</span> </span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意，scl激活只对当前终端有效，其他终端仍是默认版本。这种方法不需要手动下载源码编译，而是通过SCL来提供和管理系统范围内的不同版本的工具链。</p>\n</li>\n</ol>\n<h3 id=\"pip安装太慢\"><a href=\"#pip安装太慢\" class=\"headerlink\" title=\"pip安装太慢\"></a>pip安装太慢</h3><p>pip安装太慢，使用其他镜像安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7-美化\"><a href=\"#CentOS7-美化\" class=\"headerlink\" title=\"CentOS7 美化\"></a>CentOS7 美化</h3><p>参考<a href=\"https://zhuanlan.zhihu.com/p/68845973\">文章</a></p>\n<h3 id=\"初试Tmux\"><a href=\"#初试Tmux\" class=\"headerlink\" title=\"初试Tmux\"></a>初试Tmux</h3><p>参考链接<a href=\"https://www.bilibili.com/video/BV1Mj411N7xS/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">Tmux新手教学</a>       <a href=\"https://github.com/bryant-video/tmux-tutorial\">bryant-video&#x2F;tmux-tutorial</a></p>\n<p>配置文件<code>~/.tmux.conf</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unbind %</span><br><span class=\"line\">bind | split-window -h -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">unbind &#x27;&quot;&#x27;</span><br><span class=\"line\">bind - split-window -v -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">unbind r</span><br><span class=\"line\">bind r source-file ~/.tmux.conf</span><br><span class=\"line\"></span><br><span class=\"line\">bind -r j resize-pane -D 5</span><br><span class=\"line\">bind -r k resize-pane -U 5</span><br><span class=\"line\">bind -r l resize-pane -R 5</span><br><span class=\"line\">bind -r h resize-pane -L 5</span><br><span class=\"line\">bind -r m resize-pane -Z</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set -g mouse on</span><br><span class=\"line\">set -g mode-keys vi</span><br><span class=\"line\">set -sg escape-time 10 # make delay shorter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## Copy Mode</span></span></span><br><span class=\"line\">bind-key -T copy-mode-vi &#x27;v&#x27; send -X begin-selection # start selecting text with &quot;v&quot;</span><br><span class=\"line\">bind-key -T copy-mode-vi &#x27;y&#x27; send -X copy-selection # copy text with &quot;y&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## Plugins</span></span> </span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;jimeh/tmux-themepack&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27; # persist tmux sessions after computer restart</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-continuum&#x27; # automatically saves sessions for you every 15 minutes</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @resurrect-capture-pane-contents &#x27;on&#x27;</span><br><span class=\"line\">set -g @continuum-restore &#x27;on&#x27;</span><br><span class=\"line\">run &#x27;~/.tmux/plugins/tpm/tpm&#x27; # Initialize TPM</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>tmux new -s &lt;session name&gt;</code></td>\n<td align=\"center\">create a new tmux session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux a -t <code>[Session Name]</code></td>\n<td align=\"center\">attach to an existing session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux kill-session -t <code>[Session Name]</code></td>\n<td align=\"center\">Delete a specific Session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux detach</td>\n<td align=\"center\">detach current session</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + &#96;</td>\n<td align=\"center\">&#96;</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>-</code></td>\n<td align=\"center\">Split windows up and down</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>↑↓←→</code></td>\n<td align=\"center\">switch panne</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>jkhl</code></td>\n<td align=\"center\">Resize pane</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>m</code></td>\n<td align=\"center\">Maximize&#x2F;Unmaximize current pane</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>c</code></td>\n<td align=\"center\">create window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>,</code></td>\n<td align=\"center\">Rename current active window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>&amp;</code></td>\n<td align=\"center\">Kill current window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>n</code> or <code>p</code></td>\n<td align=\"center\">Next&#x2F;Previous window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>w</code></td>\n<td align=\"center\">List all Sessions and windows</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>,</code></td>\n<td align=\"center\">Rename current active window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code>+<code>x</code></td>\n<td align=\"center\">delete current pane</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>在<code>tmux</code>中，选择文本时需要按住<code>shift</code> , 用<code>ctrl+shift+c</code>复制，<code>ctrl+shift+v</code>粘贴</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Character</span><br><span class=\"line\">You are a scientist who is proficient in computer science, physics, and is able to explain all relevant problems in detail, with pictures and texts</span><br><span class=\"line\"></span><br><span class=\"line\">## Skills</span><br><span class=\"line\">### Skill 1: Proficient in Computer Science</span><br><span class=\"line\">- Proficient in all programming languages such as C/C++, Rust,Python,Systemverilog,Java, etc</span><br><span class=\"line\">- You can search for information from Github and stackoverflow to answer programming related questions</span><br><span class=\"line\"></span><br><span class=\"line\">### Skill 2: Proficient in physics</span><br><span class=\"line\">- Proficient in solid state physics, semiconductor physics, semiconductor device physics, and quantum mechanics</span><br><span class=\"line\">- Able to combine formulas and graphs to explain physics problems</span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">## Constraints:</span><br><span class=\"line\">- Output your answers in markdown format</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>#linux</p>\n","site":{"data":{}},"length":4754,"excerpt":"<p>……</p>","more":"<h3 id=\"强制修改密码\"><a href=\"#强制修改密码\" class=\"headerlink\" title=\"强制修改密码\"></a>强制修改密码</h3><p>如果将密码修改得很简单，<code>centos</code>会拒绝修改，可以如下强制修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su</span><br><span class=\"line\"><span class=\"comment\"># echo &lt;password&gt; | passwd --stdin &lt;username&gt; </span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/chy555chy/article/details/112258353#:~:text=1%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%9A%20useradd,%3C%E7%94%A8%E6%88%B7%E5%90%8D%3E%202%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%EF%BC%88%E5%AD%98%E5%9C%A8%E5%AE%89%E5%85%A8%E6%80%A7%E6%A0%A1%E9%AA%8C%EF%BC%89%EF%BC%9A%20passwd\">Link</a></p>\n<h3 id=\"重定向cd\"><a href=\"#重定向cd\" class=\"headerlink\" title=\"重定向cd\"></a>重定向cd</h3><p>在 CentOS 系统中，如果您希望在每次使用 <code>cd</code> 命令进入目录后不自动列出所有文件，可以通过修改 Bash 配置文件来实现。</p>\n<p>您可以通过编辑用户的 <code>.bashrc</code> 或全局的 <code>/etc/profile</code> 文件来达到目的。请按照以下步骤操作：</p>\n<ol>\n<li><p>打开终端。</p>\n</li>\n<li><p>输入 <code>vi ~/.bashrc</code> 来编辑当前用户的 <code>.bashrc</code> 文件；或者使用 <code>vi /etc/profile</code> 来编辑全局的配置文件，这需要管理员权限（sudo）。</p>\n</li>\n<li><p>在文件末尾添加以下行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias cd=&#x27;cd &gt;/dev/null 2&gt;&amp;1&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存并退出编辑器。如果是编辑的 <code>/etc/profile</code>，为了使更改立即生效，需要运行 <code>source /etc/profile</code> 或重新登录。<strong>有时<code>etc/profile</code>未生效，cd进入目录仍会<code>ls</code> , 这时重新<code>source /etc/profile</code>即可。</strong></p>\n</li>\n</ol>\n<p>这样设置后，每次使用 <code>cd</code> 命令切换目录时，不会自动执行 <code>ls</code> 命令，从而不会显示目录下的文件列表。</p>\n<p>请注意，上述方法会将 <code>cd</code> 命令的输出重定向到 <code>/dev/null</code>，这意味着即使 <code>cd</code> 命令有输出（通常不会有），也不会在终端上显示。如果您希望恢复默认的行为，只需删除或者注释掉 <code>.bashrc</code> 或 <code>/etc/profile</code> 文件中添加的那行别名配置即可。</p>\n<h3 id=\"CentOS-7安装最新版git\"><a href=\"#CentOS-7安装最新版git\" class=\"headerlink\" title=\"CentOS 7安装最新版git\"></a>CentOS 7安装最新版git</h3><p>安装<a href=\"https://ius.io/setup\">ius-release</a> </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum install \\</span></span><br><span class=\"line\"><span class=\"language-bash\">https://repo.ius.io/ius-release-el7.rpm \\</span></span><br><span class=\"line\"><span class=\"language-bash\">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span></span><br></pre></td></tr></table></figure>\n\n<p>查看git版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">yum provides git</span></span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirror.nyist.edu.cn</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">git-1.8.3.1-23.el7_8.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git-1.8.3.1-24.el7_9.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : updates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git-1.8.3.1-25.el7_9.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : updates</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.5-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.5-1.el7.ius</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.6-1.el7.ius</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git236-2.36.6-1.el7.ius.x86_64 : Fast Version Control System</span><br><span class=\"line\">Repo        : @ius</span><br><span class=\"line\">Matched from:</span><br><span class=\"line\">Provides    : git = 2.36.6-1.el7.ius</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装git2.36:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum remove git -y <span class=\"comment\">#卸载老版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum install git236 -y</span></span><br></pre></td></tr></table></figure>\n\n<p>查看新版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git --version</span></span><br><span class=\"line\">git version 2.36.6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS-7-多版本gcc\"><a href=\"#CentOS-7-多版本gcc\" class=\"headerlink\" title=\"CentOS 7 多版本gcc\"></a>CentOS 7 多版本gcc</h3><p>担心<code>VCS</code>,<code>verdi</code>不兼容高版本<code>gcc</code> (现在vcs,verdi使用gcc-4.8编译) ， 想在centos上安装多个版本gcc，查询资料，决定用<code>Software Collections (SCL)</code>来管理多版本gcc。(SCL类似于anaconda)</p>\n<ol>\n<li><p>安装centos-release-scl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum install centos-release-scl</span> </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装特定版本的<code>devtoolset</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install devtoolset-10-gcc*</span><br></pre></td></tr></table></figure>\n\n<p>这里安装的是gcc-10.x版本，如果要安装其他版本的GCC，只需将<code>devtoolset-10</code>替换为相应的版本号，如<code>devtoolset-7</code>。</p>\n</li>\n<li><p>激活特定的devtoolset版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1 <span class=\"comment\">#激活前版本</span></span></span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">scl <span class=\"built_in\">enable</span> devtoolset-10 bash <span class=\"comment\">#激活</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1</span></span><br><span class=\"line\">gcc version 10.2.1 20210130 (Red Hat 10.2.1-11) (GCC) </span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">exit</span> <span class=\"comment\">#退出当前版本</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gcc -v 2&gt;&amp;1 | <span class=\"built_in\">tail</span> -n 1</span> </span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意，scl激活只对当前终端有效，其他终端仍是默认版本。这种方法不需要手动下载源码编译，而是通过SCL来提供和管理系统范围内的不同版本的工具链。</p>\n</li>\n</ol>\n<h3 id=\"pip安装太慢\"><a href=\"#pip安装太慢\" class=\"headerlink\" title=\"pip安装太慢\"></a>pip安装太慢</h3><p>pip安装太慢，使用其他镜像安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7-美化\"><a href=\"#CentOS7-美化\" class=\"headerlink\" title=\"CentOS7 美化\"></a>CentOS7 美化</h3><p>参考<a href=\"https://zhuanlan.zhihu.com/p/68845973\">文章</a></p>\n<h3 id=\"初试Tmux\"><a href=\"#初试Tmux\" class=\"headerlink\" title=\"初试Tmux\"></a>初试Tmux</h3><p>参考链接<a href=\"https://www.bilibili.com/video/BV1Mj411N7xS/?spm_id_from=333.337.search-card.all.click&vd_source=da5120fea3f8bb8d2fe1984a02a9a745\">Tmux新手教学</a>       <a href=\"https://github.com/bryant-video/tmux-tutorial\">bryant-video&#x2F;tmux-tutorial</a></p>\n<p>配置文件<code>~/.tmux.conf</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unbind %</span><br><span class=\"line\">bind | split-window -h -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">unbind &#x27;&quot;&#x27;</span><br><span class=\"line\">bind - split-window -v -c &quot;#&#123;pane_current_path&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">unbind r</span><br><span class=\"line\">bind r source-file ~/.tmux.conf</span><br><span class=\"line\"></span><br><span class=\"line\">bind -r j resize-pane -D 5</span><br><span class=\"line\">bind -r k resize-pane -U 5</span><br><span class=\"line\">bind -r l resize-pane -R 5</span><br><span class=\"line\">bind -r h resize-pane -L 5</span><br><span class=\"line\">bind -r m resize-pane -Z</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set -g mouse on</span><br><span class=\"line\">set -g mode-keys vi</span><br><span class=\"line\">set -sg escape-time 10 # make delay shorter</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## Copy Mode</span></span></span><br><span class=\"line\">bind-key -T copy-mode-vi &#x27;v&#x27; send -X begin-selection # start selecting text with &quot;v&quot;</span><br><span class=\"line\">bind-key -T copy-mode-vi &#x27;y&#x27; send -X copy-selection # copy text with &quot;y&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## Plugins</span></span> </span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;jimeh/tmux-themepack&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27; # persist tmux sessions after computer restart</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-continuum&#x27; # automatically saves sessions for you every 15 minutes</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @resurrect-capture-pane-contents &#x27;on&#x27;</span><br><span class=\"line\">set -g @continuum-restore &#x27;on&#x27;</span><br><span class=\"line\">run &#x27;~/.tmux/plugins/tpm/tpm&#x27; # Initialize TPM</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>tmux new -s &lt;session name&gt;</code></td>\n<td align=\"center\">create a new tmux session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux a -t <code>[Session Name]</code></td>\n<td align=\"center\">attach to an existing session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux kill-session -t <code>[Session Name]</code></td>\n<td align=\"center\">Delete a specific Session</td>\n</tr>\n<tr>\n<td align=\"center\">tmux detach</td>\n<td align=\"center\">detach current session</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + &#96;</td>\n<td align=\"center\">&#96;</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>-</code></td>\n<td align=\"center\">Split windows up and down</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>↑↓←→</code></td>\n<td align=\"center\">switch panne</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>jkhl</code></td>\n<td align=\"center\">Resize pane</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>m</code></td>\n<td align=\"center\">Maximize&#x2F;Unmaximize current pane</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>c</code></td>\n<td align=\"center\">create window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>,</code></td>\n<td align=\"center\">Rename current active window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>&amp;</code></td>\n<td align=\"center\">Kill current window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>n</code> or <code>p</code></td>\n<td align=\"center\">Next&#x2F;Previous window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>w</code></td>\n<td align=\"center\">List all Sessions and windows</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code> + <code>,</code></td>\n<td align=\"center\">Rename current active window</td>\n</tr>\n<tr>\n<td align=\"center\"><code>prefix</code>+<code>x</code></td>\n<td align=\"center\">delete current pane</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>在<code>tmux</code>中，选择文本时需要按住<code>shift</code> , 用<code>ctrl+shift+c</code>复制，<code>ctrl+shift+v</code>粘贴</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Character</span><br><span class=\"line\">You are a scientist who is proficient in computer science, physics, and is able to explain all relevant problems in detail, with pictures and texts</span><br><span class=\"line\"></span><br><span class=\"line\">## Skills</span><br><span class=\"line\">### Skill 1: Proficient in Computer Science</span><br><span class=\"line\">- Proficient in all programming languages such as C/C++, Rust,Python,Systemverilog,Java, etc</span><br><span class=\"line\">- You can search for information from Github and stackoverflow to answer programming related questions</span><br><span class=\"line\"></span><br><span class=\"line\">### Skill 2: Proficient in physics</span><br><span class=\"line\">- Proficient in solid state physics, semiconductor physics, semiconductor device physics, and quantum mechanics</span><br><span class=\"line\">- Able to combine formulas and graphs to explain physics problems</span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\">## Constraints:</span><br><span class=\"line\">- Output your answers in markdown format</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>#linux</p>"},{"title":"python调试工具pdb","abbrlink":"9e73dd3c","date":"2024-03-06T01:27:24.000Z","_content":"\n`pdb`是一个内置于`Python`的调试工具，使用方法与`gdb`类似。\n\n<!-- more -->\n\n* 启动\n\n```python\npython -m pdb test.py\n```\n\n* 步进\n\n不同于`gdb`需要输入`start`开始运行，进入`pdb`后程序已经开始运行。\n\n`l`: list 列出源码\n\n`ll`: list all\n\n回车重复上一条命令\n\n`n`: next下一步\n\n`s`: step下一步，可进入函数\n\n* 断点\n\n`b <linenum>`: 在第`linenum`行设置断点\n\n`b`:输出所有断点信息\n\n`disable <Num>`:禁用断点\n\n`c`: continue持续运行程序，直到断点\n\n* 打印\n\n`whatis <variable>`查看变量属性\n\n`p <variable>`打印变量\n\n","source":"_posts/python调试工具pdb.md","raw":"---\ntitle: python调试工具pdb\ntags: Python\nabbrlink: 9e73dd3c\ndate: 2024-03-06 09:27:24\n---\n\n`pdb`是一个内置于`Python`的调试工具，使用方法与`gdb`类似。\n\n<!-- more -->\n\n* 启动\n\n```python\npython -m pdb test.py\n```\n\n* 步进\n\n不同于`gdb`需要输入`start`开始运行，进入`pdb`后程序已经开始运行。\n\n`l`: list 列出源码\n\n`ll`: list all\n\n回车重复上一条命令\n\n`n`: next下一步\n\n`s`: step下一步，可进入函数\n\n* 断点\n\n`b <linenum>`: 在第`linenum`行设置断点\n\n`b`:输出所有断点信息\n\n`disable <Num>`:禁用断点\n\n`c`: continue持续运行程序，直到断点\n\n* 打印\n\n`whatis <variable>`查看变量属性\n\n`p <variable>`打印变量\n\n","slug":"python调试工具pdb","published":1,"updated":"2024-03-23T15:41:11.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dg000o58te9ymv2w4v","content":"<p><code>pdb</code>是一个内置于<code>Python</code>的调试工具，使用方法与<code>gdb</code>类似。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pdb test.py</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步进</li>\n</ul>\n<p>不同于<code>gdb</code>需要输入<code>start</code>开始运行，进入<code>pdb</code>后程序已经开始运行。</p>\n<p><code>l</code>: list 列出源码</p>\n<p><code>ll</code>: list all</p>\n<p>回车重复上一条命令</p>\n<p><code>n</code>: next下一步</p>\n<p><code>s</code>: step下一步，可进入函数</p>\n<ul>\n<li>断点</li>\n</ul>\n<p><code>b &lt;linenum&gt;</code>: 在第<code>linenum</code>行设置断点</p>\n<p><code>b</code>:输出所有断点信息</p>\n<p><code>disable &lt;Num&gt;</code>:禁用断点</p>\n<p><code>c</code>: continue持续运行程序，直到断点</p>\n<ul>\n<li>打印</li>\n</ul>\n<p><code>whatis &lt;variable&gt;</code>查看变量属性</p>\n<p><code>p &lt;variable&gt;</code>打印变量</p>\n","site":{"data":{}},"length":281,"excerpt":"<p><code>pdb</code>是一个内置于<code>Python</code>的调试工具，使用方法与<code>gdb</code>类似。</p>","more":"<ul>\n<li>启动</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m pdb test.py</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步进</li>\n</ul>\n<p>不同于<code>gdb</code>需要输入<code>start</code>开始运行，进入<code>pdb</code>后程序已经开始运行。</p>\n<p><code>l</code>: list 列出源码</p>\n<p><code>ll</code>: list all</p>\n<p>回车重复上一条命令</p>\n<p><code>n</code>: next下一步</p>\n<p><code>s</code>: step下一步，可进入函数</p>\n<ul>\n<li>断点</li>\n</ul>\n<p><code>b &lt;linenum&gt;</code>: 在第<code>linenum</code>行设置断点</p>\n<p><code>b</code>:输出所有断点信息</p>\n<p><code>disable &lt;Num&gt;</code>:禁用断点</p>\n<p><code>c</code>: continue持续运行程序，直到断点</p>\n<ul>\n<li>打印</li>\n</ul>\n<p><code>whatis &lt;variable&gt;</code>查看变量属性</p>\n<p><code>p &lt;variable&gt;</code>打印变量</p>"},{"title":"notes_of_acwing","abbrlink":"830bf4be","date":"2022-03-06T00:56:02.000Z","_content":"\n......\n\n<!-- more -->\n\n# 一、基础算法\n\n## 快排\n\n```cpp\nvoid quick_sort(std::vector<int> &q , int l , int r ){\n    if(l >= r)   return;\n    int i = l - 1 , j = r + 1 , x = q[(l+r)>>1] ;\n    while(i < j){\n        do i++ ; while(q[i] < x) ;\n        do j-- ; while(q[j] > x) ;\n        if(i < j)   std::swap(q[i] , q[j]) ;\n    }\n    quick_sort(q , l , j) ;\n    quick_sort(q , j+1 , r) ;\n\n}\n```\n\n## 快速选择(第k个数)\n\n```cpp\nint quick_sort(int *q , int l , int r , int k){\n    if(l >= r)  return q[l];\n    int i = l - 1 , j = r + 1 , x = q[(l+r)>>1] ;\n    while(i < j){\n        do i++ ; while(q[i] < x) ;\n        do j-- ; while(q[j] > x) ;\n        if(i < j) std::swap(q[i] , q[j]) ;\n    }\n    if(k <= (j - l + 1))    return quick_sort(q , l , j , k) ;\n    else return quick_sort(q , j+1 , r , k - (j - l + 1)) ;\n}\n```\n\n[215. 数组中的第K个最大元素 - 力扣（LeetCode）](https://leetcode.cn/problems/kth-largest-element-in-an-array/description/)\n\n## 归并排序\n\n**分治思想**\n\n<img src = \"https://pic.leetcode-cn.com/1614274007-nBQbZZ-Picture1.png\"></img>\n\n```cpp\n#include<iostream>\n#include<algorithm>\nconst int N = 1e5 + 10 ;\nint q[N] ;\nvoid merge_sort(int *q , int l , int r){\n    if(l >= r)  return;\n    int mid = l + r >> 1 , i = l , j = mid + 1 ;\n    merge_sort(q , l , mid) ;\n    merge_sort(q , mid+1 , r) ;\n    int temp[r-l+1] , k = 0 ;\n    while(i <= mid && j <= r){\n        if(q[i] < q[j]) temp[k++] = q[i++] ;\n        else temp[k++] = q[j++] ;\n    }\n    while(i <= mid) temp[k++] = q[i++] ;\n    while(j <= r)   temp[k++] = q[j++] ;\n    for(int i = l , j = 0 ; i <= r ; i++ , j++) \n        q[i] = temp[j] ;\n}\nint main()\n{\n    int n ;\n    std::cin >> n ;\n    for(int i = 0 ; i < n ; i++){\n        std::scanf(\"%d\" , &q[i]) ;\n    }\n    // std::sort(q , q+n) ;\n    merge_sort(q , 0 , n-1);\n    for(int i ; i < n ; i++)  std::printf(\"%d \", q[i]) ;\n}\n```\n\n\n\n## 逆序对数量\n\n```cpp\n#include<iostream>\ntypedef long long LL ;\nconst int N = 1e5 + 10 ;\nint q[N] ;\nLL merge_sort(int *q , int l , int r){\n    if(l >= r)  return 0 ;\n    int mid = (l+r) >> 1 ;\n    LL res = merge_sort(q , l , mid) + merge_sort(q , mid+1 , r) ;\n    int i = l , j = mid+1 , k = 0 ;\n    int temp[r-l+1] ;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j])    temp[k++] = q[i++] ;\n        else{\n            res += mid - i + 1 ;\n            temp[k++] = q[j++] ;\n        }\n\n    }\n    while(i <= mid) temp[k++] = q[i++] ;\n    while(j <= r)   temp[k++] = q[j++] ;\n    for(int i = l , k = 0 ; i <= r ; i++ , k++)\n        q[i] = temp[k] ;\n    return res ;\n}\n\nint main()\n{\n    int n ;\n    std::cin >> n ;\n    for(int i = 0 ; i < n ; i++)\n        scanf(\"%d\" , &q[i]) ;\n    std::cout << merge_sort(q , 0 , n-1) ;\n    return 0 ;\n}\n```\n\n[LCR 170. 交易逆序对的总数 - 力扣（LeetCode）](https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/)\n\n\n\n## 二分查找\n\n```cpp\n#include<iostream>\nconst int N = 1e5 + 10 ;\nint q[N] ;\nint SL(int x , int l , int r){\n    //查找第一个≥x的数\n    int mid ;\n    while(l < r){\n        mid = (l+r) >> 1 ;\n        if(q[mid] >= x) r = mid ;\n        else l = mid + 1 ;\n    }\n    if(q[l] == x)   return l ;\n    else return -1 ;\n}\nint SR(int x , int l , int r){\n    //查找最后一个≤x的数\n    int mid ;\n    while(l < r){\n            mid = (l+r+1) >> 1 ;\n            if(q[mid] <= x) l = mid ;\n            else r = mid - 1 ;\n    }\n    if(q[l] == x) return l ;\n    else return -1 ;\n}\nint main()\n{\n    int n , m ; \n    std::cin >> n >> m ;\n    for(int i = 0 ; i < n ; i++)\n        std::scanf(\"%d\" , &q[i]) ;\n    while(m--){\n        int x ;\n        std::cin >> x ;\n        std::cout << SL(x , 0 , n-1) << \" \" << SR(x , 0 , n-1 ) << std::endl ;\n        \n    }\n\n    return 0 ;\n}\n```\n\n[69. x 的平方根 - 力扣（LeetCode）](https://leetcode.cn/problems/sqrtx/)\n\n## 高精度计算\n\n```cpp\n#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std ;\nstring add(const string &a , const string &b){\n    int t = 0 , i = a.size() - 1 , j = b.size() - 1 ;\n    string c ;\n    while(i >= 0 || j >= 0){\n        if(i >= 0)  t += a[i--] - '0' ;\n        if(j >= 0)  t += b[j--] - '0' ;\n        c.push_back(t % 10 + '0') ;\n        t /= 10 ;\n    }\n    if(t)   c.push_back(t + '0') ;\n    reverse(c.begin() , c.end()) ;\n    return c ;\n}\nbool cmp(const string& a , const string& b){\n    if(a.size() != b.size())    return a.size() > b.size() ;\n    else {\n        int i ;\n        for(i = 0 ; a[i] == b[i] ; i++) ;\n        return a[i] > b[i] ;\n    }\n    return 0 ;\n}\nstring sub(const string& a , const string& b){\n    if(a == b)  return \"0\" ;\n    string c ;\n    if(cmp(a , b)){\n           int i = a.size() - 1 , j = b.size() - 1 , t = 0 , k = 0 ;\n           while(i >= 0 || j >= 0){\n            t = k ;\n            if(i >= 0)  t += a[i] - '0' ;\n            if(j >= 0)  t = t - (b[j] - '0') ;\n            c.push_back((t+10)%10 + '0') ;\n            k = (t >= 0) ? 0 : -1 ;\n            i-- , j-- ;\n           }\n    }\n    else {\n        c.push_back('-') ;\n        c += sub(b,a) ; \n    }\n    int i = c.size() - 1 ;\n    while(c.size() > 1 && c[i--] == '0')  c.pop_back() ;\n    if(c[0] != '-') reverse(c.begin() , c.end()) ;\n    return c ;\n}\nstring mul(const string &a , const string &b){\n    if(a == \"0\" || b == \"0\")    return \"0\" ;\n    int len_a = a.size() , len_b = b.size()  , t = 0 ;\n    string c = string(len_a + len_b , '0') ;\n    for(int i = len_a - 1 ; i >= 0 ; i--){\n        for(int j = len_b - 1 ; j >= 0 ; j--){\n            t = (a[i] - '0') * (b[j] - '0') + (c[i+j+1] - '0');\n            c[i+j+1] = t % 10 + '0' ;\n            c[i+j] += t / 10 ;\n        }\n    }\n    int i ;\n    for(i = 0 ; c[i] == '0' && i < len_a + len_b - 1 ; i++) ;\n    c = c.substr(i) ;\n    return c ;\n}\nstring div(const string &a , int b , int& r){\n    int r0 = 0 ;//ro is reminder .\n    string c ;\n    for(auto it = a.begin() ; it != a.end() ; it++){\n        r0 = r0 * 10 + (*it - '0') ;\n        c.push_back(r0 / b + '0') ;\n        r0 %= b ;\n    }\n    int idx = 0 ;\n    while(c[idx] == '0' && idx < c.size() - 1)    idx++ ;\n    c = c.substr(idx) ;\n    r = r0 ;\n    return c ;\n}\n\nint main()\n{\n    \n}\n```\n\n## 前缀和\n\n```cpp\n#include<iostream>\nusing namespace std ;\n\nint main()\n{\n    int n , m , l , r ;\n    const int N = 1e5 + 10 ;\n    cin >> n >> m ;\n    int q[N] , s[N] ;\n    s[0] = 0 ;\n    for(int i = 1 ; i <= n ; i++){\n        scanf(\"%d\" , &q[i]) ;\n        s[i] = s[i-1] + q[i] ;\n    }\n    \n    while(m--){\n        cin >> l >> r ;\n        cout << s[r] - s[l-1] << endl ;\n    }\n}\n```\n\n## 子矩阵的和\n\n```cpp\n#include<iostream>\nusing namespace std ;\nconst int N = 1010 ;\nint main()\n{\n    int a[N][N] = {0} , s[N][N] = {0} ;\n    int n , m , q , x1 , y1 , x2 , y2 ;\n    cin >> n >> m >> q ;\n    for(int i = 1 ; i <= n ; i++)\n        for(int j = 1 ; j <= m ; j++){\n            scanf(\"%d\" , &a[i][j]) ;\n            s[i][j] = s[i-1][j] + s[i][j-1] + a[i][j] - s[i-1][j-1] ;\n        }\n    while(q--){\n        // cin >> x1 >> y1 >> x2 >> y2 ;\n        scanf(\"%d %d %d %d\" , &x1 , &y1 , &x2 , &y2) ;\n        printf(\"%d\\n\" , s[x2][y2] - s[x2][y1-1] - s[x1-1][y2] + s[x1-1][y1-1]) ; \n    } \n\n}\n```\n\n## 差分\n\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 1e5 + 10;\nint a[N] , b[N];\n\n\nint main(){\n    int n , m;\n    cin >> n >> m;\n    for(int i = 1 ; i <= n ; i++){\n        scanf(\"%d\" , &a[i]);\n        b[i] = a[i] - a[i-1];\n    }\n    while(m--){\n        int l , r  , c ;\n        scanf(\"%d %d %d\" , &l , &r , &c);\n        b[l] += c , b[r+1] -= c;\n    }\n    \n    for(int i = 1 ; i <= n ; i++){\n        a[i] = a[i-1] + b[i];\n        printf(\"%d \" , a[i]);\n    }\n}\n```\n\n\n\n## 双指针\n\n**最长连续不重复子序列**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    const int N = 1e5 + 10 ;\n    int a[N] , s[N] = {0} , n , res = 0 ;\n    cin >> n ;\n    for(int i = 0 ; i < n ; i++)\n        scanf(\"%d\" , &a[i]) ;\n    for(int i = 0 , j = 0 ; i < n ; ++i){\n        s[a[i]]++ ;\n        while(j < i && s[a[i]] > 1) s[a[j++]] -- ;\n        res = res > (i-j+1) ? res : (i-j+1) ;\n    }\n    cout << res ;\n    return 0 ;\n}\n```\n\n[3. 无重复字符的最长子串 - 力扣（LeetCode）](https://leetcode.cn/problems/longest-substring-without-repeating-characters/submissions/492530011/)\n\n[88. 合并两个有序数组 - 力扣（LeetCode）](https://leetcode.cn/problems/merge-sorted-array/)\n\n**数组元素的目标和**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    int n , m , x ;\n    const int N = 1e5 + 10 ;\n    int a[N] , b[N] ;\n    cin >> n >> m >> x ;\n    for(int i = 0 ; i < n ; i++){\n        scanf(\"%d\" , &a[i]) ;\n    }\n    for(int i = 0 ; i < m ; i++)\n        scanf(\"%d\" , &b[i]) ;\n    for(int i = 0 , j = m-1 ; i < n ; i++){\n        while(j>=0 && a[i]+b[j] > x)    j-- ;\n        if(j >= 0 && a[i]+b[j] == x){\n            cout << i << ' ' << j ;\n            break ;\n        }\n    }\n\n}\n```\n\n**位运算**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    int x ;\n    cin >> x ;\n    for(int k = 7 ; k >= 0 ; --k)//8位二进制表示输出\n        cout << (x>>k & 1) ;\n}\n```\n\n**lowbit**\n\n求出最后一个二进制1所表示的数的大小(描述得不清楚)，看示例：\n\n`24`的8位二进制表示为`0001_1000` , 则`lowbit(24) = 0000_1000` ;\n\n`lowbit(26) = 0000_0010` ……\n\n原理是`x&(-x)` , 本质是`x & (~x + 1)` , `x`与其补码相与。\n\n`lowbit`常用于统计二进制数中`1`的个数\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint lowbit(int x){\n    return x&(-x) ;\n}\nint main()\n{\n    int n , x , res = 0 ;\n    cin >> n ;\n    while(n--){\n        cin >> x ;\n        res =  0 ;\n        while(x)    x -= lowbit(x) , res++ ;\n        printf(\"%d \" , res) ;\n    }\n}\n```\n\n[LCR 133. 位 1 的个数 - 力扣（LeetCode）](https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/submissions/492746547/)\n\n[461. 汉明距离 - 力扣（LeetCode）](https://leetcode.cn/problems/hamming-distance/)\n\n利用`x&(x-1)`也可求二进制表示中1的个数\n\n例如汉明距离：\n\n```cpp\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int t = x ^ y , res = 0 ;\n        while(t)    t = t & (t-1) , res++ ;\n        return res ;\n    }\n};\n```\n\n## 离散化\n\n使用场景：**值域大，但稀疏**\n\n","source":"_posts/notes-of-acwing.md","raw":"---\ntitle: notes_of_acwing\ntags: Algorithm\nabbrlink: 830bf4be\ndate: 2022-03-06 08:56:02\n---\n\n......\n\n<!-- more -->\n\n# 一、基础算法\n\n## 快排\n\n```cpp\nvoid quick_sort(std::vector<int> &q , int l , int r ){\n    if(l >= r)   return;\n    int i = l - 1 , j = r + 1 , x = q[(l+r)>>1] ;\n    while(i < j){\n        do i++ ; while(q[i] < x) ;\n        do j-- ; while(q[j] > x) ;\n        if(i < j)   std::swap(q[i] , q[j]) ;\n    }\n    quick_sort(q , l , j) ;\n    quick_sort(q , j+1 , r) ;\n\n}\n```\n\n## 快速选择(第k个数)\n\n```cpp\nint quick_sort(int *q , int l , int r , int k){\n    if(l >= r)  return q[l];\n    int i = l - 1 , j = r + 1 , x = q[(l+r)>>1] ;\n    while(i < j){\n        do i++ ; while(q[i] < x) ;\n        do j-- ; while(q[j] > x) ;\n        if(i < j) std::swap(q[i] , q[j]) ;\n    }\n    if(k <= (j - l + 1))    return quick_sort(q , l , j , k) ;\n    else return quick_sort(q , j+1 , r , k - (j - l + 1)) ;\n}\n```\n\n[215. 数组中的第K个最大元素 - 力扣（LeetCode）](https://leetcode.cn/problems/kth-largest-element-in-an-array/description/)\n\n## 归并排序\n\n**分治思想**\n\n<img src = \"https://pic.leetcode-cn.com/1614274007-nBQbZZ-Picture1.png\"></img>\n\n```cpp\n#include<iostream>\n#include<algorithm>\nconst int N = 1e5 + 10 ;\nint q[N] ;\nvoid merge_sort(int *q , int l , int r){\n    if(l >= r)  return;\n    int mid = l + r >> 1 , i = l , j = mid + 1 ;\n    merge_sort(q , l , mid) ;\n    merge_sort(q , mid+1 , r) ;\n    int temp[r-l+1] , k = 0 ;\n    while(i <= mid && j <= r){\n        if(q[i] < q[j]) temp[k++] = q[i++] ;\n        else temp[k++] = q[j++] ;\n    }\n    while(i <= mid) temp[k++] = q[i++] ;\n    while(j <= r)   temp[k++] = q[j++] ;\n    for(int i = l , j = 0 ; i <= r ; i++ , j++) \n        q[i] = temp[j] ;\n}\nint main()\n{\n    int n ;\n    std::cin >> n ;\n    for(int i = 0 ; i < n ; i++){\n        std::scanf(\"%d\" , &q[i]) ;\n    }\n    // std::sort(q , q+n) ;\n    merge_sort(q , 0 , n-1);\n    for(int i ; i < n ; i++)  std::printf(\"%d \", q[i]) ;\n}\n```\n\n\n\n## 逆序对数量\n\n```cpp\n#include<iostream>\ntypedef long long LL ;\nconst int N = 1e5 + 10 ;\nint q[N] ;\nLL merge_sort(int *q , int l , int r){\n    if(l >= r)  return 0 ;\n    int mid = (l+r) >> 1 ;\n    LL res = merge_sort(q , l , mid) + merge_sort(q , mid+1 , r) ;\n    int i = l , j = mid+1 , k = 0 ;\n    int temp[r-l+1] ;\n    while(i <= mid && j <= r){\n        if(q[i] <= q[j])    temp[k++] = q[i++] ;\n        else{\n            res += mid - i + 1 ;\n            temp[k++] = q[j++] ;\n        }\n\n    }\n    while(i <= mid) temp[k++] = q[i++] ;\n    while(j <= r)   temp[k++] = q[j++] ;\n    for(int i = l , k = 0 ; i <= r ; i++ , k++)\n        q[i] = temp[k] ;\n    return res ;\n}\n\nint main()\n{\n    int n ;\n    std::cin >> n ;\n    for(int i = 0 ; i < n ; i++)\n        scanf(\"%d\" , &q[i]) ;\n    std::cout << merge_sort(q , 0 , n-1) ;\n    return 0 ;\n}\n```\n\n[LCR 170. 交易逆序对的总数 - 力扣（LeetCode）](https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/)\n\n\n\n## 二分查找\n\n```cpp\n#include<iostream>\nconst int N = 1e5 + 10 ;\nint q[N] ;\nint SL(int x , int l , int r){\n    //查找第一个≥x的数\n    int mid ;\n    while(l < r){\n        mid = (l+r) >> 1 ;\n        if(q[mid] >= x) r = mid ;\n        else l = mid + 1 ;\n    }\n    if(q[l] == x)   return l ;\n    else return -1 ;\n}\nint SR(int x , int l , int r){\n    //查找最后一个≤x的数\n    int mid ;\n    while(l < r){\n            mid = (l+r+1) >> 1 ;\n            if(q[mid] <= x) l = mid ;\n            else r = mid - 1 ;\n    }\n    if(q[l] == x) return l ;\n    else return -1 ;\n}\nint main()\n{\n    int n , m ; \n    std::cin >> n >> m ;\n    for(int i = 0 ; i < n ; i++)\n        std::scanf(\"%d\" , &q[i]) ;\n    while(m--){\n        int x ;\n        std::cin >> x ;\n        std::cout << SL(x , 0 , n-1) << \" \" << SR(x , 0 , n-1 ) << std::endl ;\n        \n    }\n\n    return 0 ;\n}\n```\n\n[69. x 的平方根 - 力扣（LeetCode）](https://leetcode.cn/problems/sqrtx/)\n\n## 高精度计算\n\n```cpp\n#include<iostream>\n#include<string>\n#include<vector>\n#include<algorithm>\nusing namespace std ;\nstring add(const string &a , const string &b){\n    int t = 0 , i = a.size() - 1 , j = b.size() - 1 ;\n    string c ;\n    while(i >= 0 || j >= 0){\n        if(i >= 0)  t += a[i--] - '0' ;\n        if(j >= 0)  t += b[j--] - '0' ;\n        c.push_back(t % 10 + '0') ;\n        t /= 10 ;\n    }\n    if(t)   c.push_back(t + '0') ;\n    reverse(c.begin() , c.end()) ;\n    return c ;\n}\nbool cmp(const string& a , const string& b){\n    if(a.size() != b.size())    return a.size() > b.size() ;\n    else {\n        int i ;\n        for(i = 0 ; a[i] == b[i] ; i++) ;\n        return a[i] > b[i] ;\n    }\n    return 0 ;\n}\nstring sub(const string& a , const string& b){\n    if(a == b)  return \"0\" ;\n    string c ;\n    if(cmp(a , b)){\n           int i = a.size() - 1 , j = b.size() - 1 , t = 0 , k = 0 ;\n           while(i >= 0 || j >= 0){\n            t = k ;\n            if(i >= 0)  t += a[i] - '0' ;\n            if(j >= 0)  t = t - (b[j] - '0') ;\n            c.push_back((t+10)%10 + '0') ;\n            k = (t >= 0) ? 0 : -1 ;\n            i-- , j-- ;\n           }\n    }\n    else {\n        c.push_back('-') ;\n        c += sub(b,a) ; \n    }\n    int i = c.size() - 1 ;\n    while(c.size() > 1 && c[i--] == '0')  c.pop_back() ;\n    if(c[0] != '-') reverse(c.begin() , c.end()) ;\n    return c ;\n}\nstring mul(const string &a , const string &b){\n    if(a == \"0\" || b == \"0\")    return \"0\" ;\n    int len_a = a.size() , len_b = b.size()  , t = 0 ;\n    string c = string(len_a + len_b , '0') ;\n    for(int i = len_a - 1 ; i >= 0 ; i--){\n        for(int j = len_b - 1 ; j >= 0 ; j--){\n            t = (a[i] - '0') * (b[j] - '0') + (c[i+j+1] - '0');\n            c[i+j+1] = t % 10 + '0' ;\n            c[i+j] += t / 10 ;\n        }\n    }\n    int i ;\n    for(i = 0 ; c[i] == '0' && i < len_a + len_b - 1 ; i++) ;\n    c = c.substr(i) ;\n    return c ;\n}\nstring div(const string &a , int b , int& r){\n    int r0 = 0 ;//ro is reminder .\n    string c ;\n    for(auto it = a.begin() ; it != a.end() ; it++){\n        r0 = r0 * 10 + (*it - '0') ;\n        c.push_back(r0 / b + '0') ;\n        r0 %= b ;\n    }\n    int idx = 0 ;\n    while(c[idx] == '0' && idx < c.size() - 1)    idx++ ;\n    c = c.substr(idx) ;\n    r = r0 ;\n    return c ;\n}\n\nint main()\n{\n    \n}\n```\n\n## 前缀和\n\n```cpp\n#include<iostream>\nusing namespace std ;\n\nint main()\n{\n    int n , m , l , r ;\n    const int N = 1e5 + 10 ;\n    cin >> n >> m ;\n    int q[N] , s[N] ;\n    s[0] = 0 ;\n    for(int i = 1 ; i <= n ; i++){\n        scanf(\"%d\" , &q[i]) ;\n        s[i] = s[i-1] + q[i] ;\n    }\n    \n    while(m--){\n        cin >> l >> r ;\n        cout << s[r] - s[l-1] << endl ;\n    }\n}\n```\n\n## 子矩阵的和\n\n```cpp\n#include<iostream>\nusing namespace std ;\nconst int N = 1010 ;\nint main()\n{\n    int a[N][N] = {0} , s[N][N] = {0} ;\n    int n , m , q , x1 , y1 , x2 , y2 ;\n    cin >> n >> m >> q ;\n    for(int i = 1 ; i <= n ; i++)\n        for(int j = 1 ; j <= m ; j++){\n            scanf(\"%d\" , &a[i][j]) ;\n            s[i][j] = s[i-1][j] + s[i][j-1] + a[i][j] - s[i-1][j-1] ;\n        }\n    while(q--){\n        // cin >> x1 >> y1 >> x2 >> y2 ;\n        scanf(\"%d %d %d %d\" , &x1 , &y1 , &x2 , &y2) ;\n        printf(\"%d\\n\" , s[x2][y2] - s[x2][y1-1] - s[x1-1][y2] + s[x1-1][y1-1]) ; \n    } \n\n}\n```\n\n## 差分\n\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N = 1e5 + 10;\nint a[N] , b[N];\n\n\nint main(){\n    int n , m;\n    cin >> n >> m;\n    for(int i = 1 ; i <= n ; i++){\n        scanf(\"%d\" , &a[i]);\n        b[i] = a[i] - a[i-1];\n    }\n    while(m--){\n        int l , r  , c ;\n        scanf(\"%d %d %d\" , &l , &r , &c);\n        b[l] += c , b[r+1] -= c;\n    }\n    \n    for(int i = 1 ; i <= n ; i++){\n        a[i] = a[i-1] + b[i];\n        printf(\"%d \" , a[i]);\n    }\n}\n```\n\n\n\n## 双指针\n\n**最长连续不重复子序列**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    const int N = 1e5 + 10 ;\n    int a[N] , s[N] = {0} , n , res = 0 ;\n    cin >> n ;\n    for(int i = 0 ; i < n ; i++)\n        scanf(\"%d\" , &a[i]) ;\n    for(int i = 0 , j = 0 ; i < n ; ++i){\n        s[a[i]]++ ;\n        while(j < i && s[a[i]] > 1) s[a[j++]] -- ;\n        res = res > (i-j+1) ? res : (i-j+1) ;\n    }\n    cout << res ;\n    return 0 ;\n}\n```\n\n[3. 无重复字符的最长子串 - 力扣（LeetCode）](https://leetcode.cn/problems/longest-substring-without-repeating-characters/submissions/492530011/)\n\n[88. 合并两个有序数组 - 力扣（LeetCode）](https://leetcode.cn/problems/merge-sorted-array/)\n\n**数组元素的目标和**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    int n , m , x ;\n    const int N = 1e5 + 10 ;\n    int a[N] , b[N] ;\n    cin >> n >> m >> x ;\n    for(int i = 0 ; i < n ; i++){\n        scanf(\"%d\" , &a[i]) ;\n    }\n    for(int i = 0 ; i < m ; i++)\n        scanf(\"%d\" , &b[i]) ;\n    for(int i = 0 , j = m-1 ; i < n ; i++){\n        while(j>=0 && a[i]+b[j] > x)    j-- ;\n        if(j >= 0 && a[i]+b[j] == x){\n            cout << i << ' ' << j ;\n            break ;\n        }\n    }\n\n}\n```\n\n**位运算**\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint main()\n{\n    int x ;\n    cin >> x ;\n    for(int k = 7 ; k >= 0 ; --k)//8位二进制表示输出\n        cout << (x>>k & 1) ;\n}\n```\n\n**lowbit**\n\n求出最后一个二进制1所表示的数的大小(描述得不清楚)，看示例：\n\n`24`的8位二进制表示为`0001_1000` , 则`lowbit(24) = 0000_1000` ;\n\n`lowbit(26) = 0000_0010` ……\n\n原理是`x&(-x)` , 本质是`x & (~x + 1)` , `x`与其补码相与。\n\n`lowbit`常用于统计二进制数中`1`的个数\n\n```cpp\n#include<iostream>\nusing namespace std ;\nint lowbit(int x){\n    return x&(-x) ;\n}\nint main()\n{\n    int n , x , res = 0 ;\n    cin >> n ;\n    while(n--){\n        cin >> x ;\n        res =  0 ;\n        while(x)    x -= lowbit(x) , res++ ;\n        printf(\"%d \" , res) ;\n    }\n}\n```\n\n[LCR 133. 位 1 的个数 - 力扣（LeetCode）](https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/submissions/492746547/)\n\n[461. 汉明距离 - 力扣（LeetCode）](https://leetcode.cn/problems/hamming-distance/)\n\n利用`x&(x-1)`也可求二进制表示中1的个数\n\n例如汉明距离：\n\n```cpp\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int t = x ^ y , res = 0 ;\n        while(t)    t = t & (t-1) , res++ ;\n        return res ;\n    }\n};\n```\n\n## 离散化\n\n使用场景：**值域大，但稀疏**\n\n","slug":"notes-of-acwing","published":1,"updated":"2024-03-15T12:39:36.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dg000q58te8mdu26jd","content":"<p>……</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一、基础算法\"><a href=\"#一、基础算法\" class=\"headerlink\" title=\"一、基础算法\"></a>一、基础算法</h1><h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l - <span class=\"number\">1</span> , j = r + <span class=\"number\">1</span> , x = q[(l+r)&gt;&gt;<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++ ; <span class=\"keyword\">while</span>(q[i] &lt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j-- ; <span class=\"keyword\">while</span>(q[j] &gt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)   std::<span class=\"built_in\">swap</span>(q[i] , q[j]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q , l , j) ;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q , j+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速选择-第k个数\"><a href=\"#快速选择-第k个数\" class=\"headerlink\" title=\"快速选择(第k个数)\"></a>快速选择(第k个数)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span> q[l];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l - <span class=\"number\">1</span> , j = r + <span class=\"number\">1</span> , x = q[(l+r)&gt;&gt;<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++ ; <span class=\"keyword\">while</span>(q[i] &lt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j-- ; <span class=\"keyword\">while</span>(q[j] &gt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j) std::<span class=\"built_in\">swap</span>(q[i] , q[j]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k &lt;= (j - l + <span class=\"number\">1</span>))    <span class=\"keyword\">return</span> <span class=\"built_in\">quick_sort</span>(q , l , j , k) ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">quick_sort</span>(q , j+<span class=\"number\">1</span> , r , k - (j - l + <span class=\"number\">1</span>)) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/kth-largest-element-in-an-array/description/\">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p><strong>分治思想</strong></p>\n<p><img src = \"https://pic.leetcode-cn.com/1614274007-nBQbZZ-Picture1.png\"></img></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span> , i = l , j = mid + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , l , mid) ;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , mid+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[r-l+<span class=\"number\">1</span>] , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; q[j]) temp[k++] = q[i++] ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> temp[k++] = q[j++] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) temp[k++] = q[i++] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r)   temp[k++] = q[j++] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l , j = <span class=\"number\">0</span> ; i &lt;= r ; i++ , j++) </span><br><span class=\"line\">        q[i] = temp[j] ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;</span><br><span class=\"line\">    std::cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// std::sort(q , q+n) ;</span></span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i ; i &lt; n ; i++)  std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, q[i]) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"逆序对数量\"><a href=\"#逆序对数量\" class=\"headerlink\" title=\"逆序对数量\"></a>逆序对数量</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l+r) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    LL res = <span class=\"built_in\">merge_sort</span>(q , l , mid) + <span class=\"built_in\">merge_sort</span>(q , mid+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l , j = mid+<span class=\"number\">1</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[r-l+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j])    temp[k++] = q[i++] ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res += mid - i + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            temp[k++] = q[j++] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) temp[k++] = q[i++] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r)   temp[k++] = q[j++] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l , k = <span class=\"number\">0</span> ; i &lt;= r ; i++ , k++)</span><br><span class=\"line\">        q[i] = temp[k] ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;</span><br><span class=\"line\">    std::cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">merge_sort</span>(q , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/\">LCR 170. 交易逆序对的总数 - 力扣（LeetCode）</a></p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SL</span><span class=\"params\">(<span class=\"type\">int</span> x , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//查找第一个≥x的数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        mid = (l+r) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[mid] &gt;= x) r = mid ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[l] == x)   <span class=\"keyword\">return</span> l ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SR</span><span class=\"params\">(<span class=\"type\">int</span> x , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//查找最后一个≤x的数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">            mid = (l+r+<span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[mid] &lt;= x) l = mid ;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[l] == x) <span class=\"keyword\">return</span> l ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m ; </span><br><span class=\"line\">    std::cin &gt;&gt; n &gt;&gt; m ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        std::<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x ;</span><br><span class=\"line\">        std::cin &gt;&gt; x ;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"built_in\">SL</span>(x , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>) &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">SR</span>(x , <span class=\"number\">0</span> , n<span class=\"number\">-1</span> ) &lt;&lt; std::endl ;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/sqrtx/\">69. x 的平方根 - 力扣（LeetCode）</a></p>\n<h2 id=\"高精度计算\"><a href=\"#高精度计算\" class=\"headerlink\" title=\"高精度计算\"></a>高精度计算</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">const</span> string &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span> , i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , j = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>)  t += a[i--] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>)  t += b[j--] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        t /= <span class=\"number\">10</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)   c.<span class=\"built_in\">push_back</span>(t + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(c.<span class=\"built_in\">begin</span>() , c.<span class=\"built_in\">end</span>()) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; a , <span class=\"type\">const</span> string&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.<span class=\"built_in\">size</span>() != b.<span class=\"built_in\">size</span>())    <span class=\"keyword\">return</span> a.<span class=\"built_in\">size</span>() &gt; b.<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; a[i] == b[i] ; i++) ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[i] &gt; b[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">sub</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; a , <span class=\"type\">const</span> string&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == b)  <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span> ;</span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(a , b))&#123;</span><br><span class=\"line\">           <span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , j = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , t = <span class=\"number\">0</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">           <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            t = k ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>)  t += a[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>)  t = t - (b[j] - <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">            c.<span class=\"built_in\">push_back</span>((t+<span class=\"number\">10</span>)%<span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">            k = (t &gt;= <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : <span class=\"number\">-1</span> ;</span><br><span class=\"line\">            i-- , j-- ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;-&#x27;</span>) ;</span><br><span class=\"line\">        c += <span class=\"built_in\">sub</span>(b,a) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = c.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; c[i--] == <span class=\"string\">&#x27;0&#x27;</span>)  c.<span class=\"built_in\">pop_back</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"built_in\">reverse</span>(c.<span class=\"built_in\">begin</span>() , c.<span class=\"built_in\">end</span>()) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">const</span> string &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">&quot;0&quot;</span> || b == <span class=\"string\">&quot;0&quot;</span>)    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> len_a = a.<span class=\"built_in\">size</span>() , len_b = b.<span class=\"built_in\">size</span>()  , t = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    string c = <span class=\"built_in\">string</span>(len_a + len_b , <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = len_a - <span class=\"number\">1</span> ; i &gt;= <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = len_b - <span class=\"number\">1</span> ; j &gt;= <span class=\"number\">0</span> ; j--)&#123;</span><br><span class=\"line\">            t = (a[i] - <span class=\"string\">&#x27;0&#x27;</span>) * (b[j] - <span class=\"string\">&#x27;0&#x27;</span>) + (c[i+j+<span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            c[i+j+<span class=\"number\">1</span>] = t % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">            c[i+j] += t / <span class=\"number\">10</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; c[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; i &lt; len_a + len_b - <span class=\"number\">1</span> ; i++) ;</span><br><span class=\"line\">    c = c.<span class=\"built_in\">substr</span>(i) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">div</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">int</span> b , <span class=\"type\">int</span>&amp; r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r0 = <span class=\"number\">0</span> ;<span class=\"comment\">//ro is reminder .</span></span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = a.<span class=\"built_in\">begin</span>() ; it != a.<span class=\"built_in\">end</span>() ; it++)&#123;</span><br><span class=\"line\">        r0 = r0 * <span class=\"number\">10</span> + (*it - <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(r0 / b + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        r0 %= b ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c[idx] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; idx &lt; c.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)    idx++ ;</span><br><span class=\"line\">    c = c.<span class=\"built_in\">substr</span>(idx) ;</span><br><span class=\"line\">    r = r0 ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , l , r ;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m ;</span><br><span class=\"line\">    <span class=\"type\">int</span> q[N] , s[N] ;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">        s[i] = s[i<span class=\"number\">-1</span>] + q[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r ;</span><br><span class=\"line\">        cout &lt;&lt; s[r] - s[l<span class=\"number\">-1</span>] &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子矩阵的和\"><a href=\"#子矩阵的和\" class=\"headerlink\" title=\"子矩阵的和\"></a>子矩阵的和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1010</span> ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N][N] = &#123;<span class=\"number\">0</span>&#125; , s[N][N] = &#123;<span class=\"number\">0</span>&#125; ;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , q , x1 , y1 , x2 , y2 ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span> ; j &lt;= m ; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i][j]) ;</span><br><span class=\"line\">            s[i][j] = s[i<span class=\"number\">-1</span>][j] + s[i][j<span class=\"number\">-1</span>] + a[i][j] - s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 ;</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span> , &amp;x1 , &amp;y1 , &amp;x2 , &amp;y2) ;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span> , s[x2][y2] - s[x2][y1<span class=\"number\">-1</span>] - s[x1<span class=\"number\">-1</span>][y2] + s[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]) ; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N] , b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]);</span><br><span class=\"line\">        b[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l , r  , c ;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span> , &amp;l , &amp;r , &amp;c);</span><br><span class=\"line\">        b[l] += c , b[r+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        a[i] = a[i<span class=\"number\">-1</span>] + b[i];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span> , a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p><strong>最长连续不重复子序列</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N] , s[N] = &#123;<span class=\"number\">0</span>&#125; , n , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> ; i &lt; n ; ++i)&#123;</span><br><span class=\"line\">        s[a[i]]++ ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; i &amp;&amp; s[a[i]] &gt; <span class=\"number\">1</span>) s[a[j++]] -- ;</span><br><span class=\"line\">        res = res &gt; (i-j+<span class=\"number\">1</span>) ? res : (i-j+<span class=\"number\">1</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/submissions/492530011/\">3. 无重复字符的最长子串 - 力扣（LeetCode）</a></p>\n<p><a href=\"https://leetcode.cn/problems/merge-sorted-array/\">88. 合并两个有序数组 - 力扣（LeetCode）</a></p>\n<p><strong>数组元素的目标和</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , x ;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N] , b[N] ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; m ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;b[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = m<span class=\"number\">-1</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span> &amp;&amp; a[i]+b[j] &gt; x)    j-- ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; a[i]+b[j] == x)&#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; j ;</span><br><span class=\"line\">            <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>位运算</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x ;</span><br><span class=\"line\">    cin &gt;&gt; x ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">7</span> ; k &gt;= <span class=\"number\">0</span> ; --k)<span class=\"comment\">//8位二进制表示输出</span></span><br><span class=\"line\">        cout &lt;&lt; (x&gt;&gt;k &amp; <span class=\"number\">1</span>) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lowbit</strong></p>\n<p>求出最后一个二进制1所表示的数的大小(描述得不清楚)，看示例：</p>\n<p><code>24</code>的8位二进制表示为<code>0001_1000</code> , 则<code>lowbit(24) = 0000_1000</code> ;</p>\n<p><code>lowbit(26) = 0000_0010</code> ……</p>\n<p>原理是<code>x&amp;(-x)</code> , 本质是<code>x &amp; (~x + 1)</code> , <code>x</code>与其补码相与。</p>\n<p><code>lowbit</code>常用于统计二进制数中<code>1</code>的个数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&amp;(-x) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , x , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; x ;</span><br><span class=\"line\">        res =  <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)    x -= <span class=\"built_in\">lowbit</span>(x) , res++ ;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span> , res) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/submissions/492746547/\">LCR 133. 位 1 的个数 - 力扣（LeetCode）</a></p>\n<p><a href=\"https://leetcode.cn/problems/hamming-distance/\">461. 汉明距离 - 力扣（LeetCode）</a></p>\n<p>利用<code>x&amp;(x-1)</code>也可求二进制表示中1的个数</p>\n<p>例如汉明距离：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">hammingDistance</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = x ^ y , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t)    t = t &amp; (t<span class=\"number\">-1</span>) , res++ ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h2><p>使用场景：<strong>值域大，但稀疏</strong></p>\n","site":{"data":{}},"length":7835,"excerpt":"<p>……</p>","more":"<h1 id=\"一、基础算法\"><a href=\"#一、基础算法\" class=\"headerlink\" title=\"一、基础算法\"></a>一、基础算法</h1><h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l - <span class=\"number\">1</span> , j = r + <span class=\"number\">1</span> , x = q[(l+r)&gt;&gt;<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++ ; <span class=\"keyword\">while</span>(q[i] &lt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j-- ; <span class=\"keyword\">while</span>(q[j] &gt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j)   std::<span class=\"built_in\">swap</span>(q[i] , q[j]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q , l , j) ;</span><br><span class=\"line\">    <span class=\"built_in\">quick_sort</span>(q , j+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速选择-第k个数\"><a href=\"#快速选择-第k个数\" class=\"headerlink\" title=\"快速选择(第k个数)\"></a>快速选择(第k个数)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r , <span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span> q[l];</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l - <span class=\"number\">1</span> , j = r + <span class=\"number\">1</span> , x = q[(l+r)&gt;&gt;<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++ ; <span class=\"keyword\">while</span>(q[i] &lt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j-- ; <span class=\"keyword\">while</span>(q[j] &gt; x) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; j) std::<span class=\"built_in\">swap</span>(q[i] , q[j]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k &lt;= (j - l + <span class=\"number\">1</span>))    <span class=\"keyword\">return</span> <span class=\"built_in\">quick_sort</span>(q , l , j , k) ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">quick_sort</span>(q , j+<span class=\"number\">1</span> , r , k - (j - l + <span class=\"number\">1</span>)) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/kth-largest-element-in-an-array/description/\">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p><strong>分治思想</strong></p>\n<p><img src = \"https://pic.leetcode-cn.com/1614274007-nBQbZZ-Picture1.png\"></img></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span> , i = l , j = mid + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , l , mid) ;</span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , mid+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[r-l+<span class=\"number\">1</span>] , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt; q[j]) temp[k++] = q[i++] ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> temp[k++] = q[j++] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) temp[k++] = q[i++] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r)   temp[k++] = q[j++] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l , j = <span class=\"number\">0</span> ; i &lt;= r ; i++ , j++) </span><br><span class=\"line\">        q[i] = temp[j] ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;</span><br><span class=\"line\">    std::cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// std::sort(q , q+n) ;</span></span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i ; i &lt; n ; i++)  std::<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, q[i]) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"逆序对数量\"><a href=\"#逆序对数量\" class=\"headerlink\" title=\"逆序对数量\"></a>逆序对数量</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> *q , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l+r) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">    LL res = <span class=\"built_in\">merge_sort</span>(q , l , mid) + <span class=\"built_in\">merge_sort</span>(q , mid+<span class=\"number\">1</span> , r) ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = l , j = mid+<span class=\"number\">1</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[r-l+<span class=\"number\">1</span>] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &lt;= q[j])    temp[k++] = q[i++] ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res += mid - i + <span class=\"number\">1</span> ;</span><br><span class=\"line\">            temp[k++] = q[j++] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) temp[k++] = q[i++] ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r)   temp[k++] = q[j++] ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l , k = <span class=\"number\">0</span> ; i &lt;= r ; i++ , k++)</span><br><span class=\"line\">        q[i] = temp[k] ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;</span><br><span class=\"line\">    std::cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"built_in\">merge_sort</span>(q , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/\">LCR 170. 交易逆序对的总数 - 力扣（LeetCode）</a></p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> q[N] ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SL</span><span class=\"params\">(<span class=\"type\">int</span> x , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//查找第一个≥x的数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">        mid = (l+r) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[mid] &gt;= x) r = mid ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[l] == x)   <span class=\"keyword\">return</span> l ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SR</span><span class=\"params\">(<span class=\"type\">int</span> x , <span class=\"type\">int</span> l , <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//查找最后一个≤x的数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)&#123;</span><br><span class=\"line\">            mid = (l+r+<span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[mid] &lt;= x) l = mid ;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[l] == x) <span class=\"keyword\">return</span> l ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m ; </span><br><span class=\"line\">    std::cin &gt;&gt; n &gt;&gt; m ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        std::<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x ;</span><br><span class=\"line\">        std::cin &gt;&gt; x ;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"built_in\">SL</span>(x , <span class=\"number\">0</span> , n<span class=\"number\">-1</span>) &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"built_in\">SR</span>(x , <span class=\"number\">0</span> , n<span class=\"number\">-1</span> ) &lt;&lt; std::endl ;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/sqrtx/\">69. x 的平方根 - 力扣（LeetCode）</a></p>\n<h2 id=\"高精度计算\"><a href=\"#高精度计算\" class=\"headerlink\" title=\"高精度计算\"></a>高精度计算</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">const</span> string &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span> , i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , j = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>)  t += a[i--] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>)  t += b[j--] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        t /= <span class=\"number\">10</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t)   c.<span class=\"built_in\">push_back</span>(t + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(c.<span class=\"built_in\">begin</span>() , c.<span class=\"built_in\">end</span>()) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; a , <span class=\"type\">const</span> string&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.<span class=\"built_in\">size</span>() != b.<span class=\"built_in\">size</span>())    <span class=\"keyword\">return</span> a.<span class=\"built_in\">size</span>() &gt; b.<span class=\"built_in\">size</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; a[i] == b[i] ; i++) ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[i] &gt; b[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">sub</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; a , <span class=\"type\">const</span> string&amp; b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == b)  <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span> ;</span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(a , b))&#123;</span><br><span class=\"line\">           <span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , j = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> , t = <span class=\"number\">0</span> , k = <span class=\"number\">0</span> ;</span><br><span class=\"line\">           <span class=\"keyword\">while</span>(i &gt;= <span class=\"number\">0</span> || j &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            t = k ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span>)  t += a[i] - <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span>)  t = t - (b[j] - <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">            c.<span class=\"built_in\">push_back</span>((t+<span class=\"number\">10</span>)%<span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">            k = (t &gt;= <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : <span class=\"number\">-1</span> ;</span><br><span class=\"line\">            i-- , j-- ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;-&#x27;</span>) ;</span><br><span class=\"line\">        c += <span class=\"built_in\">sub</span>(b,a) ; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = c.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; c[i--] == <span class=\"string\">&#x27;0&#x27;</span>)  c.<span class=\"built_in\">pop_back</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"built_in\">reverse</span>(c.<span class=\"built_in\">begin</span>() , c.<span class=\"built_in\">end</span>()) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">mul</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">const</span> string &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"string\">&quot;0&quot;</span> || b == <span class=\"string\">&quot;0&quot;</span>)    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> len_a = a.<span class=\"built_in\">size</span>() , len_b = b.<span class=\"built_in\">size</span>()  , t = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    string c = <span class=\"built_in\">string</span>(len_a + len_b , <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = len_a - <span class=\"number\">1</span> ; i &gt;= <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = len_b - <span class=\"number\">1</span> ; j &gt;= <span class=\"number\">0</span> ; j--)&#123;</span><br><span class=\"line\">            t = (a[i] - <span class=\"string\">&#x27;0&#x27;</span>) * (b[j] - <span class=\"string\">&#x27;0&#x27;</span>) + (c[i+j+<span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            c[i+j+<span class=\"number\">1</span>] = t % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span> ;</span><br><span class=\"line\">            c[i+j] += t / <span class=\"number\">10</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; c[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; i &lt; len_a + len_b - <span class=\"number\">1</span> ; i++) ;</span><br><span class=\"line\">    c = c.<span class=\"built_in\">substr</span>(i) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">div</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;a , <span class=\"type\">int</span> b , <span class=\"type\">int</span>&amp; r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r0 = <span class=\"number\">0</span> ;<span class=\"comment\">//ro is reminder .</span></span><br><span class=\"line\">    string c ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = a.<span class=\"built_in\">begin</span>() ; it != a.<span class=\"built_in\">end</span>() ; it++)&#123;</span><br><span class=\"line\">        r0 = r0 * <span class=\"number\">10</span> + (*it - <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        c.<span class=\"built_in\">push_back</span>(r0 / b + <span class=\"string\">&#x27;0&#x27;</span>) ;</span><br><span class=\"line\">        r0 %= b ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c[idx] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; idx &lt; c.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)    idx++ ;</span><br><span class=\"line\">    c = c.<span class=\"built_in\">substr</span>(idx) ;</span><br><span class=\"line\">    r = r0 ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , l , r ;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m ;</span><br><span class=\"line\">    <span class=\"type\">int</span> q[N] , s[N] ;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;q[i]) ;</span><br><span class=\"line\">        s[i] = s[i<span class=\"number\">-1</span>] + q[i] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r ;</span><br><span class=\"line\">        cout &lt;&lt; s[r] - s[l<span class=\"number\">-1</span>] &lt;&lt; endl ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子矩阵的和\"><a href=\"#子矩阵的和\" class=\"headerlink\" title=\"子矩阵的和\"></a>子矩阵的和</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1010</span> ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N][N] = &#123;<span class=\"number\">0</span>&#125; , s[N][N] = &#123;<span class=\"number\">0</span>&#125; ;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , q , x1 , y1 , x2 , y2 ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span> ; j &lt;= m ; j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i][j]) ;</span><br><span class=\"line\">            s[i][j] = s[i<span class=\"number\">-1</span>][j] + s[i][j<span class=\"number\">-1</span>] + a[i][j] - s[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 ;</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span> , &amp;x1 , &amp;y1 , &amp;x2 , &amp;y2) ;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span> , s[x2][y2] - s[x2][y1<span class=\"number\">-1</span>] - s[x1<span class=\"number\">-1</span>][y2] + s[x1<span class=\"number\">-1</span>][y1<span class=\"number\">-1</span>]) ; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N] , b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]);</span><br><span class=\"line\">        b[i] = a[i] - a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l , r  , c ;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span> , &amp;l , &amp;r , &amp;c);</span><br><span class=\"line\">        b[l] += c , b[r+<span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++)&#123;</span><br><span class=\"line\">        a[i] = a[i<span class=\"number\">-1</span>] + b[i];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span> , a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><p><strong>最长连续不重复子序列</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N] , s[N] = &#123;<span class=\"number\">0</span>&#125; , n , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = <span class=\"number\">0</span> ; i &lt; n ; ++i)&#123;</span><br><span class=\"line\">        s[a[i]]++ ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; i &amp;&amp; s[a[i]] &gt; <span class=\"number\">1</span>) s[a[j++]] -- ;</span><br><span class=\"line\">        res = res &gt; (i-j+<span class=\"number\">1</span>) ? res : (i-j+<span class=\"number\">1</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/submissions/492530011/\">3. 无重复字符的最长子串 - 力扣（LeetCode）</a></p>\n<p><a href=\"https://leetcode.cn/problems/merge-sorted-array/\">88. 合并两个有序数组 - 力扣（LeetCode）</a></p>\n<p><strong>数组元素的目标和</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , m , x ;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[N] , b[N] ;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;a[i]) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; m ; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span> , &amp;b[i]) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> , j = m<span class=\"number\">-1</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&gt;=<span class=\"number\">0</span> &amp;&amp; a[i]+b[j] &gt; x)    j-- ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; a[i]+b[j] == x)&#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; j ;</span><br><span class=\"line\">            <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>位运算</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x ;</span><br><span class=\"line\">    cin &gt;&gt; x ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">7</span> ; k &gt;= <span class=\"number\">0</span> ; --k)<span class=\"comment\">//8位二进制表示输出</span></span><br><span class=\"line\">        cout &lt;&lt; (x&gt;&gt;k &amp; <span class=\"number\">1</span>) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>lowbit</strong></p>\n<p>求出最后一个二进制1所表示的数的大小(描述得不清楚)，看示例：</p>\n<p><code>24</code>的8位二进制表示为<code>0001_1000</code> , 则<code>lowbit(24) = 0000_1000</code> ;</p>\n<p><code>lowbit(26) = 0000_0010</code> ……</p>\n<p>原理是<code>x&amp;(-x)</code> , 本质是<code>x &amp; (~x + 1)</code> , <code>x</code>与其补码相与。</p>\n<p><code>lowbit</code>常用于统计二进制数中<code>1</code>的个数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&amp;(-x) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n , x , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    cin &gt;&gt; n ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; x ;</span><br><span class=\"line\">        res =  <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)    x -= <span class=\"built_in\">lowbit</span>(x) , res++ ;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span> , res) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/submissions/492746547/\">LCR 133. 位 1 的个数 - 力扣（LeetCode）</a></p>\n<p><a href=\"https://leetcode.cn/problems/hamming-distance/\">461. 汉明距离 - 力扣（LeetCode）</a></p>\n<p>利用<code>x&amp;(x-1)</code>也可求二进制表示中1的个数</p>\n<p>例如汉明距离：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">hammingDistance</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = x ^ y , res = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t)    t = t &amp; (t<span class=\"number\">-1</span>) , res++ ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"离散化\"><a href=\"#离散化\" class=\"headerlink\" title=\"离散化\"></a>离散化</h2><p>使用场景：<strong>值域大，但稀疏</strong></p>"},{"title":"windows相关","abbrlink":"918da884","date":"2024-03-06T00:59:02.000Z","_content":"\n......\n\n<!-- more -->\n\n### 磁盘扩容\n\n参考文献：[无损扩容分区– DiskGenius](https://www.diskgenius.cn/help/extend-partition.php)\n\n使用软件：[图吧工具箱 - 最纯净的硬件工具箱 (tbtool.cn)](https://www.tbtool.cn/)\n\n遇到的问题：\n\n- 参考文献中的第3步中的“调整后的容量”是指腾出空闲空间的盘，在扩充目的盘后剩余的空间大小。例如，原有C盘50G，D盘100G，想在D盘腾出10G给C盘，那么“调整后的容量”应该是90G\n- 如果重启时，windows不能自动进入WinPE的话，可以尝试安装一个[微PE工具箱](https://www.wepe.com.cn/) ，安装之后电脑开机时，会出现一个进入`WinPE`的选项。如果要删除`WinPE`的开机引导的话，参考[微PE工具箱怎么卸载](https://blog.csdn.net/lezeqe/article/details/105086599) ，其实就是把开机引导删除即可。\n- windows重启进入`WinPE`后，会自动化操作，不要打断。可能遇到:\"检测到下列文件系统错误，分区容量未做调整， 无效的的文件记录\".   可参考[检测到下列文件系统错误解决方案](https://blog.csdn.net/QKK612501/article/details/115298382) \n\n\n\n### 使用Clash后，不打开Clash就无法上网\n\n把Clash的系统代理关了就行\n\n","source":"_posts/windows相关.md","raw":"---\ntitle: windows相关\ntags: windows\nabbrlink: 918da884\ndate: 2024-03-06 08:59:02\n---\n\n......\n\n<!-- more -->\n\n### 磁盘扩容\n\n参考文献：[无损扩容分区– DiskGenius](https://www.diskgenius.cn/help/extend-partition.php)\n\n使用软件：[图吧工具箱 - 最纯净的硬件工具箱 (tbtool.cn)](https://www.tbtool.cn/)\n\n遇到的问题：\n\n- 参考文献中的第3步中的“调整后的容量”是指腾出空闲空间的盘，在扩充目的盘后剩余的空间大小。例如，原有C盘50G，D盘100G，想在D盘腾出10G给C盘，那么“调整后的容量”应该是90G\n- 如果重启时，windows不能自动进入WinPE的话，可以尝试安装一个[微PE工具箱](https://www.wepe.com.cn/) ，安装之后电脑开机时，会出现一个进入`WinPE`的选项。如果要删除`WinPE`的开机引导的话，参考[微PE工具箱怎么卸载](https://blog.csdn.net/lezeqe/article/details/105086599) ，其实就是把开机引导删除即可。\n- windows重启进入`WinPE`后，会自动化操作，不要打断。可能遇到:\"检测到下列文件系统错误，分区容量未做调整， 无效的的文件记录\".   可参考[检测到下列文件系统错误解决方案](https://blog.csdn.net/QKK612501/article/details/115298382) \n\n\n\n### 使用Clash后，不打开Clash就无法上网\n\n把Clash的系统代理关了就行\n\n","slug":"windows相关","published":1,"updated":"2024-03-06T01:18:13.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dh000s58te6k9v4t2f","content":"<p>……</p>\n<span id=\"more\"></span>\n\n<h3 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h3><p>参考文献：<a href=\"https://www.diskgenius.cn/help/extend-partition.php\">无损扩容分区– DiskGenius</a></p>\n<p>使用软件：<a href=\"https://www.tbtool.cn/\">图吧工具箱 - 最纯净的硬件工具箱 (tbtool.cn)</a></p>\n<p>遇到的问题：</p>\n<ul>\n<li>参考文献中的第3步中的“调整后的容量”是指腾出空闲空间的盘，在扩充目的盘后剩余的空间大小。例如，原有C盘50G，D盘100G，想在D盘腾出10G给C盘，那么“调整后的容量”应该是90G</li>\n<li>如果重启时，windows不能自动进入WinPE的话，可以尝试安装一个<a href=\"https://www.wepe.com.cn/\">微PE工具箱</a> ，安装之后电脑开机时，会出现一个进入<code>WinPE</code>的选项。如果要删除<code>WinPE</code>的开机引导的话，参考<a href=\"https://blog.csdn.net/lezeqe/article/details/105086599\">微PE工具箱怎么卸载</a> ，其实就是把开机引导删除即可。</li>\n<li>windows重启进入<code>WinPE</code>后，会自动化操作，不要打断。可能遇到:”检测到下列文件系统错误，分区容量未做调整， 无效的的文件记录”.   可参考<a href=\"https://blog.csdn.net/QKK612501/article/details/115298382\">检测到下列文件系统错误解决方案</a></li>\n</ul>\n<h3 id=\"使用Clash后，不打开Clash就无法上网\"><a href=\"#使用Clash后，不打开Clash就无法上网\" class=\"headerlink\" title=\"使用Clash后，不打开Clash就无法上网\"></a>使用Clash后，不打开Clash就无法上网</h3><p>把Clash的系统代理关了就行</p>\n","site":{"data":{}},"length":392,"excerpt":"<p>……</p>","more":"<h3 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h3><p>参考文献：<a href=\"https://www.diskgenius.cn/help/extend-partition.php\">无损扩容分区– DiskGenius</a></p>\n<p>使用软件：<a href=\"https://www.tbtool.cn/\">图吧工具箱 - 最纯净的硬件工具箱 (tbtool.cn)</a></p>\n<p>遇到的问题：</p>\n<ul>\n<li>参考文献中的第3步中的“调整后的容量”是指腾出空闲空间的盘，在扩充目的盘后剩余的空间大小。例如，原有C盘50G，D盘100G，想在D盘腾出10G给C盘，那么“调整后的容量”应该是90G</li>\n<li>如果重启时，windows不能自动进入WinPE的话，可以尝试安装一个<a href=\"https://www.wepe.com.cn/\">微PE工具箱</a> ，安装之后电脑开机时，会出现一个进入<code>WinPE</code>的选项。如果要删除<code>WinPE</code>的开机引导的话，参考<a href=\"https://blog.csdn.net/lezeqe/article/details/105086599\">微PE工具箱怎么卸载</a> ，其实就是把开机引导删除即可。</li>\n<li>windows重启进入<code>WinPE</code>后，会自动化操作，不要打断。可能遇到:”检测到下列文件系统错误，分区容量未做调整， 无效的的文件记录”.   可参考<a href=\"https://blog.csdn.net/QKK612501/article/details/115298382\">检测到下列文件系统错误解决方案</a></li>\n</ul>\n<h3 id=\"使用Clash后，不打开Clash就无法上网\"><a href=\"#使用Clash后，不打开Clash就无法上网\" class=\"headerlink\" title=\"使用Clash后，不打开Clash就无法上网\"></a>使用Clash后，不打开Clash就无法上网</h3><p>把Clash的系统代理关了就行</p>"},{"title":"shell笔记","abbrlink":"c3711ab9","date":"2022-03-06T00:58:17.000Z","_content":"\nshell笔记\n\n<!-- more -->\n\n- ### 声明脚本执行器\n\n```shell\n#!/usr/bin/bash\n```\n\n可以用命令`which bash`查看`bash`位置\n\n- ### shell传递参数\n\n```shell\n./test.sh 1 2 3 4\n```\n\n`$1`接受参数`1` , `$2`接受参数2……\n\n- ### 算数运算符\n\n原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，`expr` 最常用。\n\n```shell\na=$1\nb=$2\nval=`expr $a + $b`\necho \"a + b = $val\"\nval=`expr $a - $b`\necho \"a - b = $val\"\nval=`expr $a \\* $b`\necho \"a * b = $val\"\nval=`expr $a / $b`\necho \"a / b = $val\"\n\nif [ $a == $b ]\nthen\n    echo \"a is equal to b\"\nfi\nif [ $a != $b ]  #严格遵循空格\nthen \n    echo \"a isn't equal to b\"\nfi\n```\n\n**乘法需用`\\*`转义表示**\n\n\n\n### **关系运算符**\n\n```shell\nif [ $a -eq $b ]\nthen\n   echo \"$a -eq $b : a 等于 b\"\nelse\n   echo \"$a -eq $b: a 不等于 b\"\nfi\nif [ $a -ne $b ]\nthen\n   echo \"$a -ne $b: a 不等于 b\"\nelse\n   echo \"$a -ne $b : a 等于 b\"\nfi\nif [ $a -gt $b ]\nthen\n   echo \"$a -gt $b: a 大于 b\"\nelse\n   echo \"$a -gt $b: a 不大于 b\"\nfi\nif [ $a -lt $b ]\nthen\n   echo \"$a -lt $b: a 小于 b\"\nelse\n   echo \"$a -lt $b: a 不小于 b\"\nfi\nif [ $a -ge $b ]\nthen\n   echo \"$a -ge $b: a 大于或等于 b\"\nelse\n   echo \"$a -ge $b: a 小于 b\"\nfi\nif [ $a -le $b ]\nthen\n   echo \"$a -le $b: a 小于或等于 b\"\nelse\n   echo \"$a -le $b: a 大于 b\"\nfi\n```\n\n### **显示命令执行结果**\n\n```shell\necho `date`\n```\n\n\n\n### **shell输入**\n\n```shell\nread name\necho \"$name is excellent!\"\n```\n\n### for循环\n\n```shell\nfor loop in 1 2 3 4 5\ndo \n    echo \"loop is $loop\"\ndone\n```\n\n### while循环\n\n```shell\nint=5\nwhile [ $int -ge 0 ]\ndo\n    echo \"int = $int\"\n    let \"int--\"\ndone\n```\n\n### sed -i\n\n`sed`是一个在Unix和类Unix环境中使用的流编辑器，它可以对输入的文本（文件或管道）进行基本的文本转换。\n\n```shell\nsed -i 's/old_string/new_string/g' filename\n```\n\n- `-i`：表示直接修改文件内容，而不是输出到标准输出。\n- `s`：表示替换操作。\n- `old_string`：要被替换的字符串。\n- `new_string`：用于替换的新字符串。\n- `g`：表示全局替换，即一行中的所有匹配都会被替换。\n- `filename`：要进行替换的文件名。\n\n```shell\nsed -i '10c apple' banana.txt\n```\n\n- 将`banana.txt`的第十行修改成`apple`.\n\n### grep命令\n\n正则匹配字符串\n\n```shell\nbenkangpeng@DESKTOP-FR84659:~/helloworld$ ls | grep \".v\"\ncount4.v\ncount4_tb.v\ncounter.v\nshift_register.v\n```\n\n↑匹配显示所有`.v`后缀的文件\n\n","source":"_posts/shell笔记.md","raw":"---\ntitle: shell笔记\ntags: linux\nabbrlink: c3711ab9\ndate: 2022-03-06 08:58:17\n---\n\nshell笔记\n\n<!-- more -->\n\n- ### 声明脚本执行器\n\n```shell\n#!/usr/bin/bash\n```\n\n可以用命令`which bash`查看`bash`位置\n\n- ### shell传递参数\n\n```shell\n./test.sh 1 2 3 4\n```\n\n`$1`接受参数`1` , `$2`接受参数2……\n\n- ### 算数运算符\n\n原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，`expr` 最常用。\n\n```shell\na=$1\nb=$2\nval=`expr $a + $b`\necho \"a + b = $val\"\nval=`expr $a - $b`\necho \"a - b = $val\"\nval=`expr $a \\* $b`\necho \"a * b = $val\"\nval=`expr $a / $b`\necho \"a / b = $val\"\n\nif [ $a == $b ]\nthen\n    echo \"a is equal to b\"\nfi\nif [ $a != $b ]  #严格遵循空格\nthen \n    echo \"a isn't equal to b\"\nfi\n```\n\n**乘法需用`\\*`转义表示**\n\n\n\n### **关系运算符**\n\n```shell\nif [ $a -eq $b ]\nthen\n   echo \"$a -eq $b : a 等于 b\"\nelse\n   echo \"$a -eq $b: a 不等于 b\"\nfi\nif [ $a -ne $b ]\nthen\n   echo \"$a -ne $b: a 不等于 b\"\nelse\n   echo \"$a -ne $b : a 等于 b\"\nfi\nif [ $a -gt $b ]\nthen\n   echo \"$a -gt $b: a 大于 b\"\nelse\n   echo \"$a -gt $b: a 不大于 b\"\nfi\nif [ $a -lt $b ]\nthen\n   echo \"$a -lt $b: a 小于 b\"\nelse\n   echo \"$a -lt $b: a 不小于 b\"\nfi\nif [ $a -ge $b ]\nthen\n   echo \"$a -ge $b: a 大于或等于 b\"\nelse\n   echo \"$a -ge $b: a 小于 b\"\nfi\nif [ $a -le $b ]\nthen\n   echo \"$a -le $b: a 小于或等于 b\"\nelse\n   echo \"$a -le $b: a 大于 b\"\nfi\n```\n\n### **显示命令执行结果**\n\n```shell\necho `date`\n```\n\n\n\n### **shell输入**\n\n```shell\nread name\necho \"$name is excellent!\"\n```\n\n### for循环\n\n```shell\nfor loop in 1 2 3 4 5\ndo \n    echo \"loop is $loop\"\ndone\n```\n\n### while循环\n\n```shell\nint=5\nwhile [ $int -ge 0 ]\ndo\n    echo \"int = $int\"\n    let \"int--\"\ndone\n```\n\n### sed -i\n\n`sed`是一个在Unix和类Unix环境中使用的流编辑器，它可以对输入的文本（文件或管道）进行基本的文本转换。\n\n```shell\nsed -i 's/old_string/new_string/g' filename\n```\n\n- `-i`：表示直接修改文件内容，而不是输出到标准输出。\n- `s`：表示替换操作。\n- `old_string`：要被替换的字符串。\n- `new_string`：用于替换的新字符串。\n- `g`：表示全局替换，即一行中的所有匹配都会被替换。\n- `filename`：要进行替换的文件名。\n\n```shell\nsed -i '10c apple' banana.txt\n```\n\n- 将`banana.txt`的第十行修改成`apple`.\n\n### grep命令\n\n正则匹配字符串\n\n```shell\nbenkangpeng@DESKTOP-FR84659:~/helloworld$ ls | grep \".v\"\ncount4.v\ncount4_tb.v\ncounter.v\nshift_register.v\n```\n\n↑匹配显示所有`.v`后缀的文件\n\n","slug":"shell笔记","published":1,"updated":"2024-03-15T12:40:02.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dh000u58te7mro21k4","content":"<p>shell笔记</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><h3 id=\"声明脚本执行器\"><a href=\"#声明脚本执行器\" class=\"headerlink\" title=\"声明脚本执行器\"></a>声明脚本执行器</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<p>可以用命令<code>which bash</code>查看<code>bash</code>位置</p>\n<ul>\n<li><h3 id=\"shell传递参数\"><a href=\"#shell传递参数\" class=\"headerlink\" title=\"shell传递参数\"></a>shell传递参数</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./test.sh 1 2 3 4</span><br></pre></td></tr></table></figure>\n\n<p><code>$1</code>接受参数<code>1</code> , <code>$2</code>接受参数2……</p>\n<ul>\n<li><h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3></li>\n</ul>\n<p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，<code>expr</code> 最常用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=$1</span><br><span class=\"line\">b=$2</span><br><span class=\"line\">val=`expr $a + $b`</span><br><span class=\"line\">echo &quot;a + b = $val&quot;</span><br><span class=\"line\">val=`expr $a - $b`</span><br><span class=\"line\">echo &quot;a - b = $val&quot;</span><br><span class=\"line\">val=`expr $a \\* $b`</span><br><span class=\"line\">echo &quot;a * b = $val&quot;</span><br><span class=\"line\">val=`expr $a / $b`</span><br><span class=\"line\">echo &quot;a / b = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is equal to b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a != $b ]  #严格遵循空格</span><br><span class=\"line\">then </span><br><span class=\"line\">    echo &quot;a isn&#x27;t equal to b&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p><strong>乘法需用<code>\\*</code>转义表示</strong></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a><strong>关系运算符</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $a -eq $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -eq $b: a 不等于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -ne $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -ne $b: a 不等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -ne $b : a 等于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -gt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -gt $b: a 大于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -gt $b: a 不大于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -lt $b: a 小于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -lt $b: a 不小于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -ge $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -ge $b: a 大于或等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -ge $b: a 小于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -le $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -le $b: a 小于或等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -le $b: a 大于 b&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示命令执行结果\"><a href=\"#显示命令执行结果\" class=\"headerlink\" title=\"显示命令执行结果\"></a><strong>显示命令执行结果</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `date`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shell输入\"><a href=\"#shell输入\" class=\"headerlink\" title=\"shell输入\"></a><strong>shell输入</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read name</span><br><span class=\"line\">echo &quot;$name is excellent!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;loop is $loop&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int=5</span><br><span class=\"line\">while [ $int -ge 0 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;int = $int&quot;</span><br><span class=\"line\">    let &quot;int--&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sed-i\"><a href=\"#sed-i\" class=\"headerlink\" title=\"sed -i\"></a>sed -i</h3><p><code>sed</code>是一个在Unix和类Unix环境中使用的流编辑器，它可以对输入的文本（文件或管道）进行基本的文本转换。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s/old_string/new_string/g&#x27; filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-i</code>：表示直接修改文件内容，而不是输出到标准输出。</li>\n<li><code>s</code>：表示替换操作。</li>\n<li><code>old_string</code>：要被替换的字符串。</li>\n<li><code>new_string</code>：用于替换的新字符串。</li>\n<li><code>g</code>：表示全局替换，即一行中的所有匹配都会被替换。</li>\n<li><code>filename</code>：要进行替换的文件名。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;10c apple&#x27; banana.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将<code>banana.txt</code>的第十行修改成<code>apple</code>.</li>\n</ul>\n<h3 id=\"grep命令\"><a href=\"#grep命令\" class=\"headerlink\" title=\"grep命令\"></a>grep命令</h3><p>正则匹配字符串</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP-FR84659:~/helloworld$ ls | grep &quot;.v&quot;</span><br><span class=\"line\">count4.v</span><br><span class=\"line\">count4_tb.v</span><br><span class=\"line\">counter.v</span><br><span class=\"line\">shift_register.v</span><br></pre></td></tr></table></figure>\n\n<p>↑匹配显示所有<code>.v</code>后缀的文件</p>\n","site":{"data":{}},"length":1626,"excerpt":"<p>shell笔记</p>","more":"<ul>\n<li><h3 id=\"声明脚本执行器\"><a href=\"#声明脚本执行器\" class=\"headerlink\" title=\"声明脚本执行器\"></a>声明脚本执行器</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<p>可以用命令<code>which bash</code>查看<code>bash</code>位置</p>\n<ul>\n<li><h3 id=\"shell传递参数\"><a href=\"#shell传递参数\" class=\"headerlink\" title=\"shell传递参数\"></a>shell传递参数</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./test.sh 1 2 3 4</span><br></pre></td></tr></table></figure>\n\n<p><code>$1</code>接受参数<code>1</code> , <code>$2</code>接受参数2……</p>\n<ul>\n<li><h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3></li>\n</ul>\n<p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，<code>expr</code> 最常用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=$1</span><br><span class=\"line\">b=$2</span><br><span class=\"line\">val=`expr $a + $b`</span><br><span class=\"line\">echo &quot;a + b = $val&quot;</span><br><span class=\"line\">val=`expr $a - $b`</span><br><span class=\"line\">echo &quot;a - b = $val&quot;</span><br><span class=\"line\">val=`expr $a \\* $b`</span><br><span class=\"line\">echo &quot;a * b = $val&quot;</span><br><span class=\"line\">val=`expr $a / $b`</span><br><span class=\"line\">echo &quot;a / b = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is equal to b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a != $b ]  #严格遵循空格</span><br><span class=\"line\">then </span><br><span class=\"line\">    echo &quot;a isn&#x27;t equal to b&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p><strong>乘法需用<code>\\*</code>转义表示</strong></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a><strong>关系运算符</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $a -eq $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -eq $b: a 不等于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -ne $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -ne $b: a 不等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -ne $b : a 等于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -gt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -gt $b: a 大于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -gt $b: a 不大于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -lt $b: a 小于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -lt $b: a 不小于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -ge $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -ge $b: a 大于或等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -ge $b: a 小于 b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ $a -le $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$a -le $b: a 小于或等于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$a -le $b: a 大于 b&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示命令执行结果\"><a href=\"#显示命令执行结果\" class=\"headerlink\" title=\"显示命令执行结果\"></a><strong>显示命令执行结果</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `date`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"shell输入\"><a href=\"#shell输入\" class=\"headerlink\" title=\"shell输入\"></a><strong>shell输入</strong></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read name</span><br><span class=\"line\">echo &quot;$name is excellent!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;loop is $loop&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int=5</span><br><span class=\"line\">while [ $int -ge 0 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;int = $int&quot;</span><br><span class=\"line\">    let &quot;int--&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sed-i\"><a href=\"#sed-i\" class=\"headerlink\" title=\"sed -i\"></a>sed -i</h3><p><code>sed</code>是一个在Unix和类Unix环境中使用的流编辑器，它可以对输入的文本（文件或管道）进行基本的文本转换。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s/old_string/new_string/g&#x27; filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-i</code>：表示直接修改文件内容，而不是输出到标准输出。</li>\n<li><code>s</code>：表示替换操作。</li>\n<li><code>old_string</code>：要被替换的字符串。</li>\n<li><code>new_string</code>：用于替换的新字符串。</li>\n<li><code>g</code>：表示全局替换，即一行中的所有匹配都会被替换。</li>\n<li><code>filename</code>：要进行替换的文件名。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;10c apple&#x27; banana.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将<code>banana.txt</code>的第十行修改成<code>apple</code>.</li>\n</ul>\n<h3 id=\"grep命令\"><a href=\"#grep命令\" class=\"headerlink\" title=\"grep命令\"></a>grep命令</h3><p>正则匹配字符串</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">benkangpeng@DESKTOP-FR84659:~/helloworld$ ls | grep &quot;.v&quot;</span><br><span class=\"line\">count4.v</span><br><span class=\"line\">count4_tb.v</span><br><span class=\"line\">counter.v</span><br><span class=\"line\">shift_register.v</span><br></pre></td></tr></table></figure>\n\n<p>↑匹配显示所有<code>.v</code>后缀的文件</p>"},{"title":"解决文章目录点击不跳转的问题","abbrlink":"6e206cd9","date":"2023-10-01T10:00:00.000Z","_content":"\n### 摘要\n\n<p style = \"color : green\">网页文章目录罢工了？</p>\n\n今天在巡视我的小破站时，突然发现我的网页文章目录罢工了：点击目录文章不发生跳转。STFW找到了NexT主题下的一个2020年的<a href = \"https://github.com/theme-next/hexo-theme-next/pull/1540/files\">Issue</a> , 但我发现官方现在已经把这个bug修复了。之后我才找到原因：**Hexo没有正确地渲染出我的markdown语法，或者说，我没有正确的书写markdown。** **将h标签写的标题改成markdown语法即可，即`<h3>摘要</h3>`改成`### 摘要`** \n\n<!-- more -->\n\n### 正文\n\n* **Bug复现**\n\n点击文章目录不跳转，打开开发者工具，发现：\n\n```\nUnchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was received\n```\n\n监听器确实监听到了一个response , 但 message channel在response接受前已关闭？不懂什么意思……\n\n* **开发者模式Debug**\n\n打开开发者工具，选择一个元素进行检查，例如`摘要`，发现浏览器将其渲染为：\n\n```html\n<a class = \"nav-link\">\n\t<span class = \"nav-number\">1.</span>\n    <span class = \"nav-text\">摘要</span>\n</a>\n```\n\n<strong style = \"color : red\">这明显没设置锚点链接！！！怎么可能跳转！！！</strong>\n\n我又去看了下在建站初，Hexo自己给出的文章实例`Hello World`,检查`Quick Start`:\n\n```html\n<a class = \"nav-link\" href = \"#Quick-Start\">\n\t<span class = \"nav-number\">1.</span>\n    <span class = \"nav-text\">Quick Start</span>\n</a>\n```\n\n检查文章中的标题`Quick Start`:\n\n```html\n<h2 id=\"Quick-Start\">\n\t<a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\">\n\t\tQuick Start\n\t</a>\n</h2>\n```\n\n发现文章内的大标题都被加上了``id`锚点。而我写的文章都没有渲染加上锚点。\n\n* **问题分析**\n\n同样是`_post`文件夹里的md文件，渲染结果却不同，问题肯定处在markdown文件内部，我仔细对比了官方参考的`Hello World`文章与我的文章，发现了问题所在：<strong style = \"color:red\">原来我的文章内的标题都是用HTML格式写的，而官方文章都是用markdown语法写的</strong>，即：\n\n我的摘要：\n\n```\n<h3>摘要</h3>\n```\n\n官方的摘要：\n\n```markdown\n### 摘要\n```\n\nmarkdown里写的是`<h3>摘要</h3>`,那hexo当然要原封不动地渲染为`<h3>摘要</h3>` , 难不成还修改你的HTML代码？\t被自己傻到了:sweat_smile:\n\n* **解决方案**\n\n把markdown源文件修改即可，即`<h3>摘要</h3>`改成`### 摘要`","source":"_posts/解决文章目录点击不跳转的问题.md","raw":"---\ntitle: 解决文章目录点击不跳转的问题\nabbrlink: 6e206cd9\ndate: 2023-10-01 18:00:00\ntags: Web\n---\n\n### 摘要\n\n<p style = \"color : green\">网页文章目录罢工了？</p>\n\n今天在巡视我的小破站时，突然发现我的网页文章目录罢工了：点击目录文章不发生跳转。STFW找到了NexT主题下的一个2020年的<a href = \"https://github.com/theme-next/hexo-theme-next/pull/1540/files\">Issue</a> , 但我发现官方现在已经把这个bug修复了。之后我才找到原因：**Hexo没有正确地渲染出我的markdown语法，或者说，我没有正确的书写markdown。** **将h标签写的标题改成markdown语法即可，即`<h3>摘要</h3>`改成`### 摘要`** \n\n<!-- more -->\n\n### 正文\n\n* **Bug复现**\n\n点击文章目录不跳转，打开开发者工具，发现：\n\n```\nUnchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was received\n```\n\n监听器确实监听到了一个response , 但 message channel在response接受前已关闭？不懂什么意思……\n\n* **开发者模式Debug**\n\n打开开发者工具，选择一个元素进行检查，例如`摘要`，发现浏览器将其渲染为：\n\n```html\n<a class = \"nav-link\">\n\t<span class = \"nav-number\">1.</span>\n    <span class = \"nav-text\">摘要</span>\n</a>\n```\n\n<strong style = \"color : red\">这明显没设置锚点链接！！！怎么可能跳转！！！</strong>\n\n我又去看了下在建站初，Hexo自己给出的文章实例`Hello World`,检查`Quick Start`:\n\n```html\n<a class = \"nav-link\" href = \"#Quick-Start\">\n\t<span class = \"nav-number\">1.</span>\n    <span class = \"nav-text\">Quick Start</span>\n</a>\n```\n\n检查文章中的标题`Quick Start`:\n\n```html\n<h2 id=\"Quick-Start\">\n\t<a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\">\n\t\tQuick Start\n\t</a>\n</h2>\n```\n\n发现文章内的大标题都被加上了``id`锚点。而我写的文章都没有渲染加上锚点。\n\n* **问题分析**\n\n同样是`_post`文件夹里的md文件，渲染结果却不同，问题肯定处在markdown文件内部，我仔细对比了官方参考的`Hello World`文章与我的文章，发现了问题所在：<strong style = \"color:red\">原来我的文章内的标题都是用HTML格式写的，而官方文章都是用markdown语法写的</strong>，即：\n\n我的摘要：\n\n```\n<h3>摘要</h3>\n```\n\n官方的摘要：\n\n```markdown\n### 摘要\n```\n\nmarkdown里写的是`<h3>摘要</h3>`,那hexo当然要原封不动地渲染为`<h3>摘要</h3>` , 难不成还修改你的HTML代码？\t被自己傻到了:sweat_smile:\n\n* **解决方案**\n\n把markdown源文件修改即可，即`<h3>摘要</h3>`改成`### 摘要`","slug":"解决文章目录点击不跳转的问题","published":1,"updated":"2023-09-26T16:57:25.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4di000v58te219c5l1s","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p style = \"color : green\">网页文章目录罢工了？</p>\n\n<p>今天在巡视我的小破站时，突然发现我的网页文章目录罢工了：点击目录文章不发生跳转。STFW找到了NexT主题下的一个2020年的<a href = \"https://github.com/theme-next/hexo-theme-next/pull/1540/files\">Issue</a> , 但我发现官方现在已经把这个bug修复了。之后我才找到原因：<strong>Hexo没有正确地渲染出我的markdown语法，或者说，我没有正确的书写markdown。</strong> <strong>将h标签写的标题改成markdown语法即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></strong> </p>\n<span id=\"more\"></span>\n\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><ul>\n<li><strong>Bug复现</strong></li>\n</ul>\n<p>点击文章目录不跳转，打开开发者工具，发现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was received</span><br></pre></td></tr></table></figure>\n\n<p>监听器确实监听到了一个response , 但 message channel在response接受前已关闭？不懂什么意思……</p>\n<ul>\n<li><strong>开发者模式Debug</strong></li>\n</ul>\n<p>打开开发者工具，选择一个元素进行检查，例如<code>摘要</code>，发现浏览器将其渲染为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-link&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-number&quot;</span>&gt;</span>1.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-text&quot;</span>&gt;</span>摘要<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong style = \"color : red\">这明显没设置锚点链接！！！怎么可能跳转！！！</strong></p>\n<p>我又去看了下在建站初，Hexo自己给出的文章实例<code>Hello World</code>,检查<code>Quick Start</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;#Quick-Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-number&quot;</span>&gt;</span>1.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-text&quot;</span>&gt;</span>Quick Start<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>检查文章中的标题<code>Quick Start</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Quick-Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#Quick-Start&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headerlink&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Quick Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t\tQuick Start</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现文章内的大标题都被加上了&#96;&#96;id&#96;锚点。而我写的文章都没有渲染加上锚点。</p>\n<ul>\n<li><strong>问题分析</strong></li>\n</ul>\n<p>同样是<code>_post</code>文件夹里的md文件，渲染结果却不同，问题肯定处在markdown文件内部，我仔细对比了官方参考的<code>Hello World</code>文章与我的文章，发现了问题所在：<strong style = \"color:red\">原来我的文章内的标题都是用HTML格式写的，而官方文章都是用markdown语法写的</strong>，即：</p>\n<p>我的摘要：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;摘要&lt;/h3&gt;</span><br></pre></td></tr></table></figure>\n\n<p>官方的摘要：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">### 摘要</span></span><br></pre></td></tr></table></figure>\n\n<p>markdown里写的是<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>,那hexo当然要原封不动地渲染为<code>&lt;h3&gt;摘要&lt;/h3&gt;</code> , 难不成还修改你的HTML代码？\t被自己傻到了:sweat_smile:</p>\n<ul>\n<li><strong>解决方案</strong></li>\n</ul>\n<p>把markdown源文件修改即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></p>\n","site":{"data":{}},"length":1468,"excerpt":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p style = \"color : green\">网页文章目录罢工了？</p>\n\n<p>今天在巡视我的小破站时，突然发现我的网页文章目录罢工了：点击目录文章不发生跳转。STFW找到了NexT主题下的一个2020年的<a href = \"https://github.com/theme-next/hexo-theme-next/pull/1540/files\">Issue</a> , 但我发现官方现在已经把这个bug修复了。之后我才找到原因：<strong>Hexo没有正确地渲染出我的markdown语法，或者说，我没有正确的书写markdown。</strong> <strong>将h标签写的标题改成markdown语法即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></strong> </p>","more":"<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><ul>\n<li><strong>Bug复现</strong></li>\n</ul>\n<p>点击文章目录不跳转，打开开发者工具，发现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was received</span><br></pre></td></tr></table></figure>\n\n<p>监听器确实监听到了一个response , 但 message channel在response接受前已关闭？不懂什么意思……</p>\n<ul>\n<li><strong>开发者模式Debug</strong></li>\n</ul>\n<p>打开开发者工具，选择一个元素进行检查，例如<code>摘要</code>，发现浏览器将其渲染为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-link&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-number&quot;</span>&gt;</span>1.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-text&quot;</span>&gt;</span>摘要<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong style = \"color : red\">这明显没设置锚点链接！！！怎么可能跳转！！！</strong></p>\n<p>我又去看了下在建站初，Hexo自己给出的文章实例<code>Hello World</code>,检查<code>Quick Start</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;#Quick-Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-number&quot;</span>&gt;</span>1.<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span> = <span class=\"string\">&quot;nav-text&quot;</span>&gt;</span>Quick Start<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>检查文章中的标题<code>Quick Start</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Quick-Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#Quick-Start&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;headerlink&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Quick Start&quot;</span>&gt;</span></span><br><span class=\"line\">\t\tQuick Start</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>发现文章内的大标题都被加上了&#96;&#96;id&#96;锚点。而我写的文章都没有渲染加上锚点。</p>\n<ul>\n<li><strong>问题分析</strong></li>\n</ul>\n<p>同样是<code>_post</code>文件夹里的md文件，渲染结果却不同，问题肯定处在markdown文件内部，我仔细对比了官方参考的<code>Hello World</code>文章与我的文章，发现了问题所在：<strong style = \"color:red\">原来我的文章内的标题都是用HTML格式写的，而官方文章都是用markdown语法写的</strong>，即：</p>\n<p>我的摘要：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;摘要&lt;/h3&gt;</span><br></pre></td></tr></table></figure>\n\n<p>官方的摘要：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">### 摘要</span></span><br></pre></td></tr></table></figure>\n\n<p>markdown里写的是<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>,那hexo当然要原封不动地渲染为<code>&lt;h3&gt;摘要&lt;/h3&gt;</code> , 难不成还修改你的HTML代码？\t被自己傻到了:sweat_smile:</p>\n<ul>\n<li><strong>解决方案</strong></li>\n</ul>\n<p>把markdown源文件修改即可，即<code>&lt;h3&gt;摘要&lt;/h3&gt;</code>改成<code>### 摘要</code></p>"},{"title":"流畅的Python","abbrlink":"32ffb807","date":"2024-03-06T01:02:17.000Z","_content":"\n《流畅的Python》读书笔记\n\n<!-- more -->\n\n### 第一章 Python数据模型\n\n```python\nimport collections\nfrom random import choice\nCard = collections.namedtuple('Card' , ['rank' , 'suit'])\nclass FrenchDeck:\n    ranks = [str(n) for n in range(2,11)] + list('JQKA')\n    suits  = 'spades diamonds clubs hearts'.split()\n    \n    def __init__(self):\n        self._cards = [Card(rank , suit) for rank in self.ranks \n                                         for suit in self.suits]\n    def __len__(self):\n        return len(self._cards)\n    def __getitem__(self,position):\n        return self._cards[position]\n    \nif __name__ == '__main__':\n    deck = FrenchDeck()\n    print(len(deck))\n    print(deck[-1])\n    print(deck[:3])\n    for i in range(10):\n        print(choice(deck))\n```\n\n- `namedtuple`\n\n> In Python, NamedTuple is present inside the collections module. It provides a way to create simple, lightweight data structures similar to a class, but without the overhead of defining a full class. Like dictionaries, they contain keys that are hashed to a particular value. On the contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.\n\n[Namedtuple in Python - GeeksforGeeks](https://www.geeksforgeeks.org/namedtuple-in-python/)\n\n划重点:①一个轻量的数据结构类；②相比于字典，还有下标索引的功能。\n\n**序列协议:**\n\n- 在 Python 中，序列是一种通用的数据结构，可以包含多个元素，并且支持**迭代**、**索引**和**切片**操作。\n- 序列协议定义了一组**特殊方法**，例如 `__len__` 和 `__getitem__`，用于使对象表现得像序列一样。\n- 如果一个类实现了这些方法，它的**实例**就可以像**列表**、**字符串**或**元组**一样进行操作。\n\n`FrenchDeck`类中实现了`__len__`方法后，对实例化类`deck`执行`len(deck)`时，实际上调用的是`deck.__len__(self)` ; 同理，对`deck`执行切片、下标索引时实际调用的是`__getitem__`方法。\n\n**sorted**:\n\n```python\nfor card in sorted(deck , key=card_value):\n        print(card)\n```\n\n其中`card_value`不需要传入参数`card` , `sorted`会自动将`deck`中每一个`card`传入`key`中,不需要显式传参。\n\n\n\n```python\nfrom math import sqrt\nclass Vector:\n    def __init__(self , x=0 , y=0):\n        self.x = x\n        self.y = y\n    def __repr__(self) -> str:\n        return 'Vector(%r,%r)'%(self.x , self.y)\n    def __abs__(self):\n        return sqrt(self.x**2 + self.y**2)\n    def __bool__(self):\n        return bool(self.x or self.y)\n    def __add__(self , other):\n        return Vector(self.x+other.x , self.y+other.y)\n    def __mul__(self , scalar):\n        return Vector(self.x*scalar , self.y*scalar) \nif __name__ == '__main__':\n    v1 = Vector(3,4)\n    v2 = Vector(2,2)\n    v3 = Vector(0,0)\n    print(v1+v2)\n    print(v1*2)\n    print(abs(v1))\n    print(bool(v3))\n```\n\n### 第二章 数据结构\n\n**列表推导与生成器表达式**\n\n```python\nif __name__ == '__main__':\n    colors = ['black', 'white']\n    sizes = ['S', 'M', 'L']\n    tshirt = [(color,size) for color in colors\n                            for size in sizes]\n    print(tshirt)\n    symbols = '$¢£¥€¤'\n    a = list(ord(symbol) for symbol in symbols if ord(symbol) > 127)\n    b = [ ord(symbol) for symbol in symbols if ord(symbol) > 127 ]\n    print(a , b)\n```\n\n> 虽然也可以用列表推导来初始化元组、数组或其他序列类型，但是生成\n> 器表达式是更好的选择。这是因为生成器表达式背后遵守了迭代器协\n> 议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这\n> 个列表传递到某个构造函数里。前面那种方式显然能够节省内存。\n\n**元组**\n\n```python\nif __name__ == '__main__':\n    lax_coordinates = (33.9425, -118.408056)\n    city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)\n    traveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'),('ESP', 'XDA205856')]\n    for passport in sorted(traveler_ids):\n        print('%s/%s' % passport)\n```\n\n> 我们把元组 ('Tokyo', 2003, 32450, 0.66, 8014) 里\n> 的元素分别赋值给变量 city、year、pop、chg 和 area，而这所有的\n> 赋值我们只用一行声明就写完了。同样，在后面一行中，一个 % 运算符\n> 就把 passport 元组里的元素对应到了 print 函数的格式字符串空档\n> 中。这两个都是对元组拆包的应用。\n\n不使用中间变量交换两个变量的值\n\n```python\na , b = b , a\n```\n\n实际此处涉及到元组的解包:python首先解析右值，组成元组(b,a),再解包赋值给a,b\n\n***运算符**\n\n```python\ndef devmode(a , b):\n    return (a//b , a%b)\nt = (12,7)\nprint(devmode(*t))\na , b , *_ = range(5)\nprint(a,b,_)\n```\n\n**嵌套元组**\n\n```python\nif __name__ == '__main__':\n    metro_areas = [\n    ('Tokyo','JP',36.933,(35.689722,139.691667)), \n    ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),\n    ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),\n    ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),\n    ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)),\n    ]\n    print('{:15} | {:^9} | {:^9}'.format('', 'lat.', 'long.'))\n    fmt = '{:15} | {:9.4f} | {:9.4f}'\n    for name, cc, pop, (latitude, longitude) in metro_areas:\n        if longitude <= 0:\n            print(fmt.format(name, latitude, longitude))\n```\n\n`{:15}`表示占15格 ， `{:^9}`表示占9格，字符串居中 ， `{:>9}`右对齐占9格，`{:9.4f}`占9格，保留四位小数的浮点数\n\n\n\n**具名元组collections.namedtuple**\n\n```python\nfrom collections import namedtuple\nif __name__ == '__main__':\n    city = namedtuple('city' , ['name' , 'country' , 'pop' , 'coordinates'])\n    tokyo = city('tokyo' , 'Japan' , '36.933' , (35,139))\n    print(tokyo.pop , tokyo.coordinates)\n\n    print(city._fields)\n    delhi_data = ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889))\n    delhi = city._make(delhi_data)\n    print(delhi._asdict)\n```\n\n`._fields`返回具名元素所有的字段名称\n\n`._make`支持以**元组(或列表)**创建具名元组\n\n`._asdict`把具名元组以 collections.OrderedDict 的形式返回，我们可以利用它来把元组里的信息友好地呈现出来。\n\n\n\n**切片**\n\n```python\ns = 'bicycle'\nprint(s[::3] , s[::-1] , s[::-2])\nprint(s[1:5:2] , s[5:1:-2])\n```\n\n`start:stop:step`    `step`为负值表示反向切片\n\n**对序列使用***\n\n```python\nif __name__ == '__main__':\n    l = [1,2,3]\n    print(l * 3 , 3 * 'abc')\n    board = [['_']*3 for i in range(3)]\n    print(board)\n    board[1][2] = 'X'\n    print(board)\n    board_ = [['_']*3]*3\n    board_[1][2] = 'X'\n    print(board_)\n\n\n```\n\n```shell\n$ python chapter2.py \n[1, 2, 3, 1, 2, 3, 1, 2, 3] abcabcabc\n[['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']]\n[['_', '_', '_'], ['_', '_', 'X'], ['_', '_', '_']]\n[['_', '_', 'X'], ['_', '_', 'X'], ['_', '_', 'X']]\n\n```\n\n`board_ = [['_']*3]*3`  这种方法创建了一个包含三个引用的列表，修改其中一个列表，其他两个列表都会变化。\n\n\n\n### 第三章 字典和集合\n\n**字典初始化**\n\n```python\nif __name__ == '__main__':\n    a = dict(one=1, two=2, three=3)\n    b = {'one': 1, 'two': 2, 'three': 3}\n    c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n    d = dict([('two', 2), ('one', 1), ('three', 3)])\n    e = dict({'three': 3, 'one': 1, 'two': 2})\n    print(a == b == c == d == e)#以上五种字典初始化方式等价\n\n```\n\n**字典推导**\n\n```python\nDIAL_CODES = [(86, 'China'),(91, 'India'),(1, 'United States'),(62, 'Indonesia'),(55, 'Brazil'),(92, 'Pakistan'),(880, 'Bangladesh'),(234, 'Nigeria'),(7, 'Russia'),(81, 'Japan')]\ncountry_code = {country : code for code,country in DIAL_CODES if code > 66}\nprint(country_code)\n\n```\n\n**集合**\n\n```python\nif __name__ == '__main__':\n    l = [1,2,3,4,5,6,7,1,2,3]\n    s = set(l) \n    print(s)    \n\n    s2 = {4,6,9}\n    print(s&s2)\n    print(s|s2)\n    print(s-s2)\n\n    s3 = set()\n    s3.add(1)\n    # s3.pop()\n    print(s3)\n\n```\n\n`s = set(l)`会将列表`l`中元素去重\n\n`s&s2`求交集，`s|s2`求并集，`s-s2`求补集","source":"_posts/流畅的Python.md","raw":"---\ntitle: 流畅的Python\ntags: Python\nabbrlink: 32ffb807\ndate: 2024-03-06 09:02:17\n---\n\n《流畅的Python》读书笔记\n\n<!-- more -->\n\n### 第一章 Python数据模型\n\n```python\nimport collections\nfrom random import choice\nCard = collections.namedtuple('Card' , ['rank' , 'suit'])\nclass FrenchDeck:\n    ranks = [str(n) for n in range(2,11)] + list('JQKA')\n    suits  = 'spades diamonds clubs hearts'.split()\n    \n    def __init__(self):\n        self._cards = [Card(rank , suit) for rank in self.ranks \n                                         for suit in self.suits]\n    def __len__(self):\n        return len(self._cards)\n    def __getitem__(self,position):\n        return self._cards[position]\n    \nif __name__ == '__main__':\n    deck = FrenchDeck()\n    print(len(deck))\n    print(deck[-1])\n    print(deck[:3])\n    for i in range(10):\n        print(choice(deck))\n```\n\n- `namedtuple`\n\n> In Python, NamedTuple is present inside the collections module. It provides a way to create simple, lightweight data structures similar to a class, but without the overhead of defining a full class. Like dictionaries, they contain keys that are hashed to a particular value. On the contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.\n\n[Namedtuple in Python - GeeksforGeeks](https://www.geeksforgeeks.org/namedtuple-in-python/)\n\n划重点:①一个轻量的数据结构类；②相比于字典，还有下标索引的功能。\n\n**序列协议:**\n\n- 在 Python 中，序列是一种通用的数据结构，可以包含多个元素，并且支持**迭代**、**索引**和**切片**操作。\n- 序列协议定义了一组**特殊方法**，例如 `__len__` 和 `__getitem__`，用于使对象表现得像序列一样。\n- 如果一个类实现了这些方法，它的**实例**就可以像**列表**、**字符串**或**元组**一样进行操作。\n\n`FrenchDeck`类中实现了`__len__`方法后，对实例化类`deck`执行`len(deck)`时，实际上调用的是`deck.__len__(self)` ; 同理，对`deck`执行切片、下标索引时实际调用的是`__getitem__`方法。\n\n**sorted**:\n\n```python\nfor card in sorted(deck , key=card_value):\n        print(card)\n```\n\n其中`card_value`不需要传入参数`card` , `sorted`会自动将`deck`中每一个`card`传入`key`中,不需要显式传参。\n\n\n\n```python\nfrom math import sqrt\nclass Vector:\n    def __init__(self , x=0 , y=0):\n        self.x = x\n        self.y = y\n    def __repr__(self) -> str:\n        return 'Vector(%r,%r)'%(self.x , self.y)\n    def __abs__(self):\n        return sqrt(self.x**2 + self.y**2)\n    def __bool__(self):\n        return bool(self.x or self.y)\n    def __add__(self , other):\n        return Vector(self.x+other.x , self.y+other.y)\n    def __mul__(self , scalar):\n        return Vector(self.x*scalar , self.y*scalar) \nif __name__ == '__main__':\n    v1 = Vector(3,4)\n    v2 = Vector(2,2)\n    v3 = Vector(0,0)\n    print(v1+v2)\n    print(v1*2)\n    print(abs(v1))\n    print(bool(v3))\n```\n\n### 第二章 数据结构\n\n**列表推导与生成器表达式**\n\n```python\nif __name__ == '__main__':\n    colors = ['black', 'white']\n    sizes = ['S', 'M', 'L']\n    tshirt = [(color,size) for color in colors\n                            for size in sizes]\n    print(tshirt)\n    symbols = '$¢£¥€¤'\n    a = list(ord(symbol) for symbol in symbols if ord(symbol) > 127)\n    b = [ ord(symbol) for symbol in symbols if ord(symbol) > 127 ]\n    print(a , b)\n```\n\n> 虽然也可以用列表推导来初始化元组、数组或其他序列类型，但是生成\n> 器表达式是更好的选择。这是因为生成器表达式背后遵守了迭代器协\n> 议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这\n> 个列表传递到某个构造函数里。前面那种方式显然能够节省内存。\n\n**元组**\n\n```python\nif __name__ == '__main__':\n    lax_coordinates = (33.9425, -118.408056)\n    city, year, pop, chg, area = ('Tokyo', 2003, 32450, 0.66, 8014)\n    traveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'),('ESP', 'XDA205856')]\n    for passport in sorted(traveler_ids):\n        print('%s/%s' % passport)\n```\n\n> 我们把元组 ('Tokyo', 2003, 32450, 0.66, 8014) 里\n> 的元素分别赋值给变量 city、year、pop、chg 和 area，而这所有的\n> 赋值我们只用一行声明就写完了。同样，在后面一行中，一个 % 运算符\n> 就把 passport 元组里的元素对应到了 print 函数的格式字符串空档\n> 中。这两个都是对元组拆包的应用。\n\n不使用中间变量交换两个变量的值\n\n```python\na , b = b , a\n```\n\n实际此处涉及到元组的解包:python首先解析右值，组成元组(b,a),再解包赋值给a,b\n\n***运算符**\n\n```python\ndef devmode(a , b):\n    return (a//b , a%b)\nt = (12,7)\nprint(devmode(*t))\na , b , *_ = range(5)\nprint(a,b,_)\n```\n\n**嵌套元组**\n\n```python\nif __name__ == '__main__':\n    metro_areas = [\n    ('Tokyo','JP',36.933,(35.689722,139.691667)), \n    ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),\n    ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),\n    ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),\n    ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)),\n    ]\n    print('{:15} | {:^9} | {:^9}'.format('', 'lat.', 'long.'))\n    fmt = '{:15} | {:9.4f} | {:9.4f}'\n    for name, cc, pop, (latitude, longitude) in metro_areas:\n        if longitude <= 0:\n            print(fmt.format(name, latitude, longitude))\n```\n\n`{:15}`表示占15格 ， `{:^9}`表示占9格，字符串居中 ， `{:>9}`右对齐占9格，`{:9.4f}`占9格，保留四位小数的浮点数\n\n\n\n**具名元组collections.namedtuple**\n\n```python\nfrom collections import namedtuple\nif __name__ == '__main__':\n    city = namedtuple('city' , ['name' , 'country' , 'pop' , 'coordinates'])\n    tokyo = city('tokyo' , 'Japan' , '36.933' , (35,139))\n    print(tokyo.pop , tokyo.coordinates)\n\n    print(city._fields)\n    delhi_data = ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889))\n    delhi = city._make(delhi_data)\n    print(delhi._asdict)\n```\n\n`._fields`返回具名元素所有的字段名称\n\n`._make`支持以**元组(或列表)**创建具名元组\n\n`._asdict`把具名元组以 collections.OrderedDict 的形式返回，我们可以利用它来把元组里的信息友好地呈现出来。\n\n\n\n**切片**\n\n```python\ns = 'bicycle'\nprint(s[::3] , s[::-1] , s[::-2])\nprint(s[1:5:2] , s[5:1:-2])\n```\n\n`start:stop:step`    `step`为负值表示反向切片\n\n**对序列使用***\n\n```python\nif __name__ == '__main__':\n    l = [1,2,3]\n    print(l * 3 , 3 * 'abc')\n    board = [['_']*3 for i in range(3)]\n    print(board)\n    board[1][2] = 'X'\n    print(board)\n    board_ = [['_']*3]*3\n    board_[1][2] = 'X'\n    print(board_)\n\n\n```\n\n```shell\n$ python chapter2.py \n[1, 2, 3, 1, 2, 3, 1, 2, 3] abcabcabc\n[['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']]\n[['_', '_', '_'], ['_', '_', 'X'], ['_', '_', '_']]\n[['_', '_', 'X'], ['_', '_', 'X'], ['_', '_', 'X']]\n\n```\n\n`board_ = [['_']*3]*3`  这种方法创建了一个包含三个引用的列表，修改其中一个列表，其他两个列表都会变化。\n\n\n\n### 第三章 字典和集合\n\n**字典初始化**\n\n```python\nif __name__ == '__main__':\n    a = dict(one=1, two=2, three=3)\n    b = {'one': 1, 'two': 2, 'three': 3}\n    c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n    d = dict([('two', 2), ('one', 1), ('three', 3)])\n    e = dict({'three': 3, 'one': 1, 'two': 2})\n    print(a == b == c == d == e)#以上五种字典初始化方式等价\n\n```\n\n**字典推导**\n\n```python\nDIAL_CODES = [(86, 'China'),(91, 'India'),(1, 'United States'),(62, 'Indonesia'),(55, 'Brazil'),(92, 'Pakistan'),(880, 'Bangladesh'),(234, 'Nigeria'),(7, 'Russia'),(81, 'Japan')]\ncountry_code = {country : code for code,country in DIAL_CODES if code > 66}\nprint(country_code)\n\n```\n\n**集合**\n\n```python\nif __name__ == '__main__':\n    l = [1,2,3,4,5,6,7,1,2,3]\n    s = set(l) \n    print(s)    \n\n    s2 = {4,6,9}\n    print(s&s2)\n    print(s|s2)\n    print(s-s2)\n\n    s3 = set()\n    s3.add(1)\n    # s3.pop()\n    print(s3)\n\n```\n\n`s = set(l)`会将列表`l`中元素去重\n\n`s&s2`求交集，`s|s2`求并集，`s-s2`求补集","slug":"流畅的Python","published":1,"updated":"2024-03-06T01:07:10.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dk001858te62dpaov3","content":"<p>《流畅的Python》读书笔记</p>\n<span id=\"more\"></span>\n\n<h3 id=\"第一章-Python数据模型\"><a href=\"#第一章-Python数据模型\" class=\"headerlink\" title=\"第一章 Python数据模型\"></a>第一章 Python数据模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice</span><br><span class=\"line\">Card = collections.namedtuple(<span class=\"string\">&#x27;Card&#x27;</span> , [<span class=\"string\">&#x27;rank&#x27;</span> , <span class=\"string\">&#x27;suit&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FrenchDeck</span>:</span><br><span class=\"line\">    ranks = [<span class=\"built_in\">str</span>(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">11</span>)] + <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;JQKA&#x27;</span>)</span><br><span class=\"line\">    suits  = <span class=\"string\">&#x27;spades diamonds clubs hearts&#x27;</span>.split()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._cards = [Card(rank , suit) <span class=\"keyword\">for</span> rank <span class=\"keyword\">in</span> self.ranks </span><br><span class=\"line\">                                         <span class=\"keyword\">for</span> suit <span class=\"keyword\">in</span> self.suits]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self._cards)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self,position</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards[position]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    deck = FrenchDeck()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(deck))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(deck[-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(deck[:<span class=\"number\">3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(choice(deck))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>namedtuple</code></li>\n</ul>\n<blockquote>\n<p>In Python, NamedTuple is present inside the collections module. It provides a way to create simple, lightweight data structures similar to a class, but without the overhead of defining a full class. Like dictionaries, they contain keys that are hashed to a particular value. On the contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.</p>\n</blockquote>\n<p><a href=\"https://www.geeksforgeeks.org/namedtuple-in-python/\">Namedtuple in Python - GeeksforGeeks</a></p>\n<p>划重点:①一个轻量的数据结构类；②相比于字典，还有下标索引的功能。</p>\n<p><strong>序列协议:</strong></p>\n<ul>\n<li>在 Python 中，序列是一种通用的数据结构，可以包含多个元素，并且支持<strong>迭代</strong>、<strong>索引</strong>和<strong>切片</strong>操作。</li>\n<li>序列协议定义了一组<strong>特殊方法</strong>，例如 <code>__len__</code> 和 <code>__getitem__</code>，用于使对象表现得像序列一样。</li>\n<li>如果一个类实现了这些方法，它的<strong>实例</strong>就可以像<strong>列表</strong>、<strong>字符串</strong>或<strong>元组</strong>一样进行操作。</li>\n</ul>\n<p><code>FrenchDeck</code>类中实现了<code>__len__</code>方法后，对实例化类<code>deck</code>执行<code>len(deck)</code>时，实际上调用的是<code>deck.__len__(self)</code> ; 同理，对<code>deck</code>执行切片、下标索引时实际调用的是<code>__getitem__</code>方法。</p>\n<p><strong>sorted</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(deck , key=card_value):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(card)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>card_value</code>不需要传入参数<code>card</code> , <code>sorted</code>会自动将<code>deck</code>中每一个<code>card</code>传入<code>key</code>中,不需要显式传参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self , x=<span class=\"number\">0</span> , y=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector(%r,%r)&#x27;</span>%(self.x , self.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__abs__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqrt(self.x**<span class=\"number\">2</span> + self.y**<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bool__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bool</span>(self.x <span class=\"keyword\">or</span> self.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self , other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x+other.x , self.y+other.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__mul__</span>(<span class=\"params\">self , scalar</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x*scalar , self.y*scalar) </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    v1 = Vector(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">    v2 = Vector(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    v3 = Vector(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v1+v2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v1*<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(v1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(v3))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二章-数据结构\"><a href=\"#第二章-数据结构\" class=\"headerlink\" title=\"第二章 数据结构\"></a>第二章 数据结构</h3><p><strong>列表推导与生成器表达式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    colors = [<span class=\"string\">&#x27;black&#x27;</span>, <span class=\"string\">&#x27;white&#x27;</span>]</span><br><span class=\"line\">    sizes = [<span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>]</span><br><span class=\"line\">    tshirt = [(color,size) <span class=\"keyword\">for</span> color <span class=\"keyword\">in</span> colors</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> sizes]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tshirt)</span><br><span class=\"line\">    symbols = <span class=\"string\">&#x27;$¢£¥€¤&#x27;</span></span><br><span class=\"line\">    a = <span class=\"built_in\">list</span>(<span class=\"built_in\">ord</span>(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(symbol) &gt; <span class=\"number\">127</span>)</span><br><span class=\"line\">    b = [ <span class=\"built_in\">ord</span>(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(symbol) &gt; <span class=\"number\">127</span> ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a , b)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虽然也可以用列表推导来初始化元组、数组或其他序列类型，但是生成<br>器表达式是更好的选择。这是因为生成器表达式背后遵守了迭代器协<br>议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这<br>个列表传递到某个构造函数里。前面那种方式显然能够节省内存。</p>\n</blockquote>\n<p><strong>元组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    lax_coordinates = (<span class=\"number\">33.9425</span>, -<span class=\"number\">118.408056</span>)</span><br><span class=\"line\">    city, year, pop, chg, area = (<span class=\"string\">&#x27;Tokyo&#x27;</span>, <span class=\"number\">2003</span>, <span class=\"number\">32450</span>, <span class=\"number\">0.66</span>, <span class=\"number\">8014</span>)</span><br><span class=\"line\">    traveler_ids = [(<span class=\"string\">&#x27;USA&#x27;</span>, <span class=\"string\">&#x27;31195855&#x27;</span>), (<span class=\"string\">&#x27;BRA&#x27;</span>, <span class=\"string\">&#x27;CE342567&#x27;</span>),(<span class=\"string\">&#x27;ESP&#x27;</span>, <span class=\"string\">&#x27;XDA205856&#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> passport <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(traveler_ids):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s/%s&#x27;</span> % passport)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们把元组 (‘Tokyo’, 2003, 32450, 0.66, 8014) 里<br>的元素分别赋值给变量 city、year、pop、chg 和 area，而这所有的<br>赋值我们只用一行声明就写完了。同样，在后面一行中，一个 % 运算符<br>就把 passport 元组里的元素对应到了 print 函数的格式字符串空档<br>中。这两个都是对元组拆包的应用。</p>\n</blockquote>\n<p>不使用中间变量交换两个变量的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a , b = b , a</span><br></pre></td></tr></table></figure>\n\n<p>实际此处涉及到元组的解包:python首先解析右值，组成元组(b,a),再解包赋值给a,b</p>\n<p>*<strong>运算符</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">devmode</span>(<span class=\"params\">a , b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a//b , a%b)</span><br><span class=\"line\">t = (<span class=\"number\">12</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(devmode(*t))</span><br><span class=\"line\">a , b , *_ = <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a,b,_)</span><br></pre></td></tr></table></figure>\n\n<p><strong>嵌套元组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    metro_areas = [</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Tokyo&#x27;</span>,<span class=\"string\">&#x27;JP&#x27;</span>,<span class=\"number\">36.933</span>,(<span class=\"number\">35.689722</span>,<span class=\"number\">139.691667</span>)), </span><br><span class=\"line\">    (<span class=\"string\">&#x27;Delhi NCR&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"number\">21.935</span>, (<span class=\"number\">28.613889</span>, <span class=\"number\">77.208889</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Mexico City&#x27;</span>, <span class=\"string\">&#x27;MX&#x27;</span>, <span class=\"number\">20.142</span>, (<span class=\"number\">19.433333</span>, -<span class=\"number\">99.133333</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;New York-Newark&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>, <span class=\"number\">20.104</span>, (<span class=\"number\">40.808611</span>, -<span class=\"number\">74.020386</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Sao Paulo&#x27;</span>, <span class=\"string\">&#x27;BR&#x27;</span>, <span class=\"number\">19.649</span>, (-<span class=\"number\">23.547778</span>, -<span class=\"number\">46.635833</span>)),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;:15&#125; | &#123;:^9&#125; | &#123;:^9&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;lat.&#x27;</span>, <span class=\"string\">&#x27;long.&#x27;</span>))</span><br><span class=\"line\">    fmt = <span class=\"string\">&#x27;&#123;:15&#125; | &#123;:9.4f&#125; | &#123;:9.4f&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name, cc, pop, (latitude, longitude) <span class=\"keyword\">in</span> metro_areas:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> longitude &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(name, latitude, longitude))</span><br></pre></td></tr></table></figure>\n\n<p><code>&#123;:15&#125;</code>表示占15格 ， <code>&#123;:^9&#125;</code>表示占9格，字符串居中 ， <code>&#123;:&gt;9&#125;</code>右对齐占9格，<code>&#123;:9.4f&#125;</code>占9格，保留四位小数的浮点数</p>\n<p><strong>具名元组collections.namedtuple</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    city = namedtuple(<span class=\"string\">&#x27;city&#x27;</span> , [<span class=\"string\">&#x27;name&#x27;</span> , <span class=\"string\">&#x27;country&#x27;</span> , <span class=\"string\">&#x27;pop&#x27;</span> , <span class=\"string\">&#x27;coordinates&#x27;</span>])</span><br><span class=\"line\">    tokyo = city(<span class=\"string\">&#x27;tokyo&#x27;</span> , <span class=\"string\">&#x27;Japan&#x27;</span> , <span class=\"string\">&#x27;36.933&#x27;</span> , (<span class=\"number\">35</span>,<span class=\"number\">139</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tokyo.pop , tokyo.coordinates)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(city._fields)</span><br><span class=\"line\">    delhi_data = (<span class=\"string\">&#x27;Delhi NCR&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"number\">21.935</span>, (<span class=\"number\">28.613889</span>, <span class=\"number\">77.208889</span>))</span><br><span class=\"line\">    delhi = city._make(delhi_data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(delhi._asdict)</span><br></pre></td></tr></table></figure>\n\n<p><code>._fields</code>返回具名元素所有的字段名称</p>\n<p><code>._make</code>支持以**元组(或列表)**创建具名元组</p>\n<p><code>._asdict</code>把具名元组以 collections.OrderedDict 的形式返回，我们可以利用它来把元组里的信息友好地呈现出来。</p>\n<p><strong>切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;bicycle&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s[::<span class=\"number\">3</span>] , s[::-<span class=\"number\">1</span>] , s[::-<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s[<span class=\"number\">1</span>:<span class=\"number\">5</span>:<span class=\"number\">2</span>] , s[<span class=\"number\">5</span>:<span class=\"number\">1</span>:-<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p><code>start:stop:step</code>    <code>step</code>为负值表示反向切片</p>\n<p><strong>对序列使用</strong>*</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(l * <span class=\"number\">3</span> , <span class=\"number\">3</span> * <span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    board = [[<span class=\"string\">&#x27;_&#x27;</span>]*<span class=\"number\">3</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board)</span><br><span class=\"line\">    board[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board)</span><br><span class=\"line\">    board_ = [[<span class=\"string\">&#x27;_&#x27;</span>]*<span class=\"number\">3</span>]*<span class=\"number\">3</span></span><br><span class=\"line\">    board_[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board_)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">python chapter2.py</span> </span><br><span class=\"line\">[1, 2, 3, 1, 2, 3, 1, 2, 3] abcabcabc</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>board_ = [[&#39;_&#39;]*3]*3</code>  这种方法创建了一个包含三个引用的列表，修改其中一个列表，其他两个列表都会变化。</p>\n<h3 id=\"第三章-字典和集合\"><a href=\"#第三章-字典和集合\" class=\"headerlink\" title=\"第三章 字典和集合\"></a>第三章 字典和集合</h3><p><strong>字典初始化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = <span class=\"built_in\">dict</span>(one=<span class=\"number\">1</span>, two=<span class=\"number\">2</span>, three=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = &#123;<span class=\"string\">&#x27;one&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;three&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    c = <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\">    d = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;two&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;three&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">    e = <span class=\"built_in\">dict</span>(&#123;<span class=\"string\">&#x27;three&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;one&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a == b == c == d == e)<span class=\"comment\">#以上五种字典初始化方式等价</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>字典推导</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIAL_CODES = [(<span class=\"number\">86</span>, <span class=\"string\">&#x27;China&#x27;</span>),(<span class=\"number\">91</span>, <span class=\"string\">&#x27;India&#x27;</span>),(<span class=\"number\">1</span>, <span class=\"string\">&#x27;United States&#x27;</span>),(<span class=\"number\">62</span>, <span class=\"string\">&#x27;Indonesia&#x27;</span>),(<span class=\"number\">55</span>, <span class=\"string\">&#x27;Brazil&#x27;</span>),(<span class=\"number\">92</span>, <span class=\"string\">&#x27;Pakistan&#x27;</span>),(<span class=\"number\">880</span>, <span class=\"string\">&#x27;Bangladesh&#x27;</span>),(<span class=\"number\">234</span>, <span class=\"string\">&#x27;Nigeria&#x27;</span>),(<span class=\"number\">7</span>, <span class=\"string\">&#x27;Russia&#x27;</span>),(<span class=\"number\">81</span>, <span class=\"string\">&#x27;Japan&#x27;</span>)]</span><br><span class=\"line\">country_code = &#123;country : code <span class=\"keyword\">for</span> code,country <span class=\"keyword\">in</span> DIAL_CODES <span class=\"keyword\">if</span> code &gt; <span class=\"number\">66</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country_code)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>集合</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    s = <span class=\"built_in\">set</span>(l) </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)    </span><br><span class=\"line\"></span><br><span class=\"line\">    s2 = &#123;<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s&amp;s2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s|s2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s-s2)</span><br><span class=\"line\"></span><br><span class=\"line\">    s3 = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    s3.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># s3.pop()</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s3)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>s = set(l)</code>会将列表<code>l</code>中元素去重</p>\n<p><code>s&amp;s2</code>求交集，<code>s|s2</code>求并集，<code>s-s2</code>求补集</p>\n","site":{"data":{}},"length":6331,"excerpt":"<p>《流畅的Python》读书笔记</p>","more":"<h3 id=\"第一章-Python数据模型\"><a href=\"#第一章-Python数据模型\" class=\"headerlink\" title=\"第一章 Python数据模型\"></a>第一章 Python数据模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice</span><br><span class=\"line\">Card = collections.namedtuple(<span class=\"string\">&#x27;Card&#x27;</span> , [<span class=\"string\">&#x27;rank&#x27;</span> , <span class=\"string\">&#x27;suit&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FrenchDeck</span>:</span><br><span class=\"line\">    ranks = [<span class=\"built_in\">str</span>(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">11</span>)] + <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;JQKA&#x27;</span>)</span><br><span class=\"line\">    suits  = <span class=\"string\">&#x27;spades diamonds clubs hearts&#x27;</span>.split()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self._cards = [Card(rank , suit) <span class=\"keyword\">for</span> rank <span class=\"keyword\">in</span> self.ranks </span><br><span class=\"line\">                                         <span class=\"keyword\">for</span> suit <span class=\"keyword\">in</span> self.suits]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__len__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self._cards)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self,position</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards[position]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    deck = FrenchDeck()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(deck))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(deck[-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(deck[:<span class=\"number\">3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(choice(deck))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>namedtuple</code></li>\n</ul>\n<blockquote>\n<p>In Python, NamedTuple is present inside the collections module. It provides a way to create simple, lightweight data structures similar to a class, but without the overhead of defining a full class. Like dictionaries, they contain keys that are hashed to a particular value. On the contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.</p>\n</blockquote>\n<p><a href=\"https://www.geeksforgeeks.org/namedtuple-in-python/\">Namedtuple in Python - GeeksforGeeks</a></p>\n<p>划重点:①一个轻量的数据结构类；②相比于字典，还有下标索引的功能。</p>\n<p><strong>序列协议:</strong></p>\n<ul>\n<li>在 Python 中，序列是一种通用的数据结构，可以包含多个元素，并且支持<strong>迭代</strong>、<strong>索引</strong>和<strong>切片</strong>操作。</li>\n<li>序列协议定义了一组<strong>特殊方法</strong>，例如 <code>__len__</code> 和 <code>__getitem__</code>，用于使对象表现得像序列一样。</li>\n<li>如果一个类实现了这些方法，它的<strong>实例</strong>就可以像<strong>列表</strong>、<strong>字符串</strong>或<strong>元组</strong>一样进行操作。</li>\n</ul>\n<p><code>FrenchDeck</code>类中实现了<code>__len__</code>方法后，对实例化类<code>deck</code>执行<code>len(deck)</code>时，实际上调用的是<code>deck.__len__(self)</code> ; 同理，对<code>deck</code>执行切片、下标索引时实际调用的是<code>__getitem__</code>方法。</p>\n<p><strong>sorted</strong>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(deck , key=card_value):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(card)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>card_value</code>不需要传入参数<code>card</code> , <code>sorted</code>会自动将<code>deck</code>中每一个<code>card</code>传入<code>key</code>中,不需要显式传参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self , x=<span class=\"number\">0</span> , y=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__repr__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector(%r,%r)&#x27;</span>%(self.x , self.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__abs__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqrt(self.x**<span class=\"number\">2</span> + self.y**<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__bool__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bool</span>(self.x <span class=\"keyword\">or</span> self.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__add__</span>(<span class=\"params\">self , other</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x+other.x , self.y+other.y)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__mul__</span>(<span class=\"params\">self , scalar</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x*scalar , self.y*scalar) </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    v1 = Vector(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">    v2 = Vector(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    v3 = Vector(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v1+v2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v1*<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(v1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(v3))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二章-数据结构\"><a href=\"#第二章-数据结构\" class=\"headerlink\" title=\"第二章 数据结构\"></a>第二章 数据结构</h3><p><strong>列表推导与生成器表达式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    colors = [<span class=\"string\">&#x27;black&#x27;</span>, <span class=\"string\">&#x27;white&#x27;</span>]</span><br><span class=\"line\">    sizes = [<span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>]</span><br><span class=\"line\">    tshirt = [(color,size) <span class=\"keyword\">for</span> color <span class=\"keyword\">in</span> colors</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> sizes]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tshirt)</span><br><span class=\"line\">    symbols = <span class=\"string\">&#x27;$¢£¥€¤&#x27;</span></span><br><span class=\"line\">    a = <span class=\"built_in\">list</span>(<span class=\"built_in\">ord</span>(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(symbol) &gt; <span class=\"number\">127</span>)</span><br><span class=\"line\">    b = [ <span class=\"built_in\">ord</span>(symbol) <span class=\"keyword\">for</span> symbol <span class=\"keyword\">in</span> symbols <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(symbol) &gt; <span class=\"number\">127</span> ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a , b)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虽然也可以用列表推导来初始化元组、数组或其他序列类型，但是生成<br>器表达式是更好的选择。这是因为生成器表达式背后遵守了迭代器协<br>议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这<br>个列表传递到某个构造函数里。前面那种方式显然能够节省内存。</p>\n</blockquote>\n<p><strong>元组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    lax_coordinates = (<span class=\"number\">33.9425</span>, -<span class=\"number\">118.408056</span>)</span><br><span class=\"line\">    city, year, pop, chg, area = (<span class=\"string\">&#x27;Tokyo&#x27;</span>, <span class=\"number\">2003</span>, <span class=\"number\">32450</span>, <span class=\"number\">0.66</span>, <span class=\"number\">8014</span>)</span><br><span class=\"line\">    traveler_ids = [(<span class=\"string\">&#x27;USA&#x27;</span>, <span class=\"string\">&#x27;31195855&#x27;</span>), (<span class=\"string\">&#x27;BRA&#x27;</span>, <span class=\"string\">&#x27;CE342567&#x27;</span>),(<span class=\"string\">&#x27;ESP&#x27;</span>, <span class=\"string\">&#x27;XDA205856&#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> passport <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(traveler_ids):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;%s/%s&#x27;</span> % passport)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我们把元组 (‘Tokyo’, 2003, 32450, 0.66, 8014) 里<br>的元素分别赋值给变量 city、year、pop、chg 和 area，而这所有的<br>赋值我们只用一行声明就写完了。同样，在后面一行中，一个 % 运算符<br>就把 passport 元组里的元素对应到了 print 函数的格式字符串空档<br>中。这两个都是对元组拆包的应用。</p>\n</blockquote>\n<p>不使用中间变量交换两个变量的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a , b = b , a</span><br></pre></td></tr></table></figure>\n\n<p>实际此处涉及到元组的解包:python首先解析右值，组成元组(b,a),再解包赋值给a,b</p>\n<p>*<strong>运算符</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">devmode</span>(<span class=\"params\">a , b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a//b , a%b)</span><br><span class=\"line\">t = (<span class=\"number\">12</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(devmode(*t))</span><br><span class=\"line\">a , b , *_ = <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a,b,_)</span><br></pre></td></tr></table></figure>\n\n<p><strong>嵌套元组</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    metro_areas = [</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Tokyo&#x27;</span>,<span class=\"string\">&#x27;JP&#x27;</span>,<span class=\"number\">36.933</span>,(<span class=\"number\">35.689722</span>,<span class=\"number\">139.691667</span>)), </span><br><span class=\"line\">    (<span class=\"string\">&#x27;Delhi NCR&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"number\">21.935</span>, (<span class=\"number\">28.613889</span>, <span class=\"number\">77.208889</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Mexico City&#x27;</span>, <span class=\"string\">&#x27;MX&#x27;</span>, <span class=\"number\">20.142</span>, (<span class=\"number\">19.433333</span>, -<span class=\"number\">99.133333</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;New York-Newark&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>, <span class=\"number\">20.104</span>, (<span class=\"number\">40.808611</span>, -<span class=\"number\">74.020386</span>)),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;Sao Paulo&#x27;</span>, <span class=\"string\">&#x27;BR&#x27;</span>, <span class=\"number\">19.649</span>, (-<span class=\"number\">23.547778</span>, -<span class=\"number\">46.635833</span>)),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;:15&#125; | &#123;:^9&#125; | &#123;:^9&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;lat.&#x27;</span>, <span class=\"string\">&#x27;long.&#x27;</span>))</span><br><span class=\"line\">    fmt = <span class=\"string\">&#x27;&#123;:15&#125; | &#123;:9.4f&#125; | &#123;:9.4f&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name, cc, pop, (latitude, longitude) <span class=\"keyword\">in</span> metro_areas:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> longitude &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(name, latitude, longitude))</span><br></pre></td></tr></table></figure>\n\n<p><code>&#123;:15&#125;</code>表示占15格 ， <code>&#123;:^9&#125;</code>表示占9格，字符串居中 ， <code>&#123;:&gt;9&#125;</code>右对齐占9格，<code>&#123;:9.4f&#125;</code>占9格，保留四位小数的浮点数</p>\n<p><strong>具名元组collections.namedtuple</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    city = namedtuple(<span class=\"string\">&#x27;city&#x27;</span> , [<span class=\"string\">&#x27;name&#x27;</span> , <span class=\"string\">&#x27;country&#x27;</span> , <span class=\"string\">&#x27;pop&#x27;</span> , <span class=\"string\">&#x27;coordinates&#x27;</span>])</span><br><span class=\"line\">    tokyo = city(<span class=\"string\">&#x27;tokyo&#x27;</span> , <span class=\"string\">&#x27;Japan&#x27;</span> , <span class=\"string\">&#x27;36.933&#x27;</span> , (<span class=\"number\">35</span>,<span class=\"number\">139</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tokyo.pop , tokyo.coordinates)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(city._fields)</span><br><span class=\"line\">    delhi_data = (<span class=\"string\">&#x27;Delhi NCR&#x27;</span>, <span class=\"string\">&#x27;IN&#x27;</span>, <span class=\"number\">21.935</span>, (<span class=\"number\">28.613889</span>, <span class=\"number\">77.208889</span>))</span><br><span class=\"line\">    delhi = city._make(delhi_data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(delhi._asdict)</span><br></pre></td></tr></table></figure>\n\n<p><code>._fields</code>返回具名元素所有的字段名称</p>\n<p><code>._make</code>支持以**元组(或列表)**创建具名元组</p>\n<p><code>._asdict</code>把具名元组以 collections.OrderedDict 的形式返回，我们可以利用它来把元组里的信息友好地呈现出来。</p>\n<p><strong>切片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;bicycle&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s[::<span class=\"number\">3</span>] , s[::-<span class=\"number\">1</span>] , s[::-<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s[<span class=\"number\">1</span>:<span class=\"number\">5</span>:<span class=\"number\">2</span>] , s[<span class=\"number\">5</span>:<span class=\"number\">1</span>:-<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p><code>start:stop:step</code>    <code>step</code>为负值表示反向切片</p>\n<p><strong>对序列使用</strong>*</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(l * <span class=\"number\">3</span> , <span class=\"number\">3</span> * <span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">    board = [[<span class=\"string\">&#x27;_&#x27;</span>]*<span class=\"number\">3</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board)</span><br><span class=\"line\">    board[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board)</span><br><span class=\"line\">    board_ = [[<span class=\"string\">&#x27;_&#x27;</span>]*<span class=\"number\">3</span>]*<span class=\"number\">3</span></span><br><span class=\"line\">    board_[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&#x27;X&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(board_)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">python chapter2.py</span> </span><br><span class=\"line\">[1, 2, 3, 1, 2, 3, 1, 2, 3] abcabcabc</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class=\"line\">[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>board_ = [[&#39;_&#39;]*3]*3</code>  这种方法创建了一个包含三个引用的列表，修改其中一个列表，其他两个列表都会变化。</p>\n<h3 id=\"第三章-字典和集合\"><a href=\"#第三章-字典和集合\" class=\"headerlink\" title=\"第三章 字典和集合\"></a>第三章 字典和集合</h3><p><strong>字典初始化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = <span class=\"built_in\">dict</span>(one=<span class=\"number\">1</span>, two=<span class=\"number\">2</span>, three=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = &#123;<span class=\"string\">&#x27;one&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;three&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    c = <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br><span class=\"line\">    d = <span class=\"built_in\">dict</span>([(<span class=\"string\">&#x27;two&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;three&#x27;</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\">    e = <span class=\"built_in\">dict</span>(&#123;<span class=\"string\">&#x27;three&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;one&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;two&#x27;</span>: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a == b == c == d == e)<span class=\"comment\">#以上五种字典初始化方式等价</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>字典推导</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIAL_CODES = [(<span class=\"number\">86</span>, <span class=\"string\">&#x27;China&#x27;</span>),(<span class=\"number\">91</span>, <span class=\"string\">&#x27;India&#x27;</span>),(<span class=\"number\">1</span>, <span class=\"string\">&#x27;United States&#x27;</span>),(<span class=\"number\">62</span>, <span class=\"string\">&#x27;Indonesia&#x27;</span>),(<span class=\"number\">55</span>, <span class=\"string\">&#x27;Brazil&#x27;</span>),(<span class=\"number\">92</span>, <span class=\"string\">&#x27;Pakistan&#x27;</span>),(<span class=\"number\">880</span>, <span class=\"string\">&#x27;Bangladesh&#x27;</span>),(<span class=\"number\">234</span>, <span class=\"string\">&#x27;Nigeria&#x27;</span>),(<span class=\"number\">7</span>, <span class=\"string\">&#x27;Russia&#x27;</span>),(<span class=\"number\">81</span>, <span class=\"string\">&#x27;Japan&#x27;</span>)]</span><br><span class=\"line\">country_code = &#123;country : code <span class=\"keyword\">for</span> code,country <span class=\"keyword\">in</span> DIAL_CODES <span class=\"keyword\">if</span> code &gt; <span class=\"number\">66</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(country_code)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>集合</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    s = <span class=\"built_in\">set</span>(l) </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s)    </span><br><span class=\"line\"></span><br><span class=\"line\">    s2 = &#123;<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s&amp;s2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s|s2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s-s2)</span><br><span class=\"line\"></span><br><span class=\"line\">    s3 = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">    s3.add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># s3.pop()</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s3)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>s = set(l)</code>会将列表<code>l</code>中元素去重</p>\n<p><code>s&amp;s2</code>求交集，<code>s|s2</code>求并集，<code>s-s2</code>求补集</p>"},{"title":"重学链表","abbrlink":"14fa845f","date":"2021-10-24T07:45:08.000Z","_content":"\n最近又重学了一遍链表，记得大一学链表时也是很迷，指来指去没指明白哈哈哈。这一次学也是通透多了。\n\n<!-- more -->\n\n## 单链表\n\n### 基本概念\n\n#### 定义\n\n```cpp\ntypedef struct Lnode{\n    int data ;\n    struct Lnode *next ;\n}Lnode , *Linklist ;\n```\n\n* 结构体内两个元素`data` 、`next`\n* `data`是`int`型，可修改为其他，例如`char`、`double`\n* `next`是类型为`struct Lnode`的指针，可指向`struct Lnode`这种结构体，在链表中`next`指向下一个结点，例如`1号结点的next` = `2号结点的地址`\n* `Lnode`是`struct Lnode`的别名 ， `Linklist` 是`struct Lnode *`的别名\n\n#### 声明一个链表\n\n```cpp\nLinklist HEAD = new Lnode ;\nHEAD->next = NULL ;\n```\n\n* `Linklist HEAD`与`Lnode *HEAD`等价，但我们一般用`Linklist HEAD`来定义链表(定义链表头结点，链表头结点即代表该链表)。用`Lnode *p`定义一个结点\n* `Linklist HEAD = new Lnode ;`为头结点(头指针)分配一个大小为`Lnode`的空间。\n* 目前链表为空，头指针指向`NULL`.`HEAD->next`表示`HEAD`下一个结点地址。\n* 头指针`HEAD`不能严格算一个结点,`HEAD->data`未定义。\n\n**加入结点**\n\n```cpp\nLnode *p = new Lnode ;//第一个结点p\ncin >> p->data ; //输入该结点存储的数据data\nHEAD->next = p ;\np->next = NULL ;\n```\n\n* **再加一个结点**\n\n```cpp\nLnode *q = new Lnode ;//第二个结点q\ncin >> q->data ;\np->next = q ;\nq->next = NULL ;\n```\n\n* 注意最后一个结点的`next`应该指向`NULL`，否则`q->next`这个野指针无穷无尽。\n\n```cpp\n#include<iostream>\nusing namespace std ;\nconst int N = 100010 ;\nint e[N] , ne[N] , idx , head ;\nvoid init(){\n    head = -1 ;\n    idx = 0 ;\n}\nvoid add_to_head(int x){\n    e[idx] = x ;\n    ne[idx] = head ;\n    head = idx ;\n    idx++ ;\n}\nvoid add(int k , int x ){\n    e[idx] = x ;\n    ne[idx] = ne[k] ;\n    ne[k] = idx ;\n    idx++ ;\n}\nvoid remove(int k){\n    ne[k] = ne[ne[k]] ;   \n}\nvoid print_list(){\n    for(int i = head ; i != -1 ; i = ne[i]) cout << e[i] << ' ' ;\n}\nint main(){\n    int M , k , x ;\n    char operation ;\n    init() ;\n    cin >> M ;\n    while(M--){\n        cin >> operation ;\n        switch(operation){\n            case 'H' :\n                cin >> x ;\n                add_to_head(x) ;\n                break ;\n            case 'D' :\n                cin >> k ;\n                if(!k)  head = ne[head] ;\n                else remove(k-1) ;\n                break ;\n            case 'I' :\n                cin >> k >> x ;\n                add(k-1 , x) ;\n                break ;\n            default:\n                break ;\n        }\n        \n    }\n    print_list() ;\n    return 0 ;\n}\n```\n\n<img src=\"https://pic.imgdb.cn/item/6537eb1ec458853aefe7a841.jpg\" alt=\"链表示意图.jpg\">\n\n### 常用函数操作\n\n* 初始化链表(初始化头指针)\n\n```cpp\nvoid InitList(Linklist &HEAD){\n    //调用InitList前得先声明HEAD，例如 Linklist linkedlist_1 ，linkedlist_1即是该链表的名称(用头指针来代表链表名称，类似于用地址a来代表数组)\n    HEAD = new Lnode ; //为HEAD声明一块Lnode大小的空间\n    HEAD->next = NULL ;\n}\n```\n\n* 判断链表是否为空\n\n```cpp\nint IsEmpty(Linklist &HEAD){\n    if(HEAD->next) return 0 ;//非空\n    return 1 ; //为空\n}\n```\n\n* 销毁链表\n\n```cpp\nvoid DestroyList(Linklist &HEAD){\n    Lnode *p ;\n    while(HEAD){\n        p = HEAD ;\n        HEAD = HEAD->next  ;\n        delete p ;\n    }\n}\n```\n\n* 清空链表\n\n```cpp\nvoid ClearList(Linklist &HEAD){\n    Lnode *p , *q ;\n    p = HEAD ->next ;\n    HEAD->next = NULL ;\n    while(p){\n        q = p->next ;\n        delete p ;\n        p = q ;\n    }\n}\n```\n\ntips:清空链表不释放头指针空间\n\n* 获取链表长度\n\n```cpp\nint GetLength(Linklist &HEAD){\n    Lnode *p = HEAD->next ;\n    int length = 0 ;\n    while(p){\n        length++ ;\n        p = p->next ;\n    }\n    return length ;\n}\n```\n\n* 根据索引获取链表元素\n\n```cpp\nint GetElem(Linklist &HEAD , int i){\n    if(i < 0 || i >= GetLength(HEAD))   {cout << \"the index is invalid\" << endl ; return 0 ;}\n    Lnode *p = HEAD->next ;\n    int j = 0 ;\n    while(j != i){\n        j++ ;\n        p = p->next ;\n    }\n    return p->data ;\n}\n```\n\n* 根据值确定结点索引\n\n```cpp\nint LocateElem(Linklist &HEAD , int value){\n    Lnode *p = HEAD->next ;\n    int i = 0 ;\n    while(p){\n        if(value == p->data)    return i ;\n        p = p->next ;\n        i++ ;\n    }\n    cout << value << \"not in this linkedlist\" << endl ;\n    return -1 ;\n}\n```\n\n* 插入结点\n\n```cpp\nvoid ListInsert(Linklist &HEAD , int i , int data){\n    if(i < 0 || i > GetLength(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    Lnode *p = HEAD ;\n    int j = -1 ;\n    while(p && (j!=i-1)){\n        p = p->next ;\n        j++ ;\n    }\n    Lnode *s = new Lnode ;\n    s->data = data ;\n    s->next = HEAD->next ;\n    HEAD->next = s ;\n    cout << \"Insert \" << data << \" in the index \" << '[' << i << \"] successfully !\" << endl ;\n}\n```\n\ntips: 此处`p = HEAD`从`HEAD`开始，`j=-1` `j`从`-1`开始，是为了`i=0`的特殊情况。\n\n* 删除元素\n\n```cpp\nvoid DeleteElem(Linklist &L , int i){\n    if(i < 0 || i >= GetLength(L))  {cout << \"the index i is invalid\" << endl ; exit(0) ;}\n    Lnode *p = L ;\n    int j = -1 ;\n    while(p && (j!=i-1)){\n        p = p->next ;\n        j++ ;\n    }\n    Lnode *s = p->next ;\n    p->next = s->next ;\n    delete s ;\n\n}\n```\n\n* 打印链表所有元素\n\n```cpp\nvoid PrintList(Linklist &L){\n    Lnode *p = L->next ;\n    while(p){\n        cout << p->data << \"  \" ;\n        p = p->next ;\n    }\n    cout << endl ;\n}\n```\n\n* 头插法创建链表\n\n```cpp\nvoid CreateList_H(Linklist &L , int n){\n    //insert the nodes from the head of linkedlist\n    L = new Lnode ;\n    L->next = NULL ;\n    for(int i = n - 1 ; i >= 0 ; i--){\n        Lnode *p = new Lnode ;\n        cin >> p->data ;\n        p->next = L->next ;\n        L->next = p ;\n    }\n}\n```\n\n* 尾插法创建链表\n\n```cpp\nvoid CreateList_T(Linklist &L , int n ){\n    //Insert elements from the tail of linkedlist\n    L = new Lnode ;\n    L->next = NULL ;\n    Lnode *T = L ;\n    for(int i = 0 ; i < n ; i++){\n        Lnode *p = new Lnode ;\n        cin >> p->data ;\n        T->next = p ;\n        T = T->next ;\n        p->next = NULL ;\n    }\n```\n\n\n\n## 双向链表\n\n```cpp\n#include<iostream>\nusing namespace std ;\ntypedef struct DoubleLinkedList\n{\n    int data ;\n    struct DoubleLinkedList *prior , *next ;\n}DLNode , *DLList;\nvoid InitDLList (DLList &HEAD){\n    HEAD = new DLNode ;\n    HEAD->next = NULL ;\n    HEAD->prior = NULL ;\n}\nvoid CreateList_DL(DLList &HEAD , int n){\n    for(int i = 0 ; i < n ; i++){\n        DLNode *p = new DLNode ;\n        cin >> p->data ;\n        p->next = HEAD->next ;\n\n        if(HEAD->next){\n            HEAD->next->prior = p ;\n        }\n        //i = 0 时，插入第一个元素时，HEAD->next 为NULL， NULL是没有的，即NULL->prior是访问不到的，segmentation fault\n        //因此当HEAD->next不为NULL时，才会执行HEAD->next->prior = p \n        //当HEAD->next 为NULL，也就是创建第一个结点时，不要让(也没法让)NULL->prior = p \n\n        HEAD->next = p ;\n        p->prior = HEAD ;\n    }\n}\nint GetLength_DL(DLList &HEAD){\n    int length = 0 ;\n    DLNode *p = HEAD->next;\n    while(p){\n        length++ ;\n        p = p->next ;\n    }\n    return length ;\n}\nvoid PrintList_DL(DLList &HEAD){\n    DLNode *p = HEAD->next ;\n    for(int i = 0 ; i < GetLength_DL(HEAD) ; i++){\n        cout << p->data << \"  \" ;\n        p = p->next ;\n    }\n    cout << endl ;\n}\nvoid InsertList_DL(DLList &HEAD , int i , int data){\n    if( i < 0 || i > GetLength_DL(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    DLNode *p = HEAD ;\n    for(int j = 0 ; j < i ; j++){\n        p = p->next ;\n    }\n    DLNode *s = new DLNode ;\n    s->data = data ;\n    s->next = p->next ;\n    if(p->next){\n        p->next->prior = s ;\n    }\n    p->next = s ;\n    s->prior = p ;\n\n}\nvoid DeleteElem_DL(DLList &HEAD  , int i){\n    if(i < 0 || i >= GetLength_DL(HEAD))    {cout << \"the index is invalid \" << endl ; exit(0) ;}\n    DLNode *p = HEAD->next ;\n    while(i--){\n        p = p->next ;\n    }\n    p->prior->next = p->next ;\n    p->next->prior = p->prior ;\n    delete p ;\n}\nint main(){\n    DLList HEAD ;\n    InitDLList(HEAD) ;\n    CreateList_DL(HEAD , 6) ;\n    PrintList_DL(HEAD) ;\n    InsertList_DL(HEAD , 2 , 821) ;\n    PrintList_DL(HEAD) ;\n    DeleteElem_DL(HEAD , 1) ;\n    PrintList_DL(HEAD) ;\n    return 0 ;\n}\n```\n\n## 常见bugs\n\n* 未考虑`NULL`的特殊性，执行`NULL->next`操作。编译器还不会爆出错误信息，满大街找bug.\n\n**解决方案：**\n\n```cpp\nvoid InsertList_DL(DLList &HEAD , int i , int data){\n    if( i < 0 || i > GetLength_DL(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    DLNode *p = HEAD ;\n    for(int j = 0 ; j < i ; j++){\n        p = p->next ;\n    }\n    DLNode *s = new DLNode ;\n    s->data = data ;\n    s->next = p->next ;\n    if(p->next){\n        p->next->prior = s ;\n    }//加入判断p->next是否为NULL\n    p->next = s ;\n    s->prior = p ;\n}\n```\n\n## y总的链表算法\n\n在写AcWing上的题时，发现写的比较吃力。我在想，结构体+指针是否还不是高效的解法，就想着去看看y总的算法，y总提到：\n\n* 指针+结构体实现链表一般出现在面试题中，笔试题一般用数组实现链表\n* `new`操作太耗时，大数据量时多个`new`操作可能超时。Acwing单链表那道题，数组模拟链表快10%。\n* 但用数组模拟链表与动态实现链表相比，空间复杂度更大。\n\n## 一些练习题\n\n* [AcWing 826. 单链表 - AcWing](https://www.acwing.com/activity/content/problem/content/863/)\n* [827. 双链表 - AcWing题库](https://www.acwing.com/problem/content/description/829/)\n\n\n\n\n\n\n\n","source":"_posts/重学链表.md","raw":"---\ntitle: 重学链表\nabbrlink: 14fa845f\ndate: 2021-10-24 15:45:08\ntags:\n---\n\n最近又重学了一遍链表，记得大一学链表时也是很迷，指来指去没指明白哈哈哈。这一次学也是通透多了。\n\n<!-- more -->\n\n## 单链表\n\n### 基本概念\n\n#### 定义\n\n```cpp\ntypedef struct Lnode{\n    int data ;\n    struct Lnode *next ;\n}Lnode , *Linklist ;\n```\n\n* 结构体内两个元素`data` 、`next`\n* `data`是`int`型，可修改为其他，例如`char`、`double`\n* `next`是类型为`struct Lnode`的指针，可指向`struct Lnode`这种结构体，在链表中`next`指向下一个结点，例如`1号结点的next` = `2号结点的地址`\n* `Lnode`是`struct Lnode`的别名 ， `Linklist` 是`struct Lnode *`的别名\n\n#### 声明一个链表\n\n```cpp\nLinklist HEAD = new Lnode ;\nHEAD->next = NULL ;\n```\n\n* `Linklist HEAD`与`Lnode *HEAD`等价，但我们一般用`Linklist HEAD`来定义链表(定义链表头结点，链表头结点即代表该链表)。用`Lnode *p`定义一个结点\n* `Linklist HEAD = new Lnode ;`为头结点(头指针)分配一个大小为`Lnode`的空间。\n* 目前链表为空，头指针指向`NULL`.`HEAD->next`表示`HEAD`下一个结点地址。\n* 头指针`HEAD`不能严格算一个结点,`HEAD->data`未定义。\n\n**加入结点**\n\n```cpp\nLnode *p = new Lnode ;//第一个结点p\ncin >> p->data ; //输入该结点存储的数据data\nHEAD->next = p ;\np->next = NULL ;\n```\n\n* **再加一个结点**\n\n```cpp\nLnode *q = new Lnode ;//第二个结点q\ncin >> q->data ;\np->next = q ;\nq->next = NULL ;\n```\n\n* 注意最后一个结点的`next`应该指向`NULL`，否则`q->next`这个野指针无穷无尽。\n\n```cpp\n#include<iostream>\nusing namespace std ;\nconst int N = 100010 ;\nint e[N] , ne[N] , idx , head ;\nvoid init(){\n    head = -1 ;\n    idx = 0 ;\n}\nvoid add_to_head(int x){\n    e[idx] = x ;\n    ne[idx] = head ;\n    head = idx ;\n    idx++ ;\n}\nvoid add(int k , int x ){\n    e[idx] = x ;\n    ne[idx] = ne[k] ;\n    ne[k] = idx ;\n    idx++ ;\n}\nvoid remove(int k){\n    ne[k] = ne[ne[k]] ;   \n}\nvoid print_list(){\n    for(int i = head ; i != -1 ; i = ne[i]) cout << e[i] << ' ' ;\n}\nint main(){\n    int M , k , x ;\n    char operation ;\n    init() ;\n    cin >> M ;\n    while(M--){\n        cin >> operation ;\n        switch(operation){\n            case 'H' :\n                cin >> x ;\n                add_to_head(x) ;\n                break ;\n            case 'D' :\n                cin >> k ;\n                if(!k)  head = ne[head] ;\n                else remove(k-1) ;\n                break ;\n            case 'I' :\n                cin >> k >> x ;\n                add(k-1 , x) ;\n                break ;\n            default:\n                break ;\n        }\n        \n    }\n    print_list() ;\n    return 0 ;\n}\n```\n\n<img src=\"https://pic.imgdb.cn/item/6537eb1ec458853aefe7a841.jpg\" alt=\"链表示意图.jpg\">\n\n### 常用函数操作\n\n* 初始化链表(初始化头指针)\n\n```cpp\nvoid InitList(Linklist &HEAD){\n    //调用InitList前得先声明HEAD，例如 Linklist linkedlist_1 ，linkedlist_1即是该链表的名称(用头指针来代表链表名称，类似于用地址a来代表数组)\n    HEAD = new Lnode ; //为HEAD声明一块Lnode大小的空间\n    HEAD->next = NULL ;\n}\n```\n\n* 判断链表是否为空\n\n```cpp\nint IsEmpty(Linklist &HEAD){\n    if(HEAD->next) return 0 ;//非空\n    return 1 ; //为空\n}\n```\n\n* 销毁链表\n\n```cpp\nvoid DestroyList(Linklist &HEAD){\n    Lnode *p ;\n    while(HEAD){\n        p = HEAD ;\n        HEAD = HEAD->next  ;\n        delete p ;\n    }\n}\n```\n\n* 清空链表\n\n```cpp\nvoid ClearList(Linklist &HEAD){\n    Lnode *p , *q ;\n    p = HEAD ->next ;\n    HEAD->next = NULL ;\n    while(p){\n        q = p->next ;\n        delete p ;\n        p = q ;\n    }\n}\n```\n\ntips:清空链表不释放头指针空间\n\n* 获取链表长度\n\n```cpp\nint GetLength(Linklist &HEAD){\n    Lnode *p = HEAD->next ;\n    int length = 0 ;\n    while(p){\n        length++ ;\n        p = p->next ;\n    }\n    return length ;\n}\n```\n\n* 根据索引获取链表元素\n\n```cpp\nint GetElem(Linklist &HEAD , int i){\n    if(i < 0 || i >= GetLength(HEAD))   {cout << \"the index is invalid\" << endl ; return 0 ;}\n    Lnode *p = HEAD->next ;\n    int j = 0 ;\n    while(j != i){\n        j++ ;\n        p = p->next ;\n    }\n    return p->data ;\n}\n```\n\n* 根据值确定结点索引\n\n```cpp\nint LocateElem(Linklist &HEAD , int value){\n    Lnode *p = HEAD->next ;\n    int i = 0 ;\n    while(p){\n        if(value == p->data)    return i ;\n        p = p->next ;\n        i++ ;\n    }\n    cout << value << \"not in this linkedlist\" << endl ;\n    return -1 ;\n}\n```\n\n* 插入结点\n\n```cpp\nvoid ListInsert(Linklist &HEAD , int i , int data){\n    if(i < 0 || i > GetLength(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    Lnode *p = HEAD ;\n    int j = -1 ;\n    while(p && (j!=i-1)){\n        p = p->next ;\n        j++ ;\n    }\n    Lnode *s = new Lnode ;\n    s->data = data ;\n    s->next = HEAD->next ;\n    HEAD->next = s ;\n    cout << \"Insert \" << data << \" in the index \" << '[' << i << \"] successfully !\" << endl ;\n}\n```\n\ntips: 此处`p = HEAD`从`HEAD`开始，`j=-1` `j`从`-1`开始，是为了`i=0`的特殊情况。\n\n* 删除元素\n\n```cpp\nvoid DeleteElem(Linklist &L , int i){\n    if(i < 0 || i >= GetLength(L))  {cout << \"the index i is invalid\" << endl ; exit(0) ;}\n    Lnode *p = L ;\n    int j = -1 ;\n    while(p && (j!=i-1)){\n        p = p->next ;\n        j++ ;\n    }\n    Lnode *s = p->next ;\n    p->next = s->next ;\n    delete s ;\n\n}\n```\n\n* 打印链表所有元素\n\n```cpp\nvoid PrintList(Linklist &L){\n    Lnode *p = L->next ;\n    while(p){\n        cout << p->data << \"  \" ;\n        p = p->next ;\n    }\n    cout << endl ;\n}\n```\n\n* 头插法创建链表\n\n```cpp\nvoid CreateList_H(Linklist &L , int n){\n    //insert the nodes from the head of linkedlist\n    L = new Lnode ;\n    L->next = NULL ;\n    for(int i = n - 1 ; i >= 0 ; i--){\n        Lnode *p = new Lnode ;\n        cin >> p->data ;\n        p->next = L->next ;\n        L->next = p ;\n    }\n}\n```\n\n* 尾插法创建链表\n\n```cpp\nvoid CreateList_T(Linklist &L , int n ){\n    //Insert elements from the tail of linkedlist\n    L = new Lnode ;\n    L->next = NULL ;\n    Lnode *T = L ;\n    for(int i = 0 ; i < n ; i++){\n        Lnode *p = new Lnode ;\n        cin >> p->data ;\n        T->next = p ;\n        T = T->next ;\n        p->next = NULL ;\n    }\n```\n\n\n\n## 双向链表\n\n```cpp\n#include<iostream>\nusing namespace std ;\ntypedef struct DoubleLinkedList\n{\n    int data ;\n    struct DoubleLinkedList *prior , *next ;\n}DLNode , *DLList;\nvoid InitDLList (DLList &HEAD){\n    HEAD = new DLNode ;\n    HEAD->next = NULL ;\n    HEAD->prior = NULL ;\n}\nvoid CreateList_DL(DLList &HEAD , int n){\n    for(int i = 0 ; i < n ; i++){\n        DLNode *p = new DLNode ;\n        cin >> p->data ;\n        p->next = HEAD->next ;\n\n        if(HEAD->next){\n            HEAD->next->prior = p ;\n        }\n        //i = 0 时，插入第一个元素时，HEAD->next 为NULL， NULL是没有的，即NULL->prior是访问不到的，segmentation fault\n        //因此当HEAD->next不为NULL时，才会执行HEAD->next->prior = p \n        //当HEAD->next 为NULL，也就是创建第一个结点时，不要让(也没法让)NULL->prior = p \n\n        HEAD->next = p ;\n        p->prior = HEAD ;\n    }\n}\nint GetLength_DL(DLList &HEAD){\n    int length = 0 ;\n    DLNode *p = HEAD->next;\n    while(p){\n        length++ ;\n        p = p->next ;\n    }\n    return length ;\n}\nvoid PrintList_DL(DLList &HEAD){\n    DLNode *p = HEAD->next ;\n    for(int i = 0 ; i < GetLength_DL(HEAD) ; i++){\n        cout << p->data << \"  \" ;\n        p = p->next ;\n    }\n    cout << endl ;\n}\nvoid InsertList_DL(DLList &HEAD , int i , int data){\n    if( i < 0 || i > GetLength_DL(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    DLNode *p = HEAD ;\n    for(int j = 0 ; j < i ; j++){\n        p = p->next ;\n    }\n    DLNode *s = new DLNode ;\n    s->data = data ;\n    s->next = p->next ;\n    if(p->next){\n        p->next->prior = s ;\n    }\n    p->next = s ;\n    s->prior = p ;\n\n}\nvoid DeleteElem_DL(DLList &HEAD  , int i){\n    if(i < 0 || i >= GetLength_DL(HEAD))    {cout << \"the index is invalid \" << endl ; exit(0) ;}\n    DLNode *p = HEAD->next ;\n    while(i--){\n        p = p->next ;\n    }\n    p->prior->next = p->next ;\n    p->next->prior = p->prior ;\n    delete p ;\n}\nint main(){\n    DLList HEAD ;\n    InitDLList(HEAD) ;\n    CreateList_DL(HEAD , 6) ;\n    PrintList_DL(HEAD) ;\n    InsertList_DL(HEAD , 2 , 821) ;\n    PrintList_DL(HEAD) ;\n    DeleteElem_DL(HEAD , 1) ;\n    PrintList_DL(HEAD) ;\n    return 0 ;\n}\n```\n\n## 常见bugs\n\n* 未考虑`NULL`的特殊性，执行`NULL->next`操作。编译器还不会爆出错误信息，满大街找bug.\n\n**解决方案：**\n\n```cpp\nvoid InsertList_DL(DLList &HEAD , int i , int data){\n    if( i < 0 || i > GetLength_DL(HEAD))    {cout << \"the index is invalid\" << endl ; exit(0) ;}\n    DLNode *p = HEAD ;\n    for(int j = 0 ; j < i ; j++){\n        p = p->next ;\n    }\n    DLNode *s = new DLNode ;\n    s->data = data ;\n    s->next = p->next ;\n    if(p->next){\n        p->next->prior = s ;\n    }//加入判断p->next是否为NULL\n    p->next = s ;\n    s->prior = p ;\n}\n```\n\n## y总的链表算法\n\n在写AcWing上的题时，发现写的比较吃力。我在想，结构体+指针是否还不是高效的解法，就想着去看看y总的算法，y总提到：\n\n* 指针+结构体实现链表一般出现在面试题中，笔试题一般用数组实现链表\n* `new`操作太耗时，大数据量时多个`new`操作可能超时。Acwing单链表那道题，数组模拟链表快10%。\n* 但用数组模拟链表与动态实现链表相比，空间复杂度更大。\n\n## 一些练习题\n\n* [AcWing 826. 单链表 - AcWing](https://www.acwing.com/activity/content/problem/content/863/)\n* [827. 双链表 - AcWing题库](https://www.acwing.com/problem/content/description/829/)\n\n\n\n\n\n\n\n","slug":"重学链表","published":1,"updated":"2024-03-15T12:40:22.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluami4dl001958teakmq1cjl","content":"<p>最近又重学了一遍链表，记得大一学链表时也是很迷，指来指去没指明白哈哈哈。这一次学也是通透多了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Lnode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data ;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Lnode</span> *next ;</span><br><span class=\"line\">&#125;Lnode , *Linklist ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体内两个元素<code>data</code> 、<code>next</code></li>\n<li><code>data</code>是<code>int</code>型，可修改为其他，例如<code>char</code>、<code>double</code></li>\n<li><code>next</code>是类型为<code>struct Lnode</code>的指针，可指向<code>struct Lnode</code>这种结构体，在链表中<code>next</code>指向下一个结点，例如<code>1号结点的next</code> &#x3D; <code>2号结点的地址</code></li>\n<li><code>Lnode</code>是<code>struct Lnode</code>的别名 ， <code>Linklist</code> 是<code>struct Lnode *</code>的别名</li>\n</ul>\n<h4 id=\"声明一个链表\"><a href=\"#声明一个链表\" class=\"headerlink\" title=\"声明一个链表\"></a>声明一个链表</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linklist HEAD = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Linklist HEAD</code>与<code>Lnode *HEAD</code>等价，但我们一般用<code>Linklist HEAD</code>来定义链表(定义链表头结点，链表头结点即代表该链表)。用<code>Lnode *p</code>定义一个结点</li>\n<li><code>Linklist HEAD = new Lnode ;</code>为头结点(头指针)分配一个大小为<code>Lnode</code>的空间。</li>\n<li>目前链表为空，头指针指向<code>NULL</code>.<code>HEAD-&gt;next</code>表示<code>HEAD</code>下一个结点地址。</li>\n<li>头指针<code>HEAD</code>不能严格算一个结点,<code>HEAD-&gt;data</code>未定义。</li>\n</ul>\n<p><strong>加入结点</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lnode *p = <span class=\"keyword\">new</span> Lnode ;<span class=\"comment\">//第一个结点p</span></span><br><span class=\"line\">cin &gt;&gt; p-&gt;data ; <span class=\"comment\">//输入该结点存储的数据data</span></span><br><span class=\"line\">HEAD-&gt;next = p ;</span><br><span class=\"line\">p-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>再加一个结点</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lnode *q = <span class=\"keyword\">new</span> Lnode ;<span class=\"comment\">//第二个结点q</span></span><br><span class=\"line\">cin &gt;&gt; q-&gt;data ;</span><br><span class=\"line\">p-&gt;next = q ;</span><br><span class=\"line\">q-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意最后一个结点的<code>next</code>应该指向<code>NULL</code>，否则<code>q-&gt;next</code>这个野指针无穷无尽。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> e[N] , ne[N] , idx , head ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    head = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    idx = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_to_head</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    e[idx] = x ;</span><br><span class=\"line\">    ne[idx] = head ;</span><br><span class=\"line\">    head = idx ;</span><br><span class=\"line\">    idx++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k , <span class=\"type\">int</span> x )</span></span>&#123;</span><br><span class=\"line\">    e[idx] = x ;</span><br><span class=\"line\">    ne[idx] = ne[k] ;</span><br><span class=\"line\">    ne[k] = idx ;</span><br><span class=\"line\">    idx++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    ne[k] = ne[ne[k]] ;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head ; i != <span class=\"number\">-1</span> ; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> M , k , x ;</span><br><span class=\"line\">    <span class=\"type\">char</span> operation ;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>() ;</span><br><span class=\"line\">    cin &gt;&gt; M ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(M--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; operation ;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(operation)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;H&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; x ;</span><br><span class=\"line\">                <span class=\"built_in\">add_to_head</span>(x) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; k ;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!k)  head = ne[head] ;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">remove</span>(k<span class=\"number\">-1</span>) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; k &gt;&gt; x ;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span> , x) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print_list</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://pic.imgdb.cn/item/6537eb1ec458853aefe7a841.jpg\" alt=\"链表示意图.jpg\">\n\n<h3 id=\"常用函数操作\"><a href=\"#常用函数操作\" class=\"headerlink\" title=\"常用函数操作\"></a>常用函数操作</h3><ul>\n<li>初始化链表(初始化头指针)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用InitList前得先声明HEAD，例如 Linklist linkedlist_1 ，linkedlist_1即是该链表的名称(用头指针来代表链表名称，类似于用地址a来代表数组)</span></span><br><span class=\"line\">    HEAD = <span class=\"keyword\">new</span> Lnode ; <span class=\"comment\">//为HEAD声明一块Lnode大小的空间</span></span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断链表是否为空</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">IsEmpty</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(HEAD-&gt;next) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;<span class=\"comment\">//非空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ; <span class=\"comment\">//为空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>销毁链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DestroyList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(HEAD)&#123;</span><br><span class=\"line\">        p = HEAD ;</span><br><span class=\"line\">        HEAD = HEAD-&gt;next  ;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清空链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClearList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p , *q ;</span><br><span class=\"line\">    p = HEAD -&gt;next ;</span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        q = p-&gt;next ;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">        p = q ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips:清空链表不释放头指针空间</p>\n<ul>\n<li>获取链表长度</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        length++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据索引获取链表元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetElem</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength</span>(HEAD))   &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;&#125;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j != i)&#123;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p-&gt;data ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据值确定结点索引</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateElem</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value == p-&gt;data)    <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        i++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; value &lt;&lt; <span class=\"string\">&quot;not in this linkedlist&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>插入结点</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ListInsert</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    Lnode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; (j!=i<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lnode *s = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = HEAD-&gt;next ;</span><br><span class=\"line\">    HEAD-&gt;next = s ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Insert &quot;</span> &lt;&lt; data &lt;&lt; <span class=\"string\">&quot; in the index &quot;</span> &lt;&lt; <span class=\"string\">&#x27;[&#x27;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;] successfully !&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips: 此处<code>p = HEAD</code>从<code>HEAD</code>开始，<code>j=-1</code> <code>j</code>从<code>-1</code>开始，是为了<code>i=0</code>的特殊情况。</p>\n<ul>\n<li>删除元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DeleteElem</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength</span>(L))  &#123;cout &lt;&lt; <span class=\"string\">&quot;the index i is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    Lnode *p = L ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; (j!=i<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lnode *s = p-&gt;next ;</span><br><span class=\"line\">    p-&gt;next = s-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> s ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打印链表所有元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList</span><span class=\"params\">(Linklist &amp;L)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = L-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot;  &quot;</span> ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插法创建链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_H</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//insert the nodes from the head of linkedlist</span></span><br><span class=\"line\">    L = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span> ; i &gt;= <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        Lnode *p = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next ;</span><br><span class=\"line\">        L-&gt;next = p ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插法创建链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_T</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> n )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Insert elements from the tail of linkedlist</span></span><br><span class=\"line\">    L = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    Lnode *T = L ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        Lnode *p = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        T-&gt;next = p ;</span><br><span class=\"line\">        T = T-&gt;next ;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DoubleLinkedList</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data ;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DoubleLinkedList</span> *prior , *next ;</span><br><span class=\"line\">&#125;DLNode , *DLList;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitDLList</span> <span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    HEAD = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    HEAD-&gt;prior = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        DLNode *p = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        p-&gt;next = HEAD-&gt;next ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(HEAD-&gt;next)&#123;</span><br><span class=\"line\">            HEAD-&gt;next-&gt;prior = p ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//i = 0 时，插入第一个元素时，HEAD-&gt;next 为NULL， NULL是没有的，即NULL-&gt;prior是访问不到的，segmentation fault</span></span><br><span class=\"line\">        <span class=\"comment\">//因此当HEAD-&gt;next不为NULL时，才会执行HEAD-&gt;next-&gt;prior = p </span></span><br><span class=\"line\">        <span class=\"comment\">//当HEAD-&gt;next 为NULL，也就是创建第一个结点时，不要让(也没法让)NULL-&gt;prior = p </span></span><br><span class=\"line\"></span><br><span class=\"line\">        HEAD-&gt;next = p ;</span><br><span class=\"line\">        p-&gt;prior = HEAD ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength_DL</span><span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        length++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList_DL</span><span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">GetLength_DL</span>(HEAD) ; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot;  &quot;</span> ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InsertList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; i ; j++)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DLNode *s = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next)&#123;</span><br><span class=\"line\">        p-&gt;next-&gt;prior = s ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;next = s ;</span><br><span class=\"line\">    s-&gt;prior = p ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DeleteElem_DL</span><span class=\"params\">(DLList &amp;HEAD  , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid &quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;prior-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    p-&gt;next-&gt;prior = p-&gt;prior ;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    DLList HEAD ;</span><br><span class=\"line\">    <span class=\"built_in\">InitDLList</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">CreateList_DL</span>(HEAD , <span class=\"number\">6</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">InsertList_DL</span>(HEAD , <span class=\"number\">2</span> , <span class=\"number\">821</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">DeleteElem_DL</span>(HEAD , <span class=\"number\">1</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见bugs\"><a href=\"#常见bugs\" class=\"headerlink\" title=\"常见bugs\"></a>常见bugs</h2><ul>\n<li>未考虑<code>NULL</code>的特殊性，执行<code>NULL-&gt;next</code>操作。编译器还不会爆出错误信息，满大街找bug.</li>\n</ul>\n<p><strong>解决方案：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InsertList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; i ; j++)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DLNode *s = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next)&#123;</span><br><span class=\"line\">        p-&gt;next-&gt;prior = s ;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//加入判断p-&gt;next是否为NULL</span></span><br><span class=\"line\">    p-&gt;next = s ;</span><br><span class=\"line\">    s-&gt;prior = p ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"y总的链表算法\"><a href=\"#y总的链表算法\" class=\"headerlink\" title=\"y总的链表算法\"></a>y总的链表算法</h2><p>在写AcWing上的题时，发现写的比较吃力。我在想，结构体+指针是否还不是高效的解法，就想着去看看y总的算法，y总提到：</p>\n<ul>\n<li>指针+结构体实现链表一般出现在面试题中，笔试题一般用数组实现链表</li>\n<li><code>new</code>操作太耗时，大数据量时多个<code>new</code>操作可能超时。Acwing单链表那道题，数组模拟链表快10%。</li>\n<li>但用数组模拟链表与动态实现链表相比，空间复杂度更大。</li>\n</ul>\n<h2 id=\"一些练习题\"><a href=\"#一些练习题\" class=\"headerlink\" title=\"一些练习题\"></a>一些练习题</h2><ul>\n<li><a href=\"https://www.acwing.com/activity/content/problem/content/863/\">AcWing 826. 单链表 - AcWing</a></li>\n<li><a href=\"https://www.acwing.com/problem/content/description/829/\">827. 双链表 - AcWing题库</a></li>\n</ul>\n","site":{"data":{}},"length":7076,"excerpt":"<p>最近又重学了一遍链表，记得大一学链表时也是很迷，指来指去没指明白哈哈哈。这一次学也是通透多了。</p>","more":"<h2 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Lnode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data ;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Lnode</span> *next ;</span><br><span class=\"line\">&#125;Lnode , *Linklist ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体内两个元素<code>data</code> 、<code>next</code></li>\n<li><code>data</code>是<code>int</code>型，可修改为其他，例如<code>char</code>、<code>double</code></li>\n<li><code>next</code>是类型为<code>struct Lnode</code>的指针，可指向<code>struct Lnode</code>这种结构体，在链表中<code>next</code>指向下一个结点，例如<code>1号结点的next</code> &#x3D; <code>2号结点的地址</code></li>\n<li><code>Lnode</code>是<code>struct Lnode</code>的别名 ， <code>Linklist</code> 是<code>struct Lnode *</code>的别名</li>\n</ul>\n<h4 id=\"声明一个链表\"><a href=\"#声明一个链表\" class=\"headerlink\" title=\"声明一个链表\"></a>声明一个链表</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linklist HEAD = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Linklist HEAD</code>与<code>Lnode *HEAD</code>等价，但我们一般用<code>Linklist HEAD</code>来定义链表(定义链表头结点，链表头结点即代表该链表)。用<code>Lnode *p</code>定义一个结点</li>\n<li><code>Linklist HEAD = new Lnode ;</code>为头结点(头指针)分配一个大小为<code>Lnode</code>的空间。</li>\n<li>目前链表为空，头指针指向<code>NULL</code>.<code>HEAD-&gt;next</code>表示<code>HEAD</code>下一个结点地址。</li>\n<li>头指针<code>HEAD</code>不能严格算一个结点,<code>HEAD-&gt;data</code>未定义。</li>\n</ul>\n<p><strong>加入结点</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lnode *p = <span class=\"keyword\">new</span> Lnode ;<span class=\"comment\">//第一个结点p</span></span><br><span class=\"line\">cin &gt;&gt; p-&gt;data ; <span class=\"comment\">//输入该结点存储的数据data</span></span><br><span class=\"line\">HEAD-&gt;next = p ;</span><br><span class=\"line\">p-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>再加一个结点</strong></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lnode *q = <span class=\"keyword\">new</span> Lnode ;<span class=\"comment\">//第二个结点q</span></span><br><span class=\"line\">cin &gt;&gt; q-&gt;data ;</span><br><span class=\"line\">p-&gt;next = q ;</span><br><span class=\"line\">q-&gt;next = <span class=\"literal\">NULL</span> ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意最后一个结点的<code>next</code>应该指向<code>NULL</code>，否则<code>q-&gt;next</code>这个野指针无穷无尽。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span> ;</span><br><span class=\"line\"><span class=\"type\">int</span> e[N] , ne[N] , idx , head ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    head = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    idx = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_to_head</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    e[idx] = x ;</span><br><span class=\"line\">    ne[idx] = head ;</span><br><span class=\"line\">    head = idx ;</span><br><span class=\"line\">    idx++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k , <span class=\"type\">int</span> x )</span></span>&#123;</span><br><span class=\"line\">    e[idx] = x ;</span><br><span class=\"line\">    ne[idx] = ne[k] ;</span><br><span class=\"line\">    ne[k] = idx ;</span><br><span class=\"line\">    idx++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    ne[k] = ne[ne[k]] ;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head ; i != <span class=\"number\">-1</span> ; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> M , k , x ;</span><br><span class=\"line\">    <span class=\"type\">char</span> operation ;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>() ;</span><br><span class=\"line\">    cin &gt;&gt; M ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(M--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; operation ;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(operation)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;H&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; x ;</span><br><span class=\"line\">                <span class=\"built_in\">add_to_head</span>(x) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; k ;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!k)  head = ne[head] ;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">remove</span>(k<span class=\"number\">-1</span>) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span> :</span><br><span class=\"line\">                cin &gt;&gt; k &gt;&gt; x ;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span> , x) ;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print_list</span>() ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://pic.imgdb.cn/item/6537eb1ec458853aefe7a841.jpg\" alt=\"链表示意图.jpg\">\n\n<h3 id=\"常用函数操作\"><a href=\"#常用函数操作\" class=\"headerlink\" title=\"常用函数操作\"></a>常用函数操作</h3><ul>\n<li>初始化链表(初始化头指针)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用InitList前得先声明HEAD，例如 Linklist linkedlist_1 ，linkedlist_1即是该链表的名称(用头指针来代表链表名称，类似于用地址a来代表数组)</span></span><br><span class=\"line\">    HEAD = <span class=\"keyword\">new</span> Lnode ; <span class=\"comment\">//为HEAD声明一块Lnode大小的空间</span></span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断链表是否为空</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">IsEmpty</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(HEAD-&gt;next) <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;<span class=\"comment\">//非空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> ; <span class=\"comment\">//为空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>销毁链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DestroyList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(HEAD)&#123;</span><br><span class=\"line\">        p = HEAD ;</span><br><span class=\"line\">        HEAD = HEAD-&gt;next  ;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清空链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClearList</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p , *q ;</span><br><span class=\"line\">    p = HEAD -&gt;next ;</span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        q = p-&gt;next ;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">        p = q ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips:清空链表不释放头指针空间</p>\n<ul>\n<li>获取链表长度</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength</span><span class=\"params\">(Linklist &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        length++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据索引获取链表元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetElem</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength</span>(HEAD))   &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;&#125;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j != i)&#123;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p-&gt;data ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据值确定结点索引</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">LocateElem</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value == p-&gt;data)    <span class=\"keyword\">return</span> i ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        i++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; value &lt;&lt; <span class=\"string\">&quot;not in this linkedlist&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>插入结点</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ListInsert</span><span class=\"params\">(Linklist &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    Lnode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; (j!=i<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lnode *s = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = HEAD-&gt;next ;</span><br><span class=\"line\">    HEAD-&gt;next = s ;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Insert &quot;</span> &lt;&lt; data &lt;&lt; <span class=\"string\">&quot; in the index &quot;</span> &lt;&lt; <span class=\"string\">&#x27;[&#x27;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;] successfully !&quot;</span> &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips: 此处<code>p = HEAD</code>从<code>HEAD</code>开始，<code>j=-1</code> <code>j</code>从<code>-1</code>开始，是为了<code>i=0</code>的特殊情况。</p>\n<ul>\n<li>删除元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DeleteElem</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength</span>(L))  &#123;cout &lt;&lt; <span class=\"string\">&quot;the index i is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    Lnode *p = L ;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">-1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p &amp;&amp; (j!=i<span class=\"number\">-1</span>))&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">        j++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Lnode *s = p-&gt;next ;</span><br><span class=\"line\">    p-&gt;next = s-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> s ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打印链表所有元素</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList</span><span class=\"params\">(Linklist &amp;L)</span></span>&#123;</span><br><span class=\"line\">    Lnode *p = L-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot;  &quot;</span> ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>头插法创建链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_H</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//insert the nodes from the head of linkedlist</span></span><br><span class=\"line\">    L = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span> ; i &gt;= <span class=\"number\">0</span> ; i--)&#123;</span><br><span class=\"line\">        Lnode *p = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next ;</span><br><span class=\"line\">        L-&gt;next = p ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>尾插法创建链表</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_T</span><span class=\"params\">(Linklist &amp;L , <span class=\"type\">int</span> n )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Insert elements from the tail of linkedlist</span></span><br><span class=\"line\">    L = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    Lnode *T = L ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        Lnode *p = <span class=\"keyword\">new</span> Lnode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        T-&gt;next = p ;</span><br><span class=\"line\">        T = T-&gt;next ;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std ;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DoubleLinkedList</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data ;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DoubleLinkedList</span> *prior , *next ;</span><br><span class=\"line\">&#125;DLNode , *DLList;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InitDLList</span> <span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    HEAD = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    HEAD-&gt;next = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    HEAD-&gt;prior = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CreateList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++)&#123;</span><br><span class=\"line\">        DLNode *p = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">        cin &gt;&gt; p-&gt;data ;</span><br><span class=\"line\">        p-&gt;next = HEAD-&gt;next ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(HEAD-&gt;next)&#123;</span><br><span class=\"line\">            HEAD-&gt;next-&gt;prior = p ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//i = 0 时，插入第一个元素时，HEAD-&gt;next 为NULL， NULL是没有的，即NULL-&gt;prior是访问不到的，segmentation fault</span></span><br><span class=\"line\">        <span class=\"comment\">//因此当HEAD-&gt;next不为NULL时，才会执行HEAD-&gt;next-&gt;prior = p </span></span><br><span class=\"line\">        <span class=\"comment\">//当HEAD-&gt;next 为NULL，也就是创建第一个结点时，不要让(也没法让)NULL-&gt;prior = p </span></span><br><span class=\"line\"></span><br><span class=\"line\">        HEAD-&gt;next = p ;</span><br><span class=\"line\">        p-&gt;prior = HEAD ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetLength_DL</span><span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        length++ ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintList_DL</span><span class=\"params\">(DLList &amp;HEAD)</span></span>&#123;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"built_in\">GetLength_DL</span>(HEAD) ; i++)&#123;</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot;  &quot;</span> ;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InsertList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; i ; j++)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DLNode *s = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next)&#123;</span><br><span class=\"line\">        p-&gt;next-&gt;prior = s ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;next = s ;</span><br><span class=\"line\">    s-&gt;prior = p ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DeleteElem_DL</span><span class=\"params\">(DLList &amp;HEAD  , <span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid &quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;prior-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    p-&gt;next-&gt;prior = p-&gt;prior ;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> p ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    DLList HEAD ;</span><br><span class=\"line\">    <span class=\"built_in\">InitDLList</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">CreateList_DL</span>(HEAD , <span class=\"number\">6</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">InsertList_DL</span>(HEAD , <span class=\"number\">2</span> , <span class=\"number\">821</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"built_in\">DeleteElem_DL</span>(HEAD , <span class=\"number\">1</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">PrintList_DL</span>(HEAD) ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见bugs\"><a href=\"#常见bugs\" class=\"headerlink\" title=\"常见bugs\"></a>常见bugs</h2><ul>\n<li>未考虑<code>NULL</code>的特殊性，执行<code>NULL-&gt;next</code>操作。编译器还不会爆出错误信息，满大街找bug.</li>\n</ul>\n<p><strong>解决方案：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">InsertList_DL</span><span class=\"params\">(DLList &amp;HEAD , <span class=\"type\">int</span> i , <span class=\"type\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">GetLength_DL</span>(HEAD))    &#123;cout &lt;&lt; <span class=\"string\">&quot;the index is invalid&quot;</span> &lt;&lt; endl ; <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>) ;&#125;</span><br><span class=\"line\">    DLNode *p = HEAD ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span> ; j &lt; i ; j++)&#123;</span><br><span class=\"line\">        p = p-&gt;next ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DLNode *s = <span class=\"keyword\">new</span> DLNode ;</span><br><span class=\"line\">    s-&gt;data = data ;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next)&#123;</span><br><span class=\"line\">        p-&gt;next-&gt;prior = s ;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//加入判断p-&gt;next是否为NULL</span></span><br><span class=\"line\">    p-&gt;next = s ;</span><br><span class=\"line\">    s-&gt;prior = p ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"y总的链表算法\"><a href=\"#y总的链表算法\" class=\"headerlink\" title=\"y总的链表算法\"></a>y总的链表算法</h2><p>在写AcWing上的题时，发现写的比较吃力。我在想，结构体+指针是否还不是高效的解法，就想着去看看y总的算法，y总提到：</p>\n<ul>\n<li>指针+结构体实现链表一般出现在面试题中，笔试题一般用数组实现链表</li>\n<li><code>new</code>操作太耗时，大数据量时多个<code>new</code>操作可能超时。Acwing单链表那道题，数组模拟链表快10%。</li>\n<li>但用数组模拟链表与动态实现链表相比，空间复杂度更大。</li>\n</ul>\n<h2 id=\"一些练习题\"><a href=\"#一些练习题\" class=\"headerlink\" title=\"一些练习题\"></a>一些练习题</h2><ul>\n<li><a href=\"https://www.acwing.com/activity/content/problem/content/863/\">AcWing 826. 单链表 - AcWing</a></li>\n<li><a href=\"https://www.acwing.com/problem/content/description/829/\">827. 双链表 - AcWing题库</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cluami4d3000158te8y1iaqmc","tag_id":"cluami4d7000458te09xwav4r","_id":"cluami4db000a58te08yx30xb"},{"post_id":"cluami4da000858te0vey3d63","tag_id":"cluami4d7000458te09xwav4r","_id":"cluami4dc000c58te1iv04aah"},{"post_id":"cluami4d6000358te0za6ea90","tag_id":"cluami4db000958te03xofeit","_id":"cluami4dd000g58te5eg1f8wq"},{"post_id":"cluami4dc000f58te66hv7taw","tag_id":"cluami4dc000e58te6andej9f","_id":"cluami4de000j58te8bfw8wb3"},{"post_id":"cluami4d9000758tearc8h26h","tag_id":"cluami4dc000e58te6andej9f","_id":"cluami4df000l58te8mhi4ia2"},{"post_id":"cluami4dc000d58tee1wvdmxh","tag_id":"cluami4dc000e58te6andej9f","_id":"cluami4dg000p58teg1h85yxy"},{"post_id":"cluami4dd000h58tecaaa9gtv","tag_id":"cluami4dg000n58tehj5588jm","_id":"cluami4dh000t58te10gr414j"},{"post_id":"cluami4de000k58teebke93bl","tag_id":"cluami4dh000r58teclkjac8r","_id":"cluami4di000x58teh5lhb2dg"},{"post_id":"cluami4di000v58te219c5l1s","tag_id":"cluami4dc000e58te6andej9f","_id":"cluami4di000y58te2c34e102"},{"post_id":"cluami4df000m58tecevr9qil","tag_id":"cluami4di000w58te6bdx79us","_id":"cluami4dj001058te7cyq1x45"},{"post_id":"cluami4dg000o58te9ymv2w4v","tag_id":"cluami4di000z58teaomp8gaa","_id":"cluami4dj001258te62gocsjc"},{"post_id":"cluami4dg000q58te8mdu26jd","tag_id":"cluami4dj001158teaake0xst","_id":"cluami4dj001458teezm74jt3"},{"post_id":"cluami4dh000s58te6k9v4t2f","tag_id":"cluami4dj001358tehawkhx3i","_id":"cluami4dk001658te4ouraa5k"},{"post_id":"cluami4dh000u58te7mro21k4","tag_id":"cluami4di000w58te6bdx79us","_id":"cluami4dk001758te2d0ncjxj"},{"post_id":"cluami4dk001858te62dpaov3","tag_id":"cluami4di000z58teaomp8gaa","_id":"cluami4dl001a58te0kpoeidb"}],"Tag":[{"name":"Tools","_id":"cluami4d7000458te09xwav4r"},{"name":"C++","_id":"cluami4db000958te03xofeit"},{"name":"Web","_id":"cluami4dc000e58te6andej9f"},{"name":"Software","_id":"cluami4dg000n58tehj5588jm"},{"name":"IC","_id":"cluami4dh000r58teclkjac8r"},{"name":"linux","_id":"cluami4di000w58te6bdx79us"},{"name":"Python","_id":"cluami4di000z58teaomp8gaa"},{"name":"Algorithm","_id":"cluami4dj001158teaake0xst"},{"name":"windows","_id":"cluami4dj001358tehawkhx3i"}]}}